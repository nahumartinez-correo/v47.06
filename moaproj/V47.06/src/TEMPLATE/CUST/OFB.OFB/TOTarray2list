/****o* Pendientes de agrupación/OFB:template:TOTarray2list
* NOMBRE
*   OFB:template:TOTarray2list
* DESCRIPCION
* 	Loads all values from LISTarray_temp and updates the current list object
* 	in the dictionary.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "custOFB.OFB.h"

	SUB template:TOTarray2list
	Local Loffset Like common:local_int
	Local Lmember Like common:local_int

	CALL  TOTscreen2array(display_ctr) /* Store screen list values to LISTarray_temp */

	Loffset = 0
	Lmember = 1

	move "totals" to wkfld /* Total list stamp for the spec writer */
	CALL  csr:wclist ELUPDATE 0 0 STROBJ wkfld

	if (totglobal_rtn.numchars == 0) /* Total list ID */
		move "0" to wkfld
		CALL  csr:wclist ELUPDATE 0 1 STROBJ wkfld
	else
		CALL  csr:wclist ELUPDATE 0 1 DICTOBJ totglobal_rtn
	END IF

	DO /* Member Loop */
/*
* If there is no bucket item in member...skip and look at next member.
*/
		if (LISTarray_temp[Loffset][BUCKET_ARRAY].numchars > 0)

			if (LISTarray_temp[Loffset][SRC_ARRAY].numchars == 0)
				move "0" to wkfld
				CALL  csr:wclist ELUPDATE Lmember SRC_ELEMENT STROBJ wkfld
			else
				move LISTarray_temp[Loffset][SRC_ARRAY] to wkfld
				if (LISTarray_temp[Loffset][SRC_ARRAY] == "1")
					CALL  csr:wclist ELUPDATE Lmember SRC_ELEMENT STROBJ wkfld
				else
					CALL  csr:wclist ELUPDATE Lmember SRC_ELEMENT DICTOBJ wkfld
				end if
			END IF
			if (LISTarray_temp[Loffset][ADDSUB_ARRAY].numchars == 0)
				move "+" to wkfld
			else
				move LISTarray_temp[Loffset][ADDSUB_ARRAY] to wkfld
			END IF
			CALL  csr:wclist ELUPDATE Lmember ADDSUB_ELEMENT STROBJ wkfld
			if (LISTarray_temp[Loffset][BUCKET_ARRAY].numchars == 0)
				move "0" to wkfld
				CALL  csr:wclist ELUPDATE Lmember BUCKET_ELEMENT STROBJ wkfld
			else
				move LISTarray_temp[Loffset][BUCKET_ARRAY] to wkfld
				CALL  csr:wclist ELUPDATE Lmember BUCKET_ELEMENT DICTOBJ wkfld
			END IF
			if (LISTarray_temp[Loffset][MOD_ARRAY].numchars == 0)
				move "0" to wkfld
				CALL  csr:wclist ELUPDATE Lmember MOD_ELEMENT STROBJ wkfld
			else
				move LISTarray_temp[Loffset][MOD_ARRAY] to wkfld
				CALL  csr:wclist ELUPDATE Lmember MOD_ELEMENT DICTOBJ wkfld
			END IF
			if (LISTarray_temp[Loffset][CORR_ARRAY].numchars == 0)
				move "yes" to wkfld
			else
				move LISTarray_temp[Loffset][CORR_ARRAY] to wkfld
			END IF
			CALL  csr:wclist ELUPDATE Lmember CORR_ELEMENT STROBJ wkfld
			let Lmember = Lmember + 1
		else
			CALL  csr:wclist MEMDELETE Lmember
		END IF
		let Loffset = Loffset + 1 /* Update LISTarray_temp ptr */
		if (Loffset >= 65)
			break
		END IF
	LOOP /* Member loop */
	ungetkey RT_SEND
	END SUB

/*******/
