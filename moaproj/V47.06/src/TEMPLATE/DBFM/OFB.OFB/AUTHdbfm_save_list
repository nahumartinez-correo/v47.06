/****o* Pendientes de agrupación/OFB:template:AUTHdbfm_save_list
* NOMBRE
*   OFB:template:AUTHdbfm_save_list
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "DBFMOFB.OFB.h"

sub template:AUTHdbfm_save_list
	Local Lmember Like common:local_int
	Local Loffset Like common:local_int

	let Loffset = 0
	let Lmember = 0
	if ( pre_dbfm.numchars >= 0 && pre_dbfm != "0" )
		CALL  csr:wclist ELUPDATE Lmember 0 DICTOBJ pre_dbfm
		let Lmember = Lmember + 1
	end if
	DO
		if (Loffset == MAX_DBFM_MEMBERS)
			break
		END IF
		CLEARFIELD wkfld


		IF (rt_fld[Loffset].numchars > 0 && rt_fld[Loffset] != "0")
			CALL  csr:wclist ELUPDATE Lmember 0 DICTOBJ rt_fld[Loffset]
			if ( odbc_fld[Loffset].numchars == 0 )
				move " " to odbc_fld[Loffset]
			end if
			if ( substr (odbc_fld[Loffset],0,4) != "DSC:" && \
				substr(odbc_fld[Loffset],0,4) != "dsc:" )
				CALL  csr:wclist ELUPDATE Lmember 1 STROBJ odbc_fld[Loffset]
			else
				CALL  csr:wclist ELUPDATE Lmember 1 DICTOBJ odbc_fld[Loffset]
			end if
			if ( cds_as_fld[Loffset].numchars == 0 || \
				cds_as_fld[Loffset] == "0" )
				move "-" to cds_as_fld[Loffset]
				CALL  csr:wclist ELUPDATE Lmember 2 STROBJ cds_as_fld[Loffset]
			else
				CALL  csr:wclist ELUPDATE Lmember 2 DICTOBJ cds_as_fld[Loffset]
			end if
			let Lmember = Lmember + 1
		ELSE
			IF (ms_prt_flag == 99)
				CALL  csr:wclist MEMDELETE Lmember
			ELSE
				move "0" to rt_fld[Loffset]
				CALL  csr:wclist ELUPDATE Lmember 0 DICTOBJ rt_fld[Loffset]
				move " " to odbc_fld[Loffset]
				call  csr:wclist ELUPDATE Lmember 1 STROBJ odbc_fld[Loffset]
				move "-" to cds_as_fld[Loffset]
				CALL  csr:wclist ELUPDATE Lmember 2 STROBJ cds_as_fld[Loffset]
				move "0" to cds_as_fld[Loffset]
				let Lmember = Lmember + 1
			END IF
		END IF

		let Loffset = Loffset + 1
	LOOP
	// we seem to have an extra one hanging around
	// when there's not a pre procedure
	if ( pre_dbfm.numchars == 0 || pre_dbfm == "0" )
			CALL  csr:wclist MEMDELETE Lmember
	end if
	END SUB


/*******/
