/****o* Pendientes de agrupación/OFB:gali:RCVEheader
* NOMBRE
*   OFB:gali:RCVEheader
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "galircve.h"

SUB gali:RCVEheader
	/* Area de Encabezamiento de Salida del HOST  (AES) */
		
	/* No utilizado, longitud 3 */
	let msg = msgbegin + 3
		
	/* Resultado de la transaccion */
	/* hexadecimal , longitud 1 */
	comm get gali:RCVEresultado             	from msg type BCD length 1
	comm get gali:RCVEfin_transmision       	from msg type BCD length 1
	comm get gali:RCVEsucursal_emi 	from msg type BINARY length 2
	comm get gali:RCVEterminal             	from msg type BINARY length 2
	comm get gali:RCVEsecuencia            	from msg type BINARY length 4
		
	select (gali:RCVEresultado)
		case 00
			let hcomm:tran_status = HOST_ACCEPTED
			break
		case 01
			call gali:RCVEerrores
			let hcomm:tran_status = HOST_ACCEPTED
				
			SELECT ( gali:RCVEjerarquia )
				;Se comenta porque en principio, un cajero no deberia supervisar 
				    ; a ningun otro operador - Laura                         
					;case "1"
					;       let hcomm:tran_status = HOST_ACCEPTED
					;       /* Supervision Nivel Cajero */
					;       setflag tlr:tran_flags supovr_request
					;       setflag siaf:siaf_flags,cajero
					;       setflag siaf:siaf_flags,req_tes
					;       setflag siaf:siaf_flags,req_sup1
					;       break  
					;
					case "A"
					case "a"
						let hcomm:tran_status = HOST_ACCEPTED
						/* Supervision Nivel Cajero Tesorero */
						setflag tlr:tran_flags supovr_request
						setflag siaf:siaf_flags,req_tes
						setflag siaf:siaf_flags,req_sup1
						break
					case "M"
					case "m"
						let hcomm:tran_status = HOST_ACCEPTED
						/* Supervision Nivel Jefe de Oficina */
						setflag tlr:tran_flags supovr_request
						setflag siaf:siaf_flags,req_sup1
						break
					case "Z"
					case "z"
						let hcomm:tran_status = HOST_REJECTED
						break
					case "0"
					case " "
						let hcomm:tran_status = HOST_ACCEPTED
						break
					case else                                               
						let hcomm:tran_status = HOST_REJECTED
						errmsg common:errmsg_list, \
						"(L) TRANSACCION RECHAZADA POR HOST. \n CODIGO DE RECHAZO DESCONOCIDO "
						break
				end select                                              
				break
		case 02
			let hcomm:tran_status = HOST_ACCEPTED
			break
		case 99 
			let hcomm:tran_status = HOST_REJECTED
			errmsg common:errmsg_list, \
			"(L) TRANSACCION RECHAZADA POR HOST. \n CODIGO DE RECHAZO DESCONOCIDO "
			break
		case else
			let hcomm:tran_status = HOST_REJECTED
			errmsg common:errmsg_list, \
				"(L) TRANSACCION RECHAZADA POR HOST.\n CODIGO DE ERROR DESCONOCIDO"
			break
	end select
END SUB

/*******/
