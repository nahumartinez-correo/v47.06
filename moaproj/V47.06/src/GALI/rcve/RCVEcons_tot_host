/****o* Pendientes de agrupación/OFB:gali:RCVEcons_tot_host
* NOMBRE
*   OFB:gali:RCVEcons_tot_host
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "galircve.h"

SUB gali:RCVEcons_tot_host
	CALL RCVEheader
	
	IF (hcomm:tran_status != 3) THEN
		RETURN
	END IF

	comm get gali:RCVEcant_cuentas	from msg type BINARY length 2

	let gali:indice = 0
	do
		/* Cantidad maxima de errores = 20 */
		/* primera pantalla 10 cuentas */
		if (gali:indice > 09) || ((gali:indice + 1) > gali:RCVEcant_cuentas) then
			break
		end if
		comm get gali:RCVEnro_transac[ indice ]	 from msg type BINARY length 2
		comm get gali:RCVEcant_transac[ indice ]	 from msg type BINARY length 2
		
		/* Sumatoria importe */
		let tempptra = msg + 6
		if ((@tempptra & 0x0F) == 0x0C) then   	/* Esta apuntando al signo */
			let @tempptra = @tempptra | 0x0F	/* Devuelve signo positivo */
		else
			if ((@tempptra & 0x0F) == 0x0D) then	
				let @tempptra = @tempptra | 0x0D   /* Devuelve importe negativo */
			else
				let @tempptra = @tempptra | 0x0F	/* Devuelve signo positivo */
			endif 
		endif
		comm get string_info			from msg type ZPD length 7
		move string_info to RCVEimporte[ indice ]
		let RCVEimporte[ indice ] = RCVEimporte [ indice ] / 100 	/* Divido el saldo por 100 para recuperar los decimales */

	
		/* Busco la descripcion de la transaccion */
		call gali:MISCbusco_descrip
		
		fprint info_pantalla[ indice ] \
		"%-40.40s      %-5.5s                  %-14.14s" \
					common:csr_string \
					RCVEcant_transac[ indice ] \
					RCVEimporte[ indice ]
		let gali:indice = gali:indice + 1
	loop
	
	/* Hace el refresh de la pantalla con los totales que recibio de HOST */
	call gali:MISCrefr_cons_tot
	
	/* Busca mas totales en el buffer o avisa que no hay mas */
	call gali:MISCbusco_transac

	return (0)
END SUB

/*******/
