/****o* Pendientes de agrupación/OFB:gali:PINPADleer_pin
* NOMBRE
*   OFB:gali:PINPADleer_pin
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "galipinpad.h"

SUB gali:PINPADleer_pin
    LOCAL COMANDO LIKE drv:dis_info_work  		/* comando para el PINPAD */
	LOCAL RESPUESTA LIKE common:csr_string 	/* respuesta del PINPAD */
	LOCAL eodbytes LIKE drv:dis_info_work		/* marca de fin de la resp. */

    /* Verifico de que marca de PINpad se trata */
	CALL csr:get_profile_string("pinpad","marca",post:pinpad)
    IF (post:pinpad == "ingenico") THEN
        CALL gali:PINPADleer_pin_i
        RETURN (RETVAL)
    END IF

	/* Preparacion del PORT */
	IF (CURRENTFIELD.NUMCHARS > 0 && CURRENTFIELD != 0) THEN
	    RETURN 0
	END IF
	CALL gali:PINPADabrir_port
	IF (RETVAL < 0) THEN
		CALL gali:PINPADcerrar_port
		RETURN (0)
	END IF
	CALL gali:PINPADsetear_port
	IF (RETVAL < 0) THEN
		CALL gali:PINPADcerrar_port
		RETURN (0)
	END IF

	DO
		/* Salida del DO-LOOP y del OFB */
		IF ((gali:clave.NUMCHARS > 0 && \
		        gali:clave != 0) || lastkey == RT_ESC) then
			CALL gali:PINPADcerrar_port
			IF ( lastkey != RT_ESC) THEN
				FYIMSG LST:common:fyimsg_list, \
				"La clave ha sido ingresada"
			END IF
			RETURN 0
		END IF

		/* Preparacion del mensaje para el PINPAD */
		CALL CSR:wingsp GSP_PURGE fd
		CALL CSR:wingsp GSP_SET_TIMEOUT 15,15,15
		CLEARFIELD eodbytes
		CLEARFIELD COMANDO
		CLEARFIELD RESPUESTA
		MOVE ">" TO eodbytes

		/* Para leer el pin del cliente */
		MOVE "<60#INGRESE SU PIN#>" TO COMANDO
		CALL CSR:wingsp GSP_WRITE COMANDO 20 fd
		CALL CSR:wingsp GSP_READ RESPUESTA 40 eodbytes fd

		CLEARFIELD COMANDO
		CLEARFIELD RESPUESTA
		CALL CSR:wingsp GSP_PURGE fd

		MOVE "<64#4#1#>" TO COMANDO
		CALL CSR:wingsp GSP_WRITE COMANDO 9 fd
		CALL CSR:wingsp GSP_READ RESPUESTA 10 eodbytes fd

		NAP 500
		IF (substr(RESPUESTA,1,2) != "65" || \
		     substr(RESPUESTA,4,1) == "#" ) THEN
			IF (RETVAL == GSPERR_TIMEOUT || \
			      RETVAL == GSPERR_RESET) THEN
				CALL gali:PINPADreset
				NAP 900
			END IF

			;keydef pop
			;let common:trap_reset = OFB:drv:KEYSreset_esc

			CALL gali:PINPADerror_prompt
			STACK common:trap_reset pop
			FYIMSG LST:common:fyimsg_list, \
			"OPERACION CANCELADA: <ESC> Terminar <ESPACIO> Reintentar"
			GETKEY

			;keydef push

			STACK common:trap_reset push
			LET common:trap_reset = OFB:plataf:KEYdisable_esc
		ELSE
			CALL gali:PINPADok_prompt
			LET clave = substr(RESPUESTA,4,4)
			REFRESH gali:clave
			NAP 900
		END IF
		CALL gali:PINPADclear_prompt
	LOOP
END SUB

/*******/
