/****o* Pendientes de agrupación/OFB:post:sap_valida_postal
* NOMBRE
*   OFB:post:sap_valida_postal
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postofb.ofb.h"

SUB post:sap_valida_postal
/*
//////////////////////////////////////////////////////////////////////
/// VALIDACION EN SAP DEL PRODUCTO EN SESION DE CUENTAS CORRIENTES ///
//////////////////////////////////////////////////////////////////////

local varl_producto	like common:csr_string
local varl_idx		like siaf:i
local varl_destino	like post:destino
local varl_aux1		like siaf:i
local varl_aux2		like siaf:i
local varl_hasta_eq	like post:destino

// por si las moscas...
let post:sap_prod_franq = "N"

// solo realizare las validaciones cuando hay conexion contra SAP
if (estado_conexion_sap != SAP_ON) then
   return
end if

// armo la tarifa hasta equivalente para que sea aceptada por SAP
let varl_idx = 0
fprint varl_hasta_eq "%s" post:adt_tarif_hasta_eq
call csr:str_search(varl_hasta_eq,",",varl_idx)
if (varl_idx > 0) then
   let varl_aux1 = substr(varl_hasta_eq,0,varl_idx) // tomo parte entera
   let varl_idx = varl_idx + 1
   let varl_aux2 = substr(varl_hasta_eq,varl_idx,3) // tomo decimales
   if (varl_aux2 > 0) then
       // la parte decimal va sin ceros a derecha
       if (varl_aux2 % 100 == 0) then
          // saco los ceros a derecha del decimal
          let varl_aux2 = varl_aux2 / 100
          fprint varl_hasta_eq "%d.%d" varl_aux1,varl_aux2
       elseif (varl_aux2 % 10 == 0) then
          // saco el cero a derecha del decimal
          let varl_aux2 = varl_aux2 / 10
          fprint varl_hasta_eq "%d.%d" varl_aux1,varl_aux2
       else
          // no saco nada.
          fprint varl_hasta_eq "%d.%d" varl_aux1,varl_aux2
       end if
   else
       fprint varl_hasta_eq "%d" varl_aux1
   end if
end if
call csr:trimfield(varl_hasta_eq)

// Primero tengo que armar el codigo de producto para SAP:
// codigo_transaccion + destino + rango hasta + unidad medida + opcional 
// (si el opcional tiene el atributo de combina en S).
call csr:trimfield(post:destino,varl_destino)
fprint varl_producto "%d%s%s%s" siaf:codigo_siaf \
                                varl_destino \
                                varl_hasta_eq \
                                post:adt_tarif_um_eq

// si se seleccionaron opcionales, tengo que ver si combinan o no
let varl_idx = 0
while (cod_opc[varl_idx].NUMCHARS > 0 && varl_idx < 8) 
    if (comb_opc[varl_idx] == "S") then
        // como combina, pasa a ser parte del codigo de producto
        fprint varl_producto "%s%s" varl_producto cod_opc[varl_idx]
    end if
    let varl_idx = varl_idx + 1
end while
// NOTA: los opcionales que no combinan tendrian que haber sido validados en el 
//       momento de su seleccion...

// a esta altura tengo todos los datos del codigo de producto, asi que ejecuto 
// la validacion contra SAP
call csr:SAPval_produ(handle_sap,CliClasPed,ClsuCod,common:br_CEC, \
                      varl_producto,CliCod,sap_error_cod,sap_error_type,\
                      sap_error_desc,sap_prod_franq,sap_time_out)
if (retval != 0) then
    if (retval == ERRSAP_TIMEOUT) then
        call sap_logon
        return (-2)
    end if
    errmsg common:errmsg_list,"Error de Ejecucion csr:SAPval_produ"
    return (-2)
end if
    
// veo si devolvio algun error el SAP
if (sap_error_cod > 0) then
    call sap_error_manager(sap_error_cod,sap_error_type,sap_error_desc)
    if (retval < 0) then
        return (-2)
    end if
end if

// si llego hasta aca, es porque el producto parece ser valido... asi que
// me falta nomas saber si lo tengo que franquear o no.
// Si ( Cliente Franqueable && Producto Franqueable ) entonces 
//     el operador debe confirmar => pregunto
// sino 
//     el producto no es franqueable
// finsi
if (CliFranqueo == "S" && sap_prod_franq == "S") then
	
	//CSZ - Comentado porque se pidio que el franqueo sea automaticamente rechazado
	//por el sistem, sin consultarlo con el operador.
    
    //msgbox "FRANQUEA EL PRODUCTO?",OFB_YESNO,"Confirmacion de Franqueo"
    //if (retval == OFB_IDNO) then
    //    let sap_prod_franq = "R" //  R = Rechazado por operador
    //end if
	
    let sap_prod_franq = "R" //  R = Rechazado por sistema
else
    let sap_prod_franq = "N"
end if
*/
END SUB

/*******/
