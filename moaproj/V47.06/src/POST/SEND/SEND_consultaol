/****o* Pendientes de agrupación/OFB:post:SEND_consultaol
* NOMBRE
*   OFB:post:SEND_consultaol
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postSEND.h"

SUB post:SEND_consultaol
	local l_str_tmp like common:csr_string
	local sclave like common:csr_string
	local key like common:csr_string
	local l_espacios like post:checkeo
	local l_str like common:csr_string
    local l_mensaje like fieldRespuestaBULK
	local l_principio like siaf:i
	l_principio = 0
PRINCIPIO:
    
    clearfield common:csr_string

	hcomm:CodTran = post:adt_tran_sf1_codigo
	hcomm:TranVersion = post:adt_tran_sf1_ver
	hcomm:orig_line_status = "S"
	
	if ((hcomm:tran_status != 3) && (!testflag(common:rt_flags,reentry_active))) then
		; PAW 28.05.2003 - Para el ruteo...
   		l_str_tmp = 0x9999
   		COMM PUT  l_str_tmp msg type BINARY length 2
   		tlr:jnl_date = common:system_date
   		tlr:jnl_time = common:time_of_day

		tlr:jnl_sequence = "0000"

		call hcomm:SENDheaderV105

		; PAW 28.05.2003 - concateno, relleno, encripto y mando.
		common:csr_string = ""
		/* Utility */
		if (adt_tran_sf1_ver == 1) then
			call MISCconcatenar(post:sf1_utility_tmp, 8, "0")
		else 
			// FGB 11.01.2006: la utility ahora se manda desencriptada... (versión 2)
			COMM  PUT post:sf1_utility_tmp TO MSG TYPE ASCII LENGTH 8 JUSTRIGHT FILL 0
		endif
		/* Cliente */
		call MISCconcatenar(post:codigo_cliente, 21, "0")
		/* TBC Codigo alternativo 28-06-2002*/
		call MISCconcatenar(post:identif_secun, 30, " ")

		; PAW 18.06.2003 - Encripto el viaje: semilla para el encriptado
		fprint sclave "%04s%06s%04s%02s%02s%02s%02s%02s",\
			tlr:jnl_sequence,\
			op:op_operator_id, \
			substr(tlr:jnl_date,0,4), \
			substr(tlr:jnl_time,0,2), \
			substr(tlr:jnl_date,4,2), \
			substr(tlr:jnl_time,2,2), \
			substr(tlr:jnl_date,6,2), \
			substr(tlr:jnl_time,4,2)


		DLL _BfJ_creaClave( sclave key )
		DLL _BfJ_inicia( key )
		DLL _BfJ_tamanioRequerido( common:csr_string )
		siaf:i = retval
		;DLL _BfJ_padded8( common:csr_string ,siaf:i)
		dprint "\n\n ENCRIPTO: %s \n\n" common:csr_string
		l_espacios = siaf:i * -1
		fprint common:csr_string "%*.*s", l_espacios, siaf:i, common:csr_string
        
        if (l_principio == 0) then
	        COMM SETRESOURCE hcomm:host1 INIT_SEND
	        COMM  PUT common:csr_string TO msg TYPE ASCII LENGTH siaf:i
	        COMM GET l_mensaje from msgbegin type BULK length siaf:i
	        COMM SETRESOURCE hcomm:host1 INIT_SEND
	        l_principio = l_principio + 1
	        GOTO PRINCIPIO
	    end if
	    ;Modificaciones para el RTjava
	    DLL _BfJ_encripta(l_mensaje,l_mensaje,siaf:i )
        COMM  PUT l_mensaje TO MSG TYPE BULK LENGTH siaf:i
        		
	    ;DLL _BfJ_encripta(common:csr_string,common:csr_string,siaf:i )
	    ;COMM  PUT common:csr_string TO MSG TYPE ASCII LENGTH siaf:i
		common:csr_string = l_str_tmp
		DLL _BfJ_fin()
	endif

END SUB

/*******/
