/****o* Mensajeria/OFB:post:RCVEdefaultUP
* NOMBRE
*   OFB:post:RCVEdefaultUP
* DESCRIPCION
*   Rutina que recibe los datos del cheque de la consulta al HOST de Cheque Recibido y Reemplazado()
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:RCVEhdr_up
* DOCUMENTACION
*    http://jira.sibs.net/jira/browse/AUT-520
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEdefaultUP
	local l_bin_mensaje	like siaf:doc_ptmo   
	local l_long		like siaf:idx                                         
	
 	clearfield post:FlagsUP
    ; Aca recibo los 'x0312.
    comm get common:csr_string 	from msg type ASCII length 2
	; Recibo el bitmap primario.
	; Voy verificando los bits del flag.
	; 1er byte bits 1 - 8.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x80) == 0x80)
    	setflag post:FlagsUP,b001Secondary
    Endif
    if ((tes:idx & 0x40) == 0x40)
    	setflag post:FlagsUP,b002PAN
    Endif
    if ((tes:idx & 0x20) == 0x20)
    	setflag post:FlagsUP,b003CodProc
    Endif
    //Para UP = Monto del cheque 
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:FlagsUP,b004montoChk
    Endif    
    //Para UP = Saldo disponible
    if ((tes:idx & 0x04) == 0x04)
    	setflag post:FlagsUP,b006saldoDisp
    Endif    
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:FlagsUP,b007FechaHora
    Endif


	; 2do byte bits 9 - 16.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x20) == 0x20)
    	setflag post:FlagsUP,b011STAN
    Endif
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:FlagsUP,b012LocalTime
    Endif
    if ((tes:idx & 0x08) == 0x08)
    	setflag post:FlagsUP,b013LocalDate
    Endif
    //Para UP = Interes sobre el cheque
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:FlagsUP,b015interes
    Endif        

	; 3er byte bits 17 - 24.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x01) == 0x01)
    	setflag post:FlagsUP,b024Adquiriente
    Endif        

	; 4to byte bits 25 - 32.
    comm get tes:idx from msg type BINARY length 1
    //Para UP = Provincia de la sucursal
    if ((tes:idx & 0x80) == 0x80)
    	setflag post:FlagsUP,b025prov
    Endif    
    //Para UP = Identificacion de Excepcion
    if ((tes:idx & 0x40) == 0x40)
    	setflag post:FlagsUP,b026excepcion
    Endif    
    //Para UP = Iva del Interes
    if ((tes:idx & 0x20) == 0x20)
    	setflag post:FlagsUP,b027ivaInteres
    Endif    
    //Para UP = Nis que recibe cheque rechazado
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:FlagsUP,b028NISchkRech
    Endif                
    
    
    if ((tes:idx & 0x08) == 0x08)
    	setflag post:FlagsUP,b029MarcaConsulta
    Endif                    
    
    
    //Para UP = Codigo de UP
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:FlagsUP,b031Cliente
    Endif

	
	; 5to byte bits 33 - 40.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:FlagsUP,b039CodRespuesta
    Endif

	; 6to byte bits 41 - 48.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x80) == 0x80)
    	setflag post:FlagsUP,b041Terminal
    Endif
	if ((tes:idx & 0x10) == 0x10) then
		setflag post:FlagsUP,b044CodAdicional
	endif
	
	; 7mo byte bits 49 - 56.
    comm get tes:idx from msg type BINARY length 1

	; 8vo byte bits 57 - 64.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:FlagsUP,b060NombreTerm
    Endif

	; ************ Fin Primary Bitmap **************

	; Los bits 65 a 128 se usan solo si el primer bit estaba prendido.
	if (TESTFLAG(post:FlagsUP, b001Secondary))
		; 9no byte bits 65 - 72.
	    comm get tes:idx from msg type BINARY length 1

		; 10mo byte bits 73 - 80.
	    comm get tes:idx from msg type BINARY length 1

		; 11vo byte bits 81 - 88.
	    comm get tes:idx from msg type BINARY length 1

		; 12vo byte bits 89 - 96.
	    comm get tes:idx from msg type BINARY length 1

		; 13vo byte bits 97 - 104.
	    comm get tes:idx from msg type BINARY length 1

		; 14vo byte bits 105 - 112.
	    comm get tes:idx from msg type BINARY length 1
	    if ((tes:idx & 0x80) == 0x80)
	    	setflag post:FlagsUP,b105DatosRepet
	    Endif
	    if ((tes:idx & 0x40) == 0x40)
	    	setflag post:FlagsUP,b106DatosRepet
	    Endif
	    if ((tes:idx & 0x20) == 0x20)
	    	setflag post:FlagsUP,b107DatosRepet
	    Endif

		; 15vo byte bits 113 - 120.
	    comm get tes:idx from msg type BINARY length 1
	    if ((tes:idx & 0x08) == 0x08)
	    	setflag post:FlagsUP,b117Firma
	    Endif	    
    	//Para UP = Datos grales del cheque
    	if ((tes:idx & 0x04) == 0x04)
    		setflag post:FlagsUP,b118datosChk
    	Endif    
    	//Para UP = Datos grales del cheque nuevo
    		if ((tes:idx & 0x02) == 0x02)
    		setflag post:FlagsUP,b119datosChkNuevo
    	Endif        	
		; 16vo byte bits 121 - 128.
	    comm get tes:idx from msg type BINARY length 1
	endif

	; ahora voy a tomar los datos de cada bit. (los que no necesito los pierdo, si
	; alguien los llega a necesitar, los tiene que reservar antes de ser pisados).


	COMM GET common:csr_string msg type BINARY length 1
	; Voy verificando los bits del flag.
	if (TESTFLAG(post:FlagsUP, b002PAN))
		;COMM GET common:csr_string msg type BINARY length 2
		;COMM GET common:csr_string msg type BINARY length 4
		COMM GET l_bin_mensaje msg type BINARY length 6
		// armo una rutina para convertir el número en hexa, porque el maldito fprint "%x"
		// no me lo toma... no sé, quizá no soporte números grandes?
		call dec_2_hex(l_bin_mensaje,MsgBIN_comm)
	endif
	if (TESTFLAG(post:FlagsUP, b003CodProc))
		COMM GET common:csr_string msg type BCD length 3
	endif
	//Para UP = Monto cheque
	if (TESTFLAG(post:FlagsUP, b004montoChk))
		COMM GET common:csr_string msg type BCD length 6
		giros:Importe_comm = common:csr_string
		Imp_chk_dif = common:csr_string		
		Imp_chk_dif = Imp_chk_dif / 100
	endif	
	//Para UP = Saldo disponible
	if (TESTFLAG(post:FlagsUP, b006saldoDisp))
		COMM GET common:csr_string msg type BCD length 6
		//giros:tarifa_msg_comm = common:csr_string
		/*MFM (14.03.2002) No mostraba decimales*/
		limite_up = common:csr_string
		limite_up = limite_up / 100
	endif		
	if (TESTFLAG(post:FlagsUP, b007FechaHora))
		COMM GET common:csr_string msg type BCD length 5
	endif
	if (TESTFLAG(post:FlagsUP, b011STAN))
		COMM GET common:csr_string msg type BCD length 3
		giros:stan_comm = common:csr_string
	endif
	if (TESTFLAG(post:FlagsUP, b012LocalTime))
		COMM GET common:csr_string msg type BCD length 3
		giros:hora_trx_comm = common:csr_string
	endif
	if (TESTFLAG(post:FlagsUP, b013LocalDate))
		COMM GET common:csr_string msg type BCD length 2
		giros:fecha_trx_comm = common:csr_string
	endif
	//Para UP = Interes del cheque
	if (TESTFLAG(post:FlagsUP, b015interes))
		COMM GET common:csr_string msg type BCD length 6
		post:jnl_interes_diferido = common:csr_string
		post:jnl_interes_diferido = post:jnl_interes_diferido / 100
	endif	

	if (TESTFLAG(post:FlagsUP, b024Adquiriente))
		COMM GET common:csr_string msg type BCD length 2
	endif		

	//Para UP = Provincia de la sucursal
	if (TESTFLAG(post:FlagsUP, b025prov))
		COMM GET common:csr_string msg type ASCII length 1
		giros:Provincia_comm = common:csr_string
	endif	
	//Para UP = Identificacion de Excepcion
	if (TESTFLAG(post:FlagsUP, b026excepcion))
		COMM GET common:csr_string msg type BCD length 5
		id_excep_comm = common:csr_string
	endif	
	//Para UP = Iva del Interes
	if (TESTFLAG(post:FlagsUP, b027ivaInteres))
		COMM GET common:csr_string msg type BCD length 6
		post:iva_Porcentaje = common:csr_string
		post:iva_Porcentaje = post:iva_Porcentaje / 100
	endif	
	//Para UP = Nis que recibe cheque rechazado
	if (TESTFLAG(post:FlagsUP, b028NISchkRech))
		COMM GET common:csr_string msg type ASCII length 5
		giros:Sucursal_comm = common:csr_string
	endif						
	
	
	if (TESTFLAG(post:FlagsUP, b029MarcaConsulta))
		COMM GET common:csr_string msg type ASCII length 1
		MarcaCons_comm = common:csr_string
	endif					
	
	if (TESTFLAG(post:FlagsUP, b031Cliente))
		COMM GET common:csr_string msg type ASCII length 12
		Cliente_comm = common:csr_string
	endif
	
	
	if (TESTFLAG(post:FlagsUP, b039CodRespuesta))
	  comm get common:csr_string msg type ASCII length 2
	    giros:CodRespuesta_comm = common:csr_string
	endif
		
	if (TESTFLAG(post:FlagsUP, b041Terminal))
		COMM GET common:csr_string msg type ASCII LENGTH 8
	endif
	
	if (testflag(post:FlagsUP,b044CodAdicional)) then
		// tomo el codigo de respuesta adicional
		comm get l_long msg type BINARY length 1
		l_long = ((l_long + 1) / 2)
		comm get common:csr_string msg type BINARY length l_long
		fprint post:CodRespAdic_comm "%02.2x" common:csr_string
	endif
	
	if (TESTFLAG(post:FlagsUP, b060NombreTerm))
		comm get common:csr_string from msg type BCD Length 2
		COMM GET common:csr_string msg type ASCII length 24
		node_comm = common:csr_string
	endif

	if (TESTFLAG(post:FlagsUP, b001Secondary))
		if (TESTFLAG(post:FlagsUP, b105DatosRepet))
	        COMM GET Longitud_105 MSG TYPE BCD LENGTH 2 //Longitud del mensaje
    	    COMM GET cantRegBulk msg type ASCII LENGTH 3 //cantidad de registros que entraron para los bits 105, 106 y 107
			Longitud_105 = Longitud_105 - 3
			COMM GET BulkFld_105 MSG TYPE ASCII LENGTH Longitud_105
		endif
		if (TESTFLAG(post:FlagsUP, b106DatosRepet))
    	    COMM GET Longitud_106 MSG TYPE BCD LENGTH 2
   			COMM GET BulkFld_106 MSG TYPE ASCII LENGTH Longitud_106
		endif
		if (TESTFLAG(post:FlagsUP, b107DatosRepet))
        	COMM GET Longitud_107 MSG TYPE BCD LENGTH 2
			COMM GET BulkFld_107 MSG TYPE ASCII LENGTH Longitud_107
		endif
		if (TESTFLAG(post:FlagsUP, b117Firma))
            COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
			COMM GET common:csr_string msg type ASCII length giros:Longitud
			//Firma que devuelve el switch (210)
			giros:Firma_comm = common:csr_string
		endif
	
		if (TESTFLAG(post:FlagsUP, b118datosChk))
			COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
			COMM GET common:csr_string msg type ASCII length giros:Longitud
			giros:fechaEmi_comm = SUBSTR(common:csr_string,8,8)
			fecha_vto = SUBSTR(common:csr_string,16,8)
			//50295
			post:cheq_lista_giro =	SUBSTR(common:csr_string,52,1) //G =lista de giros
			post:nro_recibo = SUBSTR(common:csr_string,60,12) //Nro de recibo de adelanto
			
		end if
	endif
END SUB

/*******/
