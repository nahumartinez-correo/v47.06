/****o* Consulta TrackAndTrace/OFB:post:RCVEhdr_tyt
* NOMBRE
*   OFB:post:RCVEhdr_tyt
* DESCRIPCION
*   Rutina generica de Receive de mensajes de Consulta TrackAndTrace. Se van seteando los flags segun los bits que 
*	  vienen con datos y luego se realiza el comget para recuperar los valores.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:RCVEconsulta_tyt
* DOCUMENTACION
*   NI50606 - Imagen en Guarda
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEhdr_tyt
	LOCAL l_bin_mensaje	LIKE siaf:doc_ptmo
	LOCAL l_long LIKE siaf:idx
	
	post:flags_mensaje = 0
	post:flags_mensaje_adic = 0
	
	CALL csr:proc_list(F_CLEAR,LST:LISTcomunic_tyt)
	
	COMM GET common:csr_string FROM MSG TYPE ASCII LENGTH 2

	;Primary BitMap    (campos del 02 al 064)
	;Bits 01-08
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x80) == 0x80) THEN
		SETFLAG post:flags_mensaje,b001
	END IF
	IF ((tes:idx & 0x40) == 0x40) THEN
		SETFLAG post:flags_mensaje,b002
	END IF
	IF ((tes:idx & 0x20) == 0x20) THEN
		SETFLAG post:flags_mensaje,b003
	END IF
	IF ((tes:idx & 0x02) == 0x02) THEN
		SETFLAG post:flags_mensaje,b007
	END IF

	;Bits 08-16
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x20) == 0x20) THEN
		SETFLAG post:flags_mensaje,b011
	END IF
	IF ((tes:idx & 0x10) == 0x10) THEN
		SETFLAG post:flags_mensaje,b012
	END IF
	IF ((tes:idx & 0x08) == 0x08) THEN
		SETFLAG post:flags_mensaje,b013
	END IF
    	
	;Bits 16-24
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x01) == 0x01)
		SETFLAG post:flags_mensaje,b024
	END IF

	;Bits 24-32
  COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
    	
	;Bits 32-40
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x08) == 0x08) THEN
		SETFLAG post:flags_mensaje_adic,b037
	END IF
	IF ((tes:idx & 0x02) == 0x02) THEN
		SETFLAG post:flags_mensaje,b039
	END IF

	;Bits 40-48
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x80) == 0x80) THEN
		SETFLAG post:flags_mensaje,b041
	END IF
	IF ((tes:idx & 0x10) == 0x10) THEN
		SETFLAG post:flags_mensaje,b044
	END IF

	;Bits 48-56
  COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1

	;Bits 56-64
	COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	IF ((tes:idx & 0x10) == 0x10) THEN
		SETFLAG post:flags_mensaje,b060
	END IF

	IF (TESTFLAG(post:flags_mensaje,b001)) THEN
		;Secondary BitMap  (campos del 65 al 128)

		;Bits 064-072
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1

		;Bits 072-080
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	
		;Bits 080-088
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	
		;Bits 088-096
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1

		;Bits 096-104
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	
		;Bits 104-112
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1

  	IF ((tes:idx & 0x80) == 0x80) THEN
  		SETFLAG post:flags_mensaje,b105
  	END IF
  	IF ((tes:idx & 0x40) == 0x40) THEN
  		SETFLAG post:flags_mensaje,b106
  	END IF
  	IF ((tes:idx & 0x20) == 0x20) THEN
  		SETFLAG post:flags_mensaje,b107
  	END IF
  	IF ((tes:idx & 0x10) == 0x10) THEN
  		SETFLAG post:flags_mensaje,b108
  	END IF
  	IF ((tes:idx & 0x08) == 0x08) THEN
  		SETFLAG post:flags_mensaje,b109
  	END IF
		
		;Bits 112-120
		COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
  	IF ((tes:idx & 0x08) == 0x08) THEN
  		SETFLAG post:flags_mensaje,b117
  	END IF
 	
		;Bits 120-128
    COMM GET tes:idx FROM MSG TYPE BINARY LENGTH 1
	END IF

	COMM GET common:csr_string MSG TYPE BINARY LENGTH 1
	IF (TESTFLAG(post:flags_mensaje,b002)) THEN
		;COMM GET common:csr_string MSG TYPE BINARY LENGTH 6
		COMM GET l_bin_mensaje MSG TYPE BINARY LENGTH 6
		// armo una rutina para convertir el número en hexa, porque el maldito fprint "%x"
		// no me lo toma... no sé, quizá no soporte números grandes?
		CALL dec_2_hex(l_bin_mensaje,MsgBIN_comm)
	END IF

	IF (TESTFLAG(post:flags_mensaje,b003)) THEN
		COMM GET common:csr_string MSG TYPE BCD LENGTH 3
	END IF

	IF (TESTFLAG(post:flags_mensaje,b007)) THEN
		COMM GET common:csr_string MSG TYPE BCD LENGTH 5
	END IF

	IF (TESTFLAG(post:flags_mensaje,b011)) THEN
		COMM GET common:csr_string MSG TYPE BCD LENGTH 3
		giros:stan_comm = common:csr_string
	END IF

	IF (TESTFLAG(post:flags_mensaje,b012)) THEN
		COMM GET common:csr_string MSG TYPE BCD LENGTH 3
		giros:hora_trx_comm = common:csr_string
	END IF

	IF (TESTFLAG(post:flags_mensaje,b013)) THEN
		COMM GET common:csr_string MSG TYPE BCD LENGTH 2
		giros:fecha_trx_comm = common:csr_string
	END IF

	IF (TESTFLAG(post:flags_mensaje,b024)) THEN
		comm get common:csr_string MSG TYPE BCD LENGTH 2
	END IF

	if (testflag(post:flags_mensaje_adic,b037)) THEN
		COMM GET common:csr_string MSG TYPE ASCII LENGTH 12
		post:RefNum_comm = common:csr_string
		call csr:trimfield (post:RefNum_comm)
	END IF
	
	IF (TESTFLAG(post:flags_mensaje,b039)) THEN
		COMM GET common:csr_string MSG TYPE ASCII LENGTH 2
		giros:CodRespuesta_comm = common:csr_string
	END IF

  IF (TESTFLAG(post:flags_mensaje,b041)) THEN
    COMM GET common:csr_string MSG TYPE ASCII LENGTH 8
	END IF
	
	IF (giros:CodRespuesta_comm != "00" && giros:CodRespuesta_comm != "70") THEN
		CALL post:MISCmsg_error_tyt(giros:CodRespuesta_comm)
		lib:err_retval = RETVAL
		
		MSGBOX  common:csr_string_130 ,OFB_OK ,"Error"
		
		RESETFLAG tlr:controla_firma,cancelacion
		LET hcomm:tran_status = HOST_REJECTED
		LET MSG = MSGEND  			    
	ELSE
		hcomm:tran_status = HOST_ACCEPTED
	END IF
	
	IF (TESTFLAG(post:flags_mensaje,b044)) THEN
		COMM GET common:csr_string MSG TYPE BINARY LENGTH 2
	END IF
    
	IF (TESTFLAG(post:flags_mensaje,b060)) THEN
		COMM GET common:csr_string FROM MSG TYPE BCD LENGTH 2
		COMM GET common:csr_string MSG TYPE ASCII LENGTH 24
		node_comm = common:csr_string
	END IF

	IF (TESTFLAG(post:flags_mensaje,b001)) THEN

		IF (TESTFLAG(post:flags_mensaje,b105)) THEN
			COMM GET Longitud_105 MSG TYPE BCD LENGTH 2
			COMM GET cantRegBulk MSG TYPE ASCII LENGTH 3
			Longitud_105 = Longitud_105 - 3
			comm get BulkFld_105 MSG TYPE ASCII LENGTH Longitud_105
		END IF

		IF (TESTFLAG(post:flags_mensaje,b106)) THEN
			COMM GET Longitud_106 MSG TYPE BCD LENGTH 2
			COMM GET BulkFld_106 MSG TYPE ASCII LENGTH Longitud_106
		END IF

		IF (TESTFLAG(post:flags_mensaje,b107)) THEN
			COMM GET Longitud_107 MSG TYPE BCD LENGTH 2
			COMM GET BulkFld_107 MSG TYPE ASCII LENGTH Longitud_107
		END IF

		IF (TESTFLAG(post:flags_mensaje,b108)) THEN
			COMM GET Longitud_108 MSG TYPE BCD LENGTH 2
			COMM GET BulkFld_108 MSG TYPE ASCII LENGTH Longitud_108
		END IF
	
		IF (TESTFLAG(post:flags_mensaje,b109)) THEN
			COMM GET Longitud_109 MSG TYPE BCD LENGTH 2
			;IF (Longitud_109 > 0) THEN
				COMM GET BulkFld_109 MSG TYPE ASCII LENGTH Longitud_109
			;END IF
		END IF

		IF (TESTFLAG(post:flags_mensaje,b117)) THEN
			COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
			COMM GET common:csr_string MSG TYPE ASCII LENGTH giros:Longitud
			giros:Firma_comm = common:csr_string
		END IF
	
	END IF

END SUB

/*******/
