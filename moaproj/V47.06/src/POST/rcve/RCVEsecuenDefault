/****o* Pendientes de agrupación/OFB:post:RCVEsecuenDefault
* NOMBRE
*   OFB:post:RCVEsecuenDefault
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEsecuenDefault
    let hcomm:tran_status = HOST_ACCEPTED
	clearfield post:secuenFlags
    ; Aca recibo los 'x0312.
    comm get common:csr_string 	from msg type ASCII length 2
	; Recibo el bitmap primario.
	; Voy verificando los bits del flag.
	; 1er byte bits 1 - 8.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x80) == 0x80)
    	setflag post:secuenFlags,b001Secondary
    Endif
    if ((tes:idx & 0x40) == 0x40)
    	setflag post:secuenFlags,b002PAN
    Endif
    if ((tes:idx & 0x20) == 0x20)
    	setflag post:secuenFlags,b003CodProc
    Endif
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:secuenFlags,b007FechaHora
    Endif


	; 2do byte bits 9 - 16.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x20) == 0x20)
    	setflag post:secuenFlags,b011STAN
    Endif
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:secuenFlags,b012LocalTime
    Endif
    if ((tes:idx & 0x08) == 0x08)
    	setflag post:secuenFlags,b013LocalDate
    Endif

	; 3er byte bits 17 - 24.
    comm get tes:idx from msg type BINARY length 1

	; 4to byte bits 25 - 32.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x04) == 0x04)
    	setflag post:secuenFlags,b030NIS
    Endif

	; 5to byte bits 33 - 40.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x02) == 0x02)
    	setflag post:secuenFlags,b039CodRespuesta
    Endif

	; 6to byte bits 41 - 48.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x80) == 0x80)
    	setflag post:secuenFlags,b041Terminal
    Endif

	; 7mo byte bits 49 - 56.
    comm get tes:idx from msg type BINARY length 1

	; 8vo byte bits 57 - 64.
    comm get tes:idx from msg type BINARY length 1
    if ((tes:idx & 0x10) == 0x10)
    	setflag post:secuenFlags,b060NombreTerm
    Endif

	; ************ Fin Primary Bitmap **************

	; Los bits 65 a 128 se usan solo si el primer bit estaba prendido.
	if (TESTFLAG(post:secuenFlags, b001Secondary))
		; 9no byte bits 65 - 72.
	    comm get tes:idx from msg type BINARY length 1

		; 10mo byte bits 73 - 80.
	    comm get tes:idx from msg type BINARY length 1

		; 11vo byte bits 81 - 88.
	    comm get tes:idx from msg type BINARY length 1

		; 12vo byte bits 89 - 96.
	    comm get tes:idx from msg type BINARY length 1

		; 13vo byte bits 97 - 104.
	    comm get tes:idx from msg type BINARY length 1

		; 14vo byte bits 105 - 112.
	    comm get tes:idx from msg type BINARY length 1
	    if ((tes:idx & 0x80) == 0x80)
	    	setflag post:secuenFlags,b105DatosRepet
	    Endif
	    if ((tes:idx & 0x40) == 0x40)
	    	setflag post:secuenFlags,b106DatosRepet
	    Endif
	    if ((tes:idx & 0x20) == 0x20)
	    	setflag post:secuenFlags,b107DatosRepet
	    Endif
	    if ((tes:idx & 0x10) == 0x10)
	    	setflag post:secuenFlags,b108Firma
	    Endif
		; 15vo byte bits 113 - 120.
	    comm get tes:idx from msg type BINARY length 1

		; 16vo byte bits 121 - 128.
	    comm get tes:idx from msg type BINARY length 1
	endif

	; ahora voy a tomar los datos de cada bit. (los que no necesito los pierdo, si
	; alguien los llega a necesitar, los tiene que reservar antes de ser pisados).

	COMM GET common:csr_string msg type BINARY length 1
	; Voy verificando los bits del flag.
	if (TESTFLAG(post:secuenFlags, b002PAN))
		COMM GET common:csr_string msg type BINARY length 2
		COMM GET common:csr_string msg type BINARY length 4
	endif
	if (TESTFLAG(post:secuenFlags, b003CodProc))
		COMM GET common:csr_string msg type BCD length 3
	endif
	if (TESTFLAG(post:secuenFlags, b007FechaHora))
		COMM GET common:csr_string msg type BCD length 5
	endif
	if (TESTFLAG(post:secuenFlags, b011STAN))
		COMM GET post:adt_codseq_nro msg type BCD length 3
	endif
	if (TESTFLAG(post:secuenFlags, b012LocalTime))
		COMM GET common:csr_string msg type BCD length 3
	endif
	if (TESTFLAG(post:secuenFlags, b013LocalDate))
		COMM GET common:csr_string msg type BCD length 2
	endif
	if (TESTFLAG(post:secuenFlags, b030NIS))
		COMM GET common:csr_string msg type ASCII length 5
	endif
	if (TESTFLAG(post:secuenFlags, b039CodRespuesta))
	  comm get common:csr_string 	from msg type ASCII length 2
	    giros:CodRespuesta_comm = common:csr_string
	endif
	if (TESTFLAG(post:secuenFlags, b041Terminal))
		COMM GET common:csr_string msg type ASCII length 8
	endif
	if (TESTFLAG(post:secuenFlags, b060NombreTerm))
		COMM GET giros:Longitud  msg type BCD LENGTH 2
		COMM GET common:csr_string msg type ASCII length giros:Longitud
	endif

/*	Error reportado por Javier Olondriz y Susana Eppens.
	if (TESTFLAG(post:secuenFlags, b041Terminal))
		COMM GET common:csr_string msg type BCD LENGTH 2
		COMM GET common:csr_string msg type ASCII length 8
	endif
	if (TESTFLAG(post:secuenFlags, b060NombreTerm))
		COMM GET common:csr_string msg type ASCII length 24
	endif*/

	if (TESTFLAG(post:secuenFlags, b001Secondary))
		if (TESTFLAG(post:secuenFlags, b105DatosRepet))
            COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
            COMM GET cantRegBulk msg type ASCII LENGTH 3
    		COMM GET common:csr_string MSG TYPE ASCII LENGTH giros:Longitud
		endif
		if (TESTFLAG(post:secuenFlags, b106DatosRepet))
            COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
   			COMM GET common:csr_string MSG TYPE ASCII LENGTH giros:Longitud
		endif
		if (TESTFLAG(post:secuenFlags, b107DatosRepet))
            COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
   			COMM GET common:csr_string MSG TYPE ASCII LENGTH giros:Longitud
		endif
		if (TESTFLAG(post:secuenFlags, b108Firma))
            COMM GET giros:Longitud MSG TYPE BCD LENGTH 2
			COMM GET common:csr_string msg type ASCII length giros:Longitud
			if (common:csr_string != common:csr_string_171)
			    giros:CodRespuesta_comm = "42" //Firma invalida.
		    Endif
		endif
	endif
END SUB

/*******/
