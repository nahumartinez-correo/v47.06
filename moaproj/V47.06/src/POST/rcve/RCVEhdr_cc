/****o* Mensajería/OFB:post:RCVEhdr_cc
* NOMBRE
*   OFB:post:RCVEhdr_cc
* DESCRIPCION
*   Cabecera de datos del mensaje de recepcion de datos de SAP Clientes Mayoristas
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:RCVEbuscar_prod_sap, OFB:post:RCVEConsulta_PM_sap,OFB:post:RCVEsolic_cobranza
*   OFB:post:RCVEsubcta_multiple,OFB:post:RCVEsubsubcta_mult,OFB:post:RCVEvalida_comp_cc  
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEhdr_cc

	post:flags_mensaje      = 0
	post:flags_mensaje_adic = 0

    
	comm get common:csr_string from msg type ASCII length 2

	;Primary BitMap    (campos del 02 al 064)
	;Bits 01-08
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b001
    	end if
    	if ((tes:idx & 0x40) == 0x40)
    		setflag post:flags_mensaje,b002
 	end if
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b003
    	end if


	;Bits 08-16
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b011
    	end if
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b012
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje,b013
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b015
    	end if    	
    	if ((tes:idx & 0x01) == 0x01)
    		setflag post:flags_mensaje,b016
    	end if    	
    	
	;Bits 17-24
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje_adic,b017
    	end if
    	if ((tes:idx & 0x40) == 0x40)
    		setflag post:flags_mensaje_adic,b018
    	end if    
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje_adic,b019
    	end if    	
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje_adic,b020
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje_adic,b021
    	end if
    	if ((tes:idx & 0x04) == 0x04)
    		setflag post:flags_mensaje_adic,b022
    	end if     	    	
    	
    	
	;Bits 25-32
    	comm get tes:idx from msg type BINARY length 1
    	
	;Bits 32-40
    	comm get tes:idx from msg type BINARY length 1
    	
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b039
    	end if

	;Bits 40-48
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b041
    	end if

	;Bits 48-56
    	comm get tes:idx from msg type BINARY length 1

	;Bits 56-64
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b060
    	end if

	if (testflag(post:flags_mensaje,b001) )
		;Secondary BitMap  (campos del 65 al 128)

		;Bits 064-072
    		comm get tes:idx from msg type BINARY length 1
    		if ((tes:idx & 0x04) == 0x04)
	    		setflag post:flags_mensaje_adic,b070
	    	end if
	    	if ((tes:idx & 0x02) == 0x02)
	    		setflag post:flags_mensaje_adic,b071
	    	end if
	    	if ((tes:idx & 0x01) == 0x01)
	    		setflag post:flags_mensaje_adic,b072
	    	end if

		;Bits 073-080
    		comm get tes:idx from msg type BINARY length 1
		if ((tes:idx & 0x80) == 0x80)
	    		setflag post:flags_mensaje_adic,b073
	    	end if
	    	if ((tes:idx & 0x40) == 0x40)
	    		setflag post:flags_mensaje_adic,b074
	    	end if
	    	if ((tes:idx & 0x20) == 0x20)
	    		setflag post:flags_mensaje_adic,b075
	    	end if
	    	if ((tes:idx & 0x10) == 0x10)
	    		setflag post:flags_mensaje_adic,b076
	    	end if
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje_adic,b077
	    	end if
	    	if ((tes:idx & 0x04) == 0x04)
	    		setflag post:flags_mensaje_adic,b078
	    	end if
	    	if ((tes:idx & 0x02) == 0x02)
	    		setflag post:flags_mensaje_adic,b079
	    	end if
	
		;Bits 080-088
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 088-096
    		comm get tes:idx from msg type BINARY length 1

	    	
		;Bits 096-104
    		comm get tes:idx from msg type BINARY length 1

	    	;Bits 104-112
    		comm get tes:idx from msg type BINARY length 1

	    	if ((tes:idx & 0x80) == 0x80)
	    		setflag post:flags_mensaje,b105
	    	end if
	    	if ((tes:idx & 0x40) == 0x40)
	    		setflag post:flags_mensaje,b106
	    	end if
	    	if ((tes:idx & 0x20) == 0x20)
	    		setflag post:flags_mensaje,b107
	    	end if
	    	
		;Bits 112-120
    		comm get tes:idx from msg type BINARY length 1
		
		if ((tes:idx & 0x10) == 0x10)
	    		setflag post:flags_mensaje_adic,b116
	    	end if
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje,b117
	    	end if
    		
		;Bits 120-128
    		comm get tes:idx from msg type BINARY length 1
	end if

	comm get common:csr_string msg type BINARY length 1
	if (testflag(post:flags_mensaje,b002))
		comm get common:csr_string msg type BINARY length 6
	end if

	if (testflag(post:flags_mensaje,b003))
		comm get common:csr_string msg type BCD length 3
	end if

	if (testflag(post:flags_mensaje,b011))
		comm get common:csr_string msg type BCD length 3
		giros:stan_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b012))
		comm get common:csr_string msg type BCD length 3
		giros:hora_trx_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b013))
		comm get common:csr_string msg type BCD length 2
		giros:fecha_trx_comm = common:csr_string
	end if
	
	if (testflag(post:flags_mensaje,b015))
		comm get common:csr_string msg type ASCII length 10
		
	end if		
	
	if (testflag(post:flags_mensaje,b016))
		comm get common:csr_string msg type ASCII length 4
		
	end if	

	if (testflag(post:flags_mensaje_adic,b017))
		comm get common:csr_string msg type ASCII length 10
		post:CliCod = common:csr_string
	end if
	
	if (testflag(post:flags_mensaje_adic,b018))
		comm get common:csr_string msg type ASCII length 40
		
	end if		
	
	if (testflag(post:flags_mensaje_adic,b019))
		comm get common:csr_string msg type ASCII length 4
		
	end if		
	
	if (testflag(post:flags_mensaje_adic,b020))
		comm get common:csr_string msg type ASCII length 16
		post:CliCuit = common:csr_string
	end if
	
	if (testflag(post:flags_mensaje_adic,b021))
		comm get common:csr_string msg type ASCII length 13
		pedido_vta_bui = common:csr_string
	end if	
	
	if (testflag(post:flags_mensaje_adic,b022))
		comm get common:csr_string msg type ASCII length 3
		//post:CliCod = common:csr_string
	end if		
	
	
	if (testflag(post:flags_mensaje,b039))
	  	comm get common:csr_string msg type ASCII length 2
	    	giros:CodRespuesta_comm = common:csr_string
	end if

	/*if (giros:CodRespuesta_comm != "00" && giros:CodRespuesta_comm != "70" )
       	 	//call post:MISCrechazo_climed
       	 	call post:MISCrechazo_cc
  		lib:err_retval = retval
  		resetflag tlr:controla_firma,cancelacion
          	let hcomm:tran_status = HOST_REJECTED
          	LET MSG = MSGEND  			    
  		if (retval == -3 ) 
 			return -3 //No pudo recuperar una caida mediante proceso batch
		else
			return -1 //No pudo recuperar una caida mediante proceso normal
		end if
	else
		hcomm:tran_status = HOST_ACCEPTED
	end if*/

	if (testflag(post:flags_mensaje,b041))
		comm get common:csr_string msg type ASCII LENGTH 8
	end if

	if (testflag(post:flags_mensaje,b060))
		comm get common:csr_string from msg type BCD Length 2
		comm get common:csr_string msg type ASCII length 24
		node_comm = common:csr_string
	end if
	
	if (testflag(post:flags_mensaje,b001))
	
		if (testflag(post:flags_mensaje_adic,b070))
			comm get common:csr_string msg type ASCII length 35 //common:csr_string
			Destinatario_comm = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b071))
			comm get common:csr_string msg type ASCII length 35 //common:csr_string
			fprint Destinatario_comm, "%s%s",post:Destinatario_comm, common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b072))
			comm get common:csr_string msg type ASCII length 35 //common:csr_string
			post:DomSap_comm = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b073))
			comm get common:csr_string msg type ASCII length 35 //common:csr_string
			post:LocSap_comm = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b074))
			comm get common:csr_string msg type ASCII length 35 //common:csr_string
			post:ProvDsc_comm = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b075))
			comm get common:csr_string msg type ASCII length 10 //common:csr_string
			giros:CodigoPost_comm = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b076))
			comm get common:csr_string msg type ASCII length 1 //common:csr_string
			post:sap_prod_franq = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b077))
			comm get common:csr_string msg type ASCII length 2 //common:csr_string
			if (post:IvaCod.numchars == 0) then
				post:IvaCod = common:csr_string
			endif
		end if
		
		if (testflag(post:flags_mensaje_adic,b078))
			comm get common:csr_string msg type ASCII length 30 //common:csr_string
			post:CliCatFisDsc = common:csr_string
		end if
		
		if (testflag(post:flags_mensaje_adic,b079))
        		comm get Longitud_108 MSG TYPE BCD LENGTH 2
			comm get BulkFld_079 MSG TYPE ASCII LENGTH Longitud_108
		end if
		
		if (testflag(post:flags_mensaje,b105))
	        	comm get Longitud_105 MSG TYPE BCD LENGTH 2
    	    		comm get cantRegBulk msg type ASCII LENGTH 3
			Longitud_105 = Longitud_105 - 3
			comm get BulkFld_105 MSG TYPE ASCII LENGTH Longitud_105
		end if

		if (testflag(post:flags_mensaje,b106))
    	    		comm get Longitud_106 MSG TYPE BCD LENGTH 2
   			comm get BulkFld_106 MSG TYPE ASCII LENGTH Longitud_106
		end if

		if (testflag(post:flags_mensaje,b107))
        		comm get Longitud_107 MSG TYPE BCD LENGTH 2
			comm get BulkFld_107 MSG TYPE ASCII LENGTH Longitud_107
		end if

		if (testflag(post:flags_mensaje_adic,b116))
            		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
			sap_error_cod  = substr(common:csr_string,0,2)
			sap_error_type = substr(common:csr_string,2,1)
                      	sap_error_desc = substr(common:csr_string,3,100)
		end if
		
		if (testflag(post:flags_mensaje,b117))
            		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
			giros:Firma_comm = common:csr_string
		end if
	endif
	
	if (giros:CodRespuesta_comm != "00" && giros:CodRespuesta_comm != "70" )
       	 	//call post:MISCrechazo_climed
       	 	call post:MISCrechazo_cc
  		lib:err_retval = retval
  		resetflag tlr:controla_firma,cancelacion
          	let hcomm:tran_status = HOST_REJECTED
          	/*LET MSG = MSGEND  			    
  		if (retval == -3 ) 
 			return -3 //No pudo recuperar una caida mediante proceso batch
		else
			return  -1 //No pudo recuperar
		end if*/
	else
		hcomm:tran_status = HOST_ACCEPTED
	end if
END SUB

/*******/
