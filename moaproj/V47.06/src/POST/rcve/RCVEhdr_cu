/****o* Caja Unificada/OFB:post:RCVEhdr_cu
* NOMBRE
*   OFB:post:RCVEhdr_cu  
* DESCRIPCION
*   Rutina generica de Receive de mensajes de Caja Unificada. Se van seteando los flags segun los bits que 
*	vienen con datos y luego se realiza el comget para recuperar los valores.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:RCVEconsulta_cu
* DOCUMENTACION
*    http://jira.sibs.net/jira/browse/AUT-1440 
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEhdr_cu
	local l_bin_mensaje	like siaf:doc_ptmo
	local l_long		like siaf:idx
	
	post:flags_mensaje      = 0
	post:flags_mensaje_adic = 0

    call csr:proc_list(F_CLEAR,LST:LISTcomunic_cu)

	comm get common:csr_string from msg type ASCII length 2

	;Primary BitMap    (campos del 02 al 064)
	;Bits 01-08
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b001
    	end if
    	if ((tes:idx & 0x40) == 0x40)
    		setflag post:flags_mensaje,b002
 		end if
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b003
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b007
    	end if

	;Bits 08-16
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b011
    	end if
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b012
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje,b013
    	end if
    	
	;Bits 16-24
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x01) == 0x01)
    		setflag post:flags_mensaje,b024
    	end if

	;Bits 24-32
    	comm get tes:idx from msg type BINARY length 1
    	
	;Bits 32-40
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje_adic,b037
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b039
    	end if

	;Bits 40-48
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b041
    	end if
    	if ((tes:idx & 0x10) == 0x10) 
    		setflag post:flags_mensaje,b044
    	endif

	;Bits 48-56
    	comm get tes:idx from msg type BINARY length 1

	;Bits 56-64
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b060
    	end if

	if (testflag(post:flags_mensaje,b001) )
		;Secondary BitMap  (campos del 65 al 128)

		;Bits 064-072
    		comm get tes:idx from msg type BINARY length 1

		;Bits 072-080
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 080-088
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 088-096
    		comm get tes:idx from msg type BINARY length 1

		;Bits 096-104
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 104-112
    		comm get tes:idx from msg type BINARY length 1

	    	if ((tes:idx & 0x80) == 0x80)
	    		setflag post:flags_mensaje,b105
	    	end if
	    	if ((tes:idx & 0x40) == 0x40)
	    		setflag post:flags_mensaje,b106
	    	end if
	    	if ((tes:idx & 0x20) == 0x20)
	    		setflag post:flags_mensaje,b107
	    	end if
	    	if ((tes:idx & 0x10) == 0x10)
	    		setflag post:flags_mensaje,b108
	    	end if
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje,b109
	    	end if
		
		;Bits 112-120
    		comm get tes:idx from msg type BINARY length 1
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje,b117
	    	end if
 	
		;Bits 120-128
    		comm get tes:idx from msg type BINARY length 1
	end if

	comm get common:csr_string msg type BINARY length 1
	if (testflag(post:flags_mensaje,b002))
		;comm get common:csr_string msg type BINARY length 6
		comm get l_bin_mensaje msg type BINARY length 6
		// armo una rutina para convertir el número en hexa, porque el maldito fprint "%x"
		// no me lo toma... no sé, quizá no soporte números grandes?
		call dec_2_hex(l_bin_mensaje,MsgBIN_comm)
	end if

	if (testflag(post:flags_mensaje,b003))
		comm get common:csr_string msg type BCD length 3
	end if

	if (testflag(post:flags_mensaje,b007))
		comm get common:csr_string msg type BCD length 5
	end if

	if (testflag(post:flags_mensaje,b011))
		comm get common:csr_string msg type BCD length 3
		giros:stan_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b012))
		comm get common:csr_string msg type BCD length 3
		giros:hora_trx_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b013))
		comm get common:csr_string msg type BCD length 2
		giros:fecha_trx_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b024))
		comm get common:csr_string msg type BCD length 2
	end if

	if (testflag(post:flags_mensaje_adic,b037))
		comm get common:csr_string msg type ASCII length 12
		post:RefNum_comm = common:csr_string
		call csr:trimfield (post:RefNum_comm)
	endif
	
	if (testflag(post:flags_mensaje,b039))
	  	comm get common:csr_string msg type ASCII length 2
	    	giros:CodRespuesta_comm = common:csr_string
	end if

    if (testflag(post:flags_mensaje,b041))
	    comm get common:csr_string msg type ASCII LENGTH 8
	end if
	
	if (giros:CodRespuesta_comm != "00" && giros:CodRespuesta_comm != "70" )
		 call post:MISCmsg_error_cu(giros:CodRespuesta_comm)
		lib:err_retval = retval
		resetflag tlr:controla_firma,cancelacion
		let hcomm:tran_status = HOST_REJECTED
		LET MSG = MSGEND  			    
	else
		hcomm:tran_status = HOST_ACCEPTED
	end if
	
    
	if (testflag(post:flags_mensaje,b044))
	   	comm get common:csr_string msg type BINARY LENGTH 2
	end if
    
	if (testflag(post:flags_mensaje,b060))
		comm get common:csr_string from msg type BCD Length 2
		comm get common:csr_string msg type ASCII length 24
		node_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b001))

		
		if (testflag(post:flags_mensaje,b105))
	        comm get Longitud_105 MSG TYPE BCD LENGTH 2
    	    comm get cantRegBulk msg type ASCII LENGTH 3
			Longitud_105 = Longitud_105 - 3
			comm get BulkFld_105 MSG TYPE ASCII LENGTH Longitud_105
		end if

		if (testflag(post:flags_mensaje,b106))
    	    comm get Longitud_106 MSG TYPE BCD LENGTH 2
   			comm get BulkFld_106 MSG TYPE ASCII LENGTH Longitud_106
		end if

		if (testflag(post:flags_mensaje,b107))
        	comm get Longitud_107 MSG TYPE BCD LENGTH 2
			comm get BulkFld_107 MSG TYPE ASCII LENGTH Longitud_107
		end if

		if (testflag(post:flags_mensaje,b108))
        	comm get Longitud_108 MSG TYPE BCD LENGTH 2
			comm get BulkFld_108 MSG TYPE ASCII LENGTH Longitud_108
		end if
	
		if (testflag(post:flags_mensaje,b109))
       		comm get Longitud_109 MSG TYPE BCD LENGTH 2
			;if (Longitud_109 > 0) then
				comm get BulkFld_109 MSG TYPE ASCII LENGTH Longitud_109
			;endif
		end if

		if (testflag(post:flags_mensaje,b117))
            comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
			giros:Firma_comm = common:csr_string
		end if
	
	endif

END SUB

/*******/
