/****o* Clientes Medios/OFB:post:RCVEhdr_climedio
* NOMBRE
*   OFB:post:RCVEhdr_climedio
* DESCRIPCION
*   Rutina generica de Receive de mensajes de Cliente Medio.Se van seteando los flags segun los bits que 
*	vienen con datos y luego se realiza el comget para recuperar los valores.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:RCVEalta_cliente,OFB:post:RCVEclimed_anticipo,OFB:post:RCVEclimed_canc_ant
*	OFB:post:RCVEclimed_canc_cheq,OFB:post:RCVEclimed_canc_jnl,OFB:post:RCVEclimed_clie_fact
*	OFB:post:RCVEclimed_con_deuda,OFB:post:RCVEclimed_con_remi,OFB:post:RCVEclimed_cons_fact
*	OFB:post:RCVEclimed_convenio,OFB:post:RCVEclimed_fact_canc,OFB:post:RCVEclimed_factura
*	OFB:post:RCVEclimed_icomp_jnl,OFB:post:RCVEclimed_id_excep,OFB:post:RCVEclimed_id_orden
*	OFB:post:RCVEclimed_ifact_jnl,OFB:post:RCVEclimed_ingr_fact,OFB:post:RCVEclimed_ingr_int
*	OFB:post:RCVEclimed_int_canc,OFB:post:RCVEclimed_item_comp,OFB:post:RCVEclimed_jnl_ant
*	OFB:post:RCVEclimed_mult_cheq ,OFB:post:RCVEclimed_multiple,OFB:post:RCVEclimed_pagocanc
*	OFB:post:RCVEclimed_pagodif,OFB:post:RCVEclimed_simple,OFB:post:RCVEcm_cons_fact_int,
*	OFB:post:RCVEcm_cons_fact_ven,OFB:post:RCVEconsulta_cheques,OFB:post:RCVEConsulta_ExcepCM 
*	OFB:post:RCVEconv_lista_giros,OFB:post:RCVEdeposito_cheq_cp,OFB:post:RCVEentrada_cheq_suc
*	OFB:post:RCVEentrega_bolsas ,OFB:post:RCVEingreso_cheque,OFB:post:RCVErechazo_cheque
*	OFB:post:RCVEreimpLabelCM ,OFB:post:RCVErobo_cheque,OFB:post:RCVEsalida_cheque_tr
*	OFB:post:RCVEVenta_OrdenCM
* DOCUMENTACION
*   http://jira.sibs.net/jira/browse/AUT-520
* SOURCE
*/
#include "postrcve.h"

SUB post:RCVEhdr_climedio
	local l_bin_mensaje	like siaf:doc_ptmo
	local l_long		like siaf:idx
	
	post:flags_mensaje      = 0
	post:flags_mensaje_adic = 0

    	call csr:proc_list(F_CLEAR,LST:LISTcomunic_climed)

	if ( giros:codigo_procesamiento != 997026 && giros:codigo_procesamiento != 997027 )
		clearfield post:jnl_interes_diferido
		clearfield post:iva_Porcentaje
	end if

	comm get common:csr_string from msg type ASCII length 2

	;Primary BitMap    (campos del 02 al 064)
	;Bits 01-08
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b001
    	end if
    	if ((tes:idx & 0x40) == 0x40)
    		setflag post:flags_mensaje,b002
 		end if
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b003
    	end if
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b004
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje_adic,b005
    	end if    	
    	if ((tes:idx & 0x04) == 0x04)
    		setflag post:flags_mensaje,b006
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b007
    	end if

	;Bits 08-16
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b011
    	end if
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b012
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje,b013
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b015
    	end if
    	if ((tes:idx & 0x01) == 0x01)
    		setflag post:flags_mensaje,b016
    	end if

	;Bits 16-24
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x01) == 0x01)
    		setflag post:flags_mensaje,b024
    	end if

	;Bits 24-32
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b025
    	end if
    	if ((tes:idx & 0x40) == 0x40)
    		setflag post:flags_mensaje,b026
    	end if
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje,b027
    	end if
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b028
    	end if
    	if ((tes:idx & 0x08) == 0x08)
    		setflag post:flags_mensaje,b029
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b031
    	end if

	;Bits 32-40
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b036
    	end if
    	if ((tes:idx & 0x02) == 0x02)
    		setflag post:flags_mensaje,b039
    	end if

	;Bits 40-48
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x80) == 0x80)
    		setflag post:flags_mensaje,b041
    	end if
    	if ((tes:idx & 0x20) == 0x20)
    		setflag post:flags_mensaje_adic,b043
    	end if    	
    	if ((tes:idx & 0x10) == 0x10) 
    		setflag post:flags_mensaje,b044
    	endif

	;Bits 48-56
    	comm get tes:idx from msg type BINARY length 1

	;Bits 56-64
    	comm get tes:idx from msg type BINARY length 1
    	if ((tes:idx & 0x10) == 0x10)
    		setflag post:flags_mensaje,b060
    	end if

	if (testflag(post:flags_mensaje,b001) )
		;Secondary BitMap  (campos del 65 al 128)

		;Bits 064-072
    		comm get tes:idx from msg type BINARY length 1

		;Bits 072-080
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 080-088
    		comm get tes:idx from msg type BINARY length 1
	
		;Bits 088-096
    		comm get tes:idx from msg type BINARY length 1

	    	if ((tes:idx & 0x02) == 0x02)
	    		setflag post:flags_mensaje_adic,b095
	    	end if
	    	if ((tes:idx & 0x01) == 0x01)
	    		setflag post:flags_mensaje_adic,b096
	    	end if

		;Bits 096-104
    		comm get tes:idx from msg type BINARY length 1

	    	if ((tes:idx & 0x80) == 0x80)
	    		setflag post:flags_mensaje_adic,b097
	    	end if
	    	if ((tes:idx & 0x40) == 0x40)
	    		setflag post:flags_mensaje_adic,b098
	    	end if
	    	if ((tes:idx & 0x20) == 0x20)
	    		setflag post:flags_mensaje_adic,b099
	    	end if
	
		;Bits 104-112
    		comm get tes:idx from msg type BINARY length 1

	    	if ((tes:idx & 0x80) == 0x80)
	    		setflag post:flags_mensaje,b105
	    	end if
	    	if ((tes:idx & 0x40) == 0x40)
	    		setflag post:flags_mensaje,b106
	    	end if
	    	if ((tes:idx & 0x20) == 0x20)
	    		setflag post:flags_mensaje,b107
	    	end if
	    	if ((tes:idx & 0x10) == 0x10)
	    		setflag post:flags_mensaje,b108
	    	end if
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje,b109
	    	end if
	    	if ((tes:idx & 0x04) == 0x04)
	    		setflag post:flags_mensaje_adic,b110
	    	end if
	    	if ((tes:idx & 0x02) == 0x02)
	    		setflag post:flags_mensaje_adic,b111
	    	end if
	    	if ((tes:idx & 0x01) == 0x01)
	    		setflag post:flags_mensaje_adic,b112
	    	end if
		
		;Bits 112-120
    		comm get tes:idx from msg type BINARY length 1
	    	if ((tes:idx & 0x08) == 0x08)
	    		setflag post:flags_mensaje,b117
	    	end if
    		if ((tes:idx & 0x04) == 0x04)
    			setflag post:flags_mensaje,b118
    		end if
    		if ((tes:idx & 0x02) == 0x02)
    			setflag post:flags_mensaje,b119
    		end if
	
		;Bits 120-128
    		comm get tes:idx from msg type BINARY length 1
	end if

	comm get common:csr_string msg type BINARY length 1
	if (testflag(post:flags_mensaje,b002))
		;comm get common:csr_string msg type BINARY length 6
		comm get l_bin_mensaje msg type BINARY length 6
		// armo una rutina para convertir el número en hexa, porque el maldito fprint "%x"
		// no me lo toma... no sé, quizá no soporte números grandes?
		call dec_2_hex(l_bin_mensaje,MsgBIN_comm)
	end if

	if (testflag(post:flags_mensaje,b003))
		comm get common:csr_string msg type BCD length 3
	end if

	if (testflag(post:flags_mensaje,b004))
		comm get common:csr_string msg type BCD length 6
		giros:Importe_comm = common:csr_string
		post:Imp_chk_dif   = common:csr_string
		post:Imp_chk_dif   = Imp_chk_dif / 100
	end if

	if (testflag(post:flags_mensaje_adic,b005))
		comm get common:csr_string msg type ASCII length 2
	end if

	if (testflag(post:flags_mensaje,b006))
		comm get common:csr_string msg type BCD length 6
		//if (giros:codigo_procesamiento == 997021) then
		if (giros:codigo_procesamiento == 997036) then
			post:monto_TB = common:csr_string 
			post:monto_TB = post:monto_TB / 100
		endif
	end if

	if (testflag(post:flags_mensaje,b007))
		comm get common:csr_string msg type BCD length 5
	end if

	if (testflag(post:flags_mensaje,b011))
		comm get common:csr_string msg type BCD length 3
		giros:stan_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b012))
		comm get common:csr_string msg type BCD length 3
		giros:hora_trx_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b013))
		comm get common:csr_string msg type BCD length 2
		giros:fecha_trx_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b015))
		comm get common:csr_string msg type BCD length 6
		post:jnl_interes_diferido = common:csr_string
		post:jnl_interes_diferido = post:jnl_interes_diferido / 100
	end if

	if (testflag(post:flags_mensaje,b016))
		comm get tes:idx msg type BINARY length 1
		tes:idx = tes:idx & 0x0F
		comm get common:csr_string msg type BCD length 5
		fprint common:csr_string,"%s%s",tes:idx,common:csr_string
	end if

	if (testflag(post:flags_mensaje,b024))
		comm get common:csr_string msg type BCD length 2
	end if

	if (testflag(post:flags_mensaje,b025))
		comm get common:csr_string msg type ASCII length 1
	end if

	if (testflag(post:flags_mensaje,b026))
		comm get common:csr_string msg type BCD length 5
		id_excep_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b027))
		comm get common:csr_string msg type BCD length 6
		post:iva_Porcentaje = common:csr_string
		post:iva_Porcentaje = post:iva_Porcentaje / 100
	end if

	if (testflag(post:flags_mensaje,b028))
		comm get common:csr_string msg type ASCII length 5
	end if
	
	if (testflag(post:flags_mensaje,b029))
		comm get common:csr_string msg type ASCII length 1
		MarcaCons_comm = common:csr_string
	end if
	
	if (testflag(post:flags_mensaje,b031))
		comm get common:csr_string msg type ASCII length 12
		Cliente_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b036))

		comm get tes:idx msg type BINARY length 1

		if ( (tes:idx & 0xD0 ) == 0xD0 )
			fprint post:ConsOper_comm,"-"
		else
			fprint post:ConsOper_comm,"0"
		end if
		tes:idx = tes:idx & 0x0F

		comm get common:csr_string msg type BCD length 5
		fprint common:csr_string,"%s%s",tes:idx,common:csr_string
		post:Anticipo_comm = common:csr_string
		post:Imp_Anticipo  = common:csr_string
		post:Imp_Anticipo  = Imp_Anticipo / 100

		fprint post:ConsOper_comm,"%s%s",post:ConsOper_comm,post:Anticipo_comm

	end if
	
	if (testflag(post:flags_mensaje,b039))
	  	comm get common:csr_string msg type ASCII length 2
	    	giros:CodRespuesta_comm = common:csr_string
	end if

    RegularizaContingen = "N"
	if (giros:CodRespuesta_comm != "00" && giros:CodRespuesta_comm != "70" )
		if (testflag(post:flags_mensaje,b044)) then
			// salteo el contenido del bit 41
			if (testflag(post:flags_mensaje,b041))
				comm get common:csr_string msg type ASCII LENGTH 8
			end if
			// tomo el codigo de respuesta adicional
			comm get l_long msg type BINARY length 1
			l_long = ((l_long + 1) / 2)
			comm get common:csr_string msg type BINARY length l_long
			fprint post:CodRespAdic_comm "%02.2x" common:csr_string
		endif
        ; Analisis para regularización de contingencias
		call post:MISCanalisisCodRes31
		if (RegularizaContingen == "N") then
   		    call post:MISCrechazo_climed
  		    lib:err_retval = retval
  		    resetflag tlr:controla_firma,cancelacion
            let hcomm:tran_status = HOST_REJECTED
            LET MSG = MSGEND  			    
  		    if (retval == -3 ) 
 		    	return -3 //No pudo recuperar una caida mediante proceso batch
		    else
		    	return -1 //No pudo recuperar una caida mediante proceso normal
		    end if
        else
            hcomm:tran_status = HOST_ACCEPTED
        end if
	else
		hcomm:tran_status = HOST_ACCEPTED
	end if
    if (RegularizaContingen != "S") then
	    if (testflag(post:flags_mensaje,b041))
	    	comm get common:csr_string msg type ASCII LENGTH 8
	    end if
	    if (testflag(post:flags_mensaje_adic,b043))
	    	comm get common:csr_string msg type ASCII length 46
	    end if        
	    if (testflag(post:flags_mensaje,b044))
	    	comm get common:csr_string msg type BINARY LENGTH 2
	    end if
    end if
	if (testflag(post:flags_mensaje,b060))
		comm get common:csr_string from msg type BCD Length 2
		comm get common:csr_string msg type ASCII length 24
		node_comm = common:csr_string
	end if

	if (testflag(post:flags_mensaje,b001))

		if (testflag(post:flags_mensaje_adic,b095))
	        	comm get giros:Longitud MSG TYPE BCD LENGTH 2
    	    		comm get cantRegBulk_095 msg type ASCII LENGTH 3
			giros:Longitud = giros:Longitud - 3
			comm get BulkFld_095 MSG TYPE ASCII LENGTH giros:Longitud
		end if

		if (testflag(post:flags_mensaje_adic,b096))
    	    		comm get giros:Longitud MSG TYPE BCD LENGTH 2
   			comm get BulkFld_096  MSG TYPE ASCII LENGTH giros:Longitud
		end if

		if (testflag(post:flags_mensaje_adic,b097))
        		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get BulkFld_097  MSG TYPE ASCII LENGTH giros:Longitud
		end if

		if (testflag(post:flags_mensaje_adic,b098))
        		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get BulkFld_098  MSG TYPE ASCII LENGTH giros:Longitud
		end if
		
		if (testflag(post:flags_mensaje_adic,b099))
        		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get BulkFld_099  MSG TYPE ASCII LENGTH giros:Longitud
		end if

		if (testflag(post:flags_mensaje,b105))
	        	comm get Longitud_105 MSG TYPE BCD LENGTH 2
    	    		comm get cantRegBulk msg type ASCII LENGTH 3
			Longitud_105 = Longitud_105 - 3
			comm get BulkFld_105 MSG TYPE ASCII LENGTH Longitud_105
		end if

		if (testflag(post:flags_mensaje,b106))
    	    		comm get Longitud_106 MSG TYPE BCD LENGTH 2
   			comm get BulkFld_106 MSG TYPE ASCII LENGTH Longitud_106
		end if

		if (testflag(post:flags_mensaje,b107))
        		comm get Longitud_107 MSG TYPE BCD LENGTH 2
			comm get BulkFld_107 MSG TYPE ASCII LENGTH Longitud_107
		end if

		if (testflag(post:flags_mensaje,b108))
        		comm get Longitud_108 MSG TYPE BCD LENGTH 2
			comm get BulkFld_108 MSG TYPE ASCII LENGTH Longitud_108
		end if
	
		if (testflag(post:flags_mensaje,b109))
       		comm get Longitud_109 MSG TYPE BCD LENGTH 2
			if (Longitud_109 > 0) then
				comm get BulkFld_109 MSG TYPE ASCII LENGTH Longitud_109
			endif
		end if

		IF (giros:codigo_procesamiento == 998004)
			//Tengo que hacer esto porque el IDIOTA de acriter hizo lo que se le canto con el autorizador y no lo quiere cambiar
			//para que sea igual que el de clientes medios!!!!!!!!!!!!!!
			if (testflag(post:flags_mensaje_adic,b110))
		        comm get Longitud_110 MSG TYPE BCD LENGTH 2
    		    //comm get cantRegBulk_110 msg type ASCII LENGTH 3
				//Longitud_110 = Longitud_110 - 3
				comm get BulkFld_110 MSG TYPE ASCII LENGTH Longitud_110
			end if

			if (testflag(post:flags_mensaje_adic,b111))
	        	comm get post:Longitud_111 MSG TYPE BCD LENGTH 2
	        	//comm get post:ConsOper_comm MSG TYPE ASCII LENGTH 1
    	    	//comm get cantRegBulk_111 msg type ASCII LENGTH 2
				//Longitud_111 = Longitud_111 - 3
				comm get BulkFld_111 MSG TYPE ASCII LENGTH Longitud_111
			end if
		
			if (testflag(post:flags_mensaje_adic,b112))
	        	comm get post:Longitud_112 MSG TYPE BCD LENGTH 2
	        	//comm get post:ConsOper_comm MSG TYPE ASCII LENGTH 1
    	    	//comm get cantRegBulk_112 msg type ASCII LENGTH 2
				//Longitud_112 = Longitud_112 - 3
				comm get BulkFld_112 MSG TYPE ASCII LENGTH Longitud_112
			end if		
		ELSE
			if (testflag(post:flags_mensaje_adic,b110))
		        comm get Longitud_110 MSG TYPE BCD LENGTH 2
    		    comm get cantRegBulk_110 msg type ASCII LENGTH 3
				Longitud_110 = Longitud_110 - 3
				comm get BulkFld_110 MSG TYPE ASCII LENGTH Longitud_110
			end if

			if (testflag(post:flags_mensaje_adic,b111))
	        	comm get post:Longitud_111 MSG TYPE BCD LENGTH 2
	        	comm get post:ConsOper_comm MSG TYPE ASCII LENGTH 1
    	    	comm get cantRegBulk_111 msg type ASCII LENGTH 2
				Longitud_111 = Longitud_111 - 3
				comm get BulkFld_111 MSG TYPE ASCII LENGTH Longitud_111
			end if
		
			if (testflag(post:flags_mensaje_adic,b112))
	        	comm get post:Longitud_112 MSG TYPE BCD LENGTH 2
	        	comm get post:ConsOper_comm MSG TYPE ASCII LENGTH 1
    	    	comm get cantRegBulk_112 msg type ASCII LENGTH 2
				Longitud_112 = Longitud_112 - 3
				comm get BulkFld_112 MSG TYPE ASCII LENGTH Longitud_112
			end if
		END IF

		if (testflag(post:flags_mensaje,b117))
            		comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
			giros:Firma_comm = common:csr_string
		end if

		if (testflag(post:flags_mensaje,b118))
			comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
		end if

		if (testflag(post:flags_mensaje,b119))
			comm get giros:Longitud MSG TYPE BCD LENGTH 2
			comm get common:csr_string msg type ASCII length giros:Longitud
		end if

	endif

END SUB

/*******/
