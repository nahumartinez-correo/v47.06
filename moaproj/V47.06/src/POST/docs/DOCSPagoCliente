/****o* Pendientes de agrupación/OFB:post:DOCSPagoCliente
* NOMBRE
*   OFB:post:DOCSPagoCliente
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postdocs.h"
#include "sap.h"

SUB post:DOCSPagoCliente

local Lcontador		like siaf:i
local Lcontador2	like siaf:i
local Lcontador3	like siaf:i

   // verifico si hay retenciones... las mismas tienen que pasar como medios
   // de pago en el recibo.
   let Lcontador = 0
   while (Lcontador < cant_comprob && Lcontador < SAP_CANT_MAX_COMP) 
       if (TipoComprobante[Lcontador] == "RIB" || \
           TipoComprobante[Lcontador] == "IVA" || \
           TipoComprobante[Lcontador] == "RGA") then
         select (TipoComprobante[Lcontador])
           case "RIB"
               let ValorPago[cant_valores] = 97 // pa' poner algo, vio.
               break
           case "IVA"
               let ValorPago[cant_valores] = 98 // pa' poner algo, vio.
               break
           case "RGA"
               let ValorPago[cant_valores] = 99 // pa' poner algo, vio.
               break
         end select
         // estoy agregando un nuevo med. pago
         let Bco_Cuenta[cant_valores] = NumComprobante[Lcontador]
         let ImporteBanco[cant_valores] = ImpComprobante[Lcontador]
         let cant_valores = cant_valores + 1
         // ajusto los importes
         let siaf:importe = siaf:importe + ImpComprobante[Lcontador]
         let siaf:importe2 = siaf:importe2 + ImpComprobante[Lcontador]
       end if
       let Lcontador = Lcontador + 1
   end while

   // Hago el corrimiento en el array de comprob. eliminando las retenciones
   let Lcontador = 0
   while (Lcontador <= cant_comprob && Lcontador < SAP_CANT_MAX_COMP)
       if (TipoComprobante[Lcontador] == "RIB" || \
           TipoComprobante[Lcontador] == "IVA" || \
           TipoComprobante[Lcontador] == "RGA") then
         let Lcontador2 = Lcontador
         let Lcontador3 = Lcontador
         while (Lcontador2  < cant_comprob)
             let Lcontador3 = Lcontador2 + 1
             let TipoComprobante[Lcontador2] = TipoComprobante[Lcontador3]
             let ComprobanteDsc[Lcontador2] = ComprobanteDsc[Lcontador3]
             let NumComprobante[Lcontador2] = NumComprobante[Lcontador3]
             let ImpComprobante[Lcontador2] = ImpComprobante[Lcontador3]
             let Lcontador2 = Lcontador2 + 1
         end while
         // elemento pasado de comprobantes a medios de pagos => resto comprob.
         let cant_comprob = cant_comprob - 1
         // Esto es porque despues del corrimiento, el elemento que quedo en
         // la posicion actual del array tiene que volver a ser evaluado...
         let Lcontador = Lcontador - 1
       end if
       let Lcontador = Lcontador + 1
   end while

   // datos de la empresa
   call MISCobtiene_empresa(DSC:CorreoArgentino)
   // obtengo el importe en letras
   let desc_moneda = "pesos"
   call csr:nro_a_letras siaf:importe,desc_moneda,linea_letras1,linea_letras2,\
                         linea_letras3
   
   let siaf:DAUdestinatario = "Original"
   printdoc OFB:post:PRT_PagoRecibo,laser,"(L) IMPRIMIENDO COMPROBANTE (Original)"
   let siaf:DAUdestinatario = "Duplicado"
   printdoc OFB:post:PRT_PagoRecibo,laser,"(L) IMPRIMIENDO COMPROBANTE (Duplicado)"
   
   /*Se pide que solo se impriman 2 copias*/
   //let siaf:DAUdestinatario = "Triplicado"
   //printdoc OFB:post:PRT_PagoRecibo,laser,"(L) IMPRIMIENDO COMPROBANTE (Triplicado)"
   //let siaf:DAUdestinatario = "Cuadruplicado"
   //printdoc OFB:post:PRT_PagoRecibo,laser,"(L) IMPRIMIENDO COMPROBANTE (Cuadruplicado)"


END SUB

/*******/
