/****o* Rendición Piezas CDD/OFB:post:PBPiezas_RendidasCDD
* NOMBRE
*   OFB:post:PBPiezas_RendidasCDD
* DESCRIPCION
*   Esta rutina muestra las piezas cargadas en la tabla StockpCDD_Aux para esa fecha y nro de planilla
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*  LST:post:BUTRendicion_CDD
* DOCUMENTACION
*   SC50190.doc:http://livelink.intranet.siemens-itron.com.ar/livelink/livelink.exe?func=doc.ViewDoc&nodeId=639223&
* SOURCE
*/
#include "postpb.h"

SUB post:PBPiezas_RendidasCDD

	drv:last_button = drv:button
	call drv:but_down_disable
	call drv:all_but_disable
	
	//Valido que esté cargada la fecha y nro de planilla
	if (CDD_plan_fecha.numchars == 0 || CDD_plan_nro.numchars == 0) then
		MSGBOX "LA FECHA Y NRO DE PLANILLA DEBEN ESTAR CARGADOS.",0X00,"AVISO"
		call drv:back_but_status
		drv:last_button = drv:button
		call drv:but_up_enable
		RETURN -2
	endif
	
	offset_0000:
      
	CDS SELECT FROM DSC:StockpCDD_Aux_tbl BECOMES DSC:StockpCDD_Aux_ctx \
			WHERE (CDD_plan_fecha == CDD_plan_fecha && \
			 				CDD_plan_nro == CDD_plan_nro)
	
	let siaf:last_key = LASTKEY
	
	CDS MULTIDISPLAY DSC:StockpCDD_Aux_ctx LST:post:LISTpiezas_CDD
	
	IF (CDSRETVAL == 0x01FD) THEN
		GOTO offset_0000
	END IF

	LET lib:err_retval = CDSRETVAL
	IF (lib:err_retval == 0) THEN
		call drv:back_but_status
		drv:last_button = drv:button
		call drv:but_up_enable
		if (post:Pieza.numchars == 0)
			refresh post:Pieza
			refresh post:CDD_crem_imp
			setvaldone post:Pieza
			setvaldone post:CDD_crem_imp
			//cgw:Deshabilita botones Agregar,Modificar,Eliminar.
			DISABLECONTROL drv:PBcb5
			DISABLECONTROL drv:PBcb6
			DISABLECONTROL drv:PBcb7
			UNPROTFIELD post:Pieza //cgw:desprotejo el campo de la pieza.
		end if
		RETURN (-2)
	END IF

	LET lib:err_retval = CDSRETVAL
	CALL lib:MISCcds_find_err
	IF (RETVAL != 0) THEN
		clearfield post:Pieza
		clearfield post:CDD_crem_imp
		refresh post:Pieza
		refresh post:CDD_crem_imp
		call drv:back_but_status
		drv:last_button = drv:button
		call drv:but_up_enable
		//cgw:Deshabilita botones Agregar,Modificar,Eliminar.
		DISABLECONTROL drv:PBcb5
		DISABLECONTROL drv:PBcb6
		DISABLECONTROL drv:PBcb7
		UNPROTFIELD post:Pieza //cgw:desprotejo el campo de la pieza.
		RETURN (-1)
	END IF
    
  call csr:proc_list(F_CLEAR,LST:post:LISTpiezas_CDD_Aux)
  CDS EXTRACT DSC:StockpCDD_Aux_ctx ALL
  //resguardo el importe de crem en otra variable por si lo llegan a modificar.
  CDD_crem_imp_ant = CDD_crem_imp 
  
  CDS UNLOCK DSC:StockpCDD_Aux_ctx
  CDS ENDSELECT DSC:StockpCDD_Aux_ctx
    
  refresh post:Pieza
  refresh post:CDD_crem_imp
  refresh post:cod_barra_CREM
  //cgw:AUT-2030 Limpia del id cupon para que se vuelva a cargar al ser modificado.
  CLEARFIELD post:id_cupon_CCT
  
  call drv:back_but_status
  drv:last_button = drv:button
  call drv:but_up_enable

  DISABLECONTROL drv:PBcb5
  ENABLECONTROL  drv:PBcb6
  ENABLECONTROL  drv:PBcb7
  
  ;PROTFIELD post:Pieza //cgw:Si la pieza existe, protejo el campo de la pieza.
  NEXTFIELD post:CDD_crem_imp
    
  UNGETKEY RT_TAB
END SUB

/*******/
