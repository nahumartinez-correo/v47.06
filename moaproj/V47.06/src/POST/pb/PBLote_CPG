/****o* Pendientes de agrupación/OFB:post:PBLote_CPG
* NOMBRE
*   OFB:post:PBLote_CPG
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postpb.h"

Sub post:PBLote_CPG

  CALL csr:trimfield lote_CPG
  If (lote_CPG.numchars == 0) Then
    CDS SELECT FROM DSC:stockp_tbl becomes DSC:stockp_ctx1 ASCENDING SORT "Lote"
    CDS FINDFIRST DSC:stockp_ctx1 NOLOCK
	If (CDSRETVAL == -801) Then
		CDS ENDSELECT DSC:stockp_ctx1
		MSGBOX "NO HAY LOTES INGRESADOS",0X00,"ERROR"
		RETURN 0
	End If
  Else
    CDS SELECT FROM DSC:stockp_tbl becomes DSC:stockp_ctx1 ASCENDING SORT "Lote"
    CDS FINDFIRST DSC:stockp_ctx1 NOLOCK
	If (CDSRETVAL == -801) Then
	    CDS ENDSELECT DSC:stockp_ctx1
    	MSGBOX "NO HAY LOTES INGRESADOS",0X00,"ERROR"
	   	RETURN 0
	End If
   
  End If
    
	/*Mediante la siguiente rutina csr creo un nuevo picklist usando el picklist header creado con anterioridad*/
	CALL csr:f_sanewpl "Lote CPG" PIC:PICLote_CPG 90 152
	
	DO
		
		If (CDSRETVAL == -801) Then
			CDS ENDSELECT DSC:stockp_ctx1
			BREAK
		End If
		If (CDSRETVAL == 0) then
			CDS EXTRACT DSC:stockp_ctx1 adt_stockp_lote
            If (adt_stockp_lote != "") Then
               CALL  csr:f_sadopv ("Lote CPG",adt_stockp_lote,0)
               If (RETVAL < 0) Then/*Quiere decir que el lote no esta en la lista*/
                   CALL csr:trimfield post:adt_stockp_lote
                   FPRINT common:csr_string,"%-10s",adt_stockp_lote
     		       /*Mediante la siguiente rutina csr agrego la informaciòn deseada al picklist*/
		           CALL csr:f_saaddpl "Lote CPG" common:csr_string
		        End If
		    End If
		    CDS FINDNEXT DSC:stockp_ctx1 NOLOCK
		End If
	LOOP
	CALL MISCdisable_PB_CPG (4)
    /*Seteo de flags a modo picklist, para que el foco este en el picklist*/	
	SETFLAG drv:mode_flags,picklist_mode
    /*Mediante esta rutina csr se muestra el picklist*/
	CALL csr:f_sadopl "Lote CPG" common:csr_string
    /*Reseteo de flags de modo picklist*/	
	RESETFLAG drv:mode_flags,picklist_mode
    /*Si el usuario no selecciona ninguna opciòn del picklist entonces se llama */
    /* a una rutina csr que borra de memoria los datos del picklist*/
	If (RETVAL < 0) then
		CALL siaf:FVALcampo_requerido
		CALL csr:f_sadroppl "Lote CPG"
		CALL MISCenable_PB_CPG (4)
		NEXTFIELD lote_CPG
		IF (currentfield.id != lote_CPG.id) THEN
			UNGETKEY RT_TAB
		END IF
		RETURN -2
	Else
        /*Si el usuario selecciona una opción del picklist entonces se borran los datos/*
        /*de memoria y luego se mueve la selección al campo correspondiente*/		
		CALL csr:f_sadroppl "Lote CPG"
		lote_CPG = common:csr_string
		REFRESH lote_CPG
	End If		
	
	CALL MISCenable_PB_CPG (4)
  	NEXTFIELD lote_CPG
  	IF (currentfield.id != lote_CPG.id) THEN
		UNGETKEY RT_TAB
	END IF
  	
End Sub

/*******/
