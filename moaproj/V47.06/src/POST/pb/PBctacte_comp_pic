/****o* Pendientes de agrupación/OFB:post:PBctacte_comp_pic
* NOMBRE
*   OFB:post:PBctacte_comp_pic
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postpb.h"

SUB post:PBctacte_comp_pic

//////////////////////////////////////////
// Displaya el picklist de comprobantes //
//////////////////////////////////////////

local varl_idx		like siaf:idx
local varl_picstr	like common:csr_string


LET drv:button = drv:last_button
CALL drv:but_up_enable
CALL drv:but_redraw

// por si las moscas...
if (testflag(tlr:tran_flags,correction)) then
   return
end if

// me aseguro que haya al menos un item...
let varl_idx = PL_GETITEM
call csr:myPickcontrol "comprobantes" varl_picstr varl_idx
if (retval != 0) then
    errmsg common:errmsg_list,"No hay elementos en la lista"
    return (-2)
end if

// bueno, si tenemos al menos un elemento, lo muestro.
call csr:f_sadopl "comprobantes" varl_picstr
if (retval >= 0) then
    // se eligio un elemento -> paso los datos del item seleccionado a 
    // los campos de entrada (por si se quieren modificar)
    let PicDescrip = varl_picstr
    let tipo_comprobante = substr(varl_picstr,0,3)
    let letra_comprobante = substr(varl_picstr,4,1)
    let cec_comprobante = substr(varl_picstr,6,4)
    let num_comprobante = substr(varl_picstr,11,8)
    let imp_comprobante = substr(varl_picstr,20,16)
    call csr:proc_list F_REFRESH LST:post:LISTccte_cobza_flds2
end if
nextfield post:tipo_comprobante
END SUB

/*******/
