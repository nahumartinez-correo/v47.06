/****o* Pendientes de agrupación/OFB:post:PBrestBonifSelElemen
* NOMBRE
*   OFB:post:PBrestBonifSelElemen
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postpb.h"

SUB post:PBrestBonifSelElemen
	local cantRestSel like adt_restEsp_cantSel
	local indice LIKE post:Tarif_idx
	local l_string like common:csr_string
	local l_string2 like common:csr_string
	local l_prod like common:csr_string
	local l_subprod like common:csr_string

	drv:last_button = drv:button
    call drv:but_down_disable
    call drv:all_but_disable
    call csr:f_sadroppl dsc:post:PickAuxRestBonif
	call csr:f_sanewpl dsc:post:PickAuxRestBonif, PIC:post:PICrest_rest
	SETFLAG drv:mode_flags,picklist_mode
	indice = PL_GETITEM
	select (adt_rest_tituloRest)
		case REST_PRD
			cantRestSel = adt_restPrv_cantSel
			if (cantRestSel > 0)
				call csr:myPickcontrol(fld:adt_rest_tituloRest,common:csr_string,indice)
			endif
			WHILE ((indice - PL_GETITEM) < cantRestSel )
				l_prod = substr(common:csr_string,0,10)
				fprint l_string  "%s", adt_promo_prodVsCod
				if (l_prod == l_string) then
					CALL csr:f_saaddpl dsc:post:PickAuxRestBonif common:csr_string
			    end if
			    indice = indice + 1
				call csr:myPickcontrol(fld:adt_rest_tituloRest,common:csr_string,indice)
			END WHILE
			call csr:PickOp PICKOP_SORT dsc:post:PickAuxRestBonif "0,10"
			break
		case REST_ESP
			cantRestSel = adt_restEsp_cantSel
			if (cantRestSel > 0)
				call csr:myPickcontrol(fld:adt_rest_tituloRest,common:csr_string,indice)
			endif
			WHILE ((indice - PL_GETITEM) < cantRestSel )
				l_prod = substr(common:csr_string,0,20)
				l_subprod = substr(common:csr_string,21,20)
				fprint l_string  "%s", adt_promo_esp
				fprint l_string2  "%s", adt_promo_subesp
				if (l_prod == l_string && l_subprod == l_string2) then
					CALL csr:f_saaddpl dsc:post:PickAuxRestBonif common:csr_string
			    end if
			    indice = indice + 1
				call csr:myPickcontrol(fld:adt_rest_tituloRest,common:csr_string,indice)
			END WHILE
			call csr:PickOp PICKOP_SORT dsc:post:PickAuxRestBonif "0,41"
			break
	end select
	CALL CSR:f_sadopl(dsc:post:PickAuxRestBonif,common:csr_string)
	if (retval >= 0)
		select (adt_rest_tituloRest)
			case REST_PRD
				adt_restBon_elemento = substr(common:csr_string, 15, 5)
				break
			case REST_ESP
				adt_restBon_elemento = substr(common:csr_string, 46, 5)
				break
		end select
		CALL csr:trimfield adt_rest_elemento
		refresh adt_restBon_elemento
	else
		if (retval == -1)
			errmsg LST:common:errmsg_list,"NO HAY VALORES INGRESADOS!!!"
		endif
	endif
	call csr:f_sadroppl dsc:post:PickAuxRestBonif
    RESETFLAG drv:mode_flags,picklist_mode
    call drv:back_but_status
    drv:button = drv:last_button
    call drv:but_up_enable
END SUB

/*******/
