/****o* Pendientes de agrupación/OFB:post:PBctacte_comp_del
* NOMBRE
*   OFB:post:PBctacte_comp_del
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postpb.h"

SUB post:PBctacte_comp_del

///////////////////////////////////////
// Borra el comprobante del picklist //
///////////////////////////////////////

local varl_idx		like siaf:idx
local varl_picstr	like common:csr_string
local varl_msgstr	like common:csr_string
local varl_importe	like post:imp_comprobante
local varl_tipo		like post:tipo_comprobante
local l_imp		like siaf:importe
local l_tipo_comp	like post:tipo_comprobante
local l_signo           like siaf:signo

LET drv:button = drv:last_button
CALL drv:but_up_enable
CALL drv:but_redraw

// se borrara el comprobante que este siendo mostrado en el combofield
if (PicDescrip.NUMCHARS == 0) then
    errmsg common:errmsg_list,"Debe Seleccionar un Comprobante de la Lista"
    return (-2)
end if

// busco el comprobante dentro del picklist
let varl_idx = PL_GETITEM
call csr:myPickcontrol "comprobantes" varl_picstr varl_idx
while (retval == 0 && varl_picstr != PicDescrip) 
    let varl_idx = varl_idx + 1
    call csr:myPickcontrol "comprobantes" varl_picstr varl_idx
end while
if (retval < 0) then
    errmsg common:errmsg_list,"Comprobante a eliminar no encontrado"
    return (-2)
end if

//MFM - Validacion de importes!!
l_tipo_comp = substr(varl_picstr,0,3)
pickverify l_tipo_comp,PIC:post:TipoComprobante
 let l_signo = substr(common:csr_string,32,1)
if (l_signo == "+") then
    if (imp_comprobante > siaf:importe2) then
       errmsg common:errmsg_list,"TOTAL DE COMPROBANTES NO PUEDE SER NEGATIVO"
       return (-2)
    end if
end if

// verifico que se quiera borrar realmente.
fprint varl_msgstr "Ud. esta por eliminar el comprobante %1.1s%4.4d-%8.8d" \
       substr(varl_picstr,4,1),substr(varl_picstr,6,4),substr(varl_picstr,11,8)
fprint varl_msgstr "%s\nDesea Continuar?" varl_msgstr
msgbox FLD:varl_msgstr,OFB_YESNO,"Confirmacion"
if (retval == OFB_IDYES) then
    // Bueno, se pidio confirmacion y acepto... asi que... chau item!
    let varl_idx = varl_idx - PL_GETITEM
    if (varl_idx >= 0) then
        call csr:myPickdelete "comprobantes" varl_picstr varl_idx
        if (retval < 0) then
            msgbox "Imposible Borrar Comprobante",OFB_OK,"Error de Aplicacion"
        else
            // limpio los campos de entrada para un nuevo comprobante
            call csr:proc_list F_CLEAR LST:post:LISTccte_cobza_flds2
            call csr:proc_list F_REFRESH LST:post:LISTccte_cobza_flds2
            // restamos al total
            let varl_importe = substr(varl_picstr,20,16)
            let varl_tipo = substr(varl_picstr,0,3)
            pickverify FLD:varl_tipo,PIC:post:TipoComprobante
            let siaf:signo = substr(common:csr_string,32,1)
            if (siaf:signo == "+") then
                let siaf:importe2 = siaf:importe2 - varl_importe
            else
                let siaf:importe2 = siaf:importe2 + varl_importe
            end if
            refresh FLD:siaf:importe2
            // si todo salio bien, ordeno el picklist
            call csr:PickOp 4 "comprobantes" "0,20,ascii,asc" 
        end if
    end if
end if

END SUB

/*******/
