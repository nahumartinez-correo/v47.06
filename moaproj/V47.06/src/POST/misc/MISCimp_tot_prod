/****o* Pendientes de agrupación/OFB:post:MISCimp_tot_prod
* NOMBRE
*   OFB:post:MISCimp_tot_prod
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCimp_tot_prod
LOCAL i_idx LIKE post:idx
LOCAL lidx LIKE post:idx
LOCAL lvalor LIKE post:adt_codseq_nro
	
	if (row == 0) then
		FPRINT common:csr_string,"%s  Tot.P",common:csr_string
		return
	end if

	ImpAcumProd = "S"
	//Busco el producto que quiero imprimir el total, y lo acumulo con mi vector.
	//Siempre y cuando haya entrando alguna vez a acumular en el picklist, sino imprimo el vector unicamente.
	if (AcumTotProd == "S") then
		lidx = 0
		let i_idx = PL_GETITEM + lidx
		call csr:myPickcontrol dsc:post:aux_pic_medios siaf:nota_1 i_idx
		Do
			if (retval < 0)
		    	break
		    end if
			if (substr(siaf:nota_1,0,2) == mat_imp[row][0]) then
				//Lo encontro, imprimi el importe acumulado
				CALL csr:trimfield siaf:nota_1
				lvalor = substr(siaf:nota_1,3,8)
				vec_tot_prod[row] = vec_tot_prod[row] + lvalor
				break //salgo del loop
			end if
			let lidx = lidx + 1
		    let i_idx = PL_GETITEM + lidx
		    call csr:myPickcontrol dsc:post:aux_pic_medios siaf:nota_1 i_idx            
		Loop
	end if
	FPRINT common:csr_string,"%s %6s",common:csr_string,vec_tot_prod[row]
END SUB

/*******/
