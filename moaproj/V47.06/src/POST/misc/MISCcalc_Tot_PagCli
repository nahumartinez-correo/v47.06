/****o* Pendientes de agrupación/OFB:post:MISCcalc_Tot_PagCli
* NOMBRE
*   OFB:post:MISCcalc_Tot_PagCli
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

Sub post:MISCcalc_Tot_PagCli
Local Lindice like post:cantidad
Local Lindice_moneda like post:cantidad
Local Ult_Indice like post:cantidad

// Esto es Muy importante porque despues se va usar en la parte que totaliza
  post:cantidad = 0
  siaf:importe_aux = 0
  post:importe_aux = 0
  
  let Lindice = 0
  let Ult_Indice = 0
  
  call csr:cleararray(post:Importe_Moneda)
  call csr:cleararray(post:Tipo_Moneda)
  call csr:cleararray(post:Importe_MoneBase)

  While ( Lindice < SAP_CANT_MAX_MPAG )
    let Lindice_moneda = 0
    
    While ( Importe_Moneda[Lindice_moneda] != 0 && \
            Tipo_Moneda[Lindice_moneda] != ValorPago[Lindice] )

    //While ( Lindice_moneda < Lindice && \
      //      Tipo_Moneda[Lindice_moneda] != ValorPago[Lindice] )
            Lindice_moneda = Lindice_moneda + 1
    End While
    //if (Tipo_Moneda[Lindice_moneda] != ValorPago[Lindice] )
      //  Ult_Indice = Ult_Indice + 1
    //end if

    // Esto lo puse porque cuando comparaba Tipo_moneda = 00 y ValorPago = ""
    // Sali como que eran iguales
    If ( ImporteBanco[Lindice] > 0 )
        let Tipo_Moneda[Lindice_moneda] = ValorPago[Lindice]
        let Importe_Moneda[Lindice_moneda] = Importe_Moneda[Lindice_moneda] + \
                                             ImporteBanco[Lindice]
        let Importe_MoneBase[Lindice_moneda] = Importe_MoneBase[Lindice_moneda] + \
                                             ImporteBase[Lindice]
                                             
    End if
    let Lindice = Lindice + 1
  End While
END SUB

/*******/
