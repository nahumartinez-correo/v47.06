/****o* Transferencias Bancarias/OFB:post:MISCSel_FactCobro
* NOMBRE
*   OFB:post:MISCSel_FactCobro
* DESCRIPCION
* Esta rutina ordena el picklist de facturas por fecha de vto mas antigua.
* Luego controla que el monto de las transferencias bancarias alcance para pagar al menos la factura mas antigua.
* Marca las facturas que se podran cobrar con Transf. bancarias con un asterisco (*).
* ENTRADAS
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   MISCVerSi_AdelTB_CM
* REFERENCIADO POR
*   NO SE USA MAS
* DOCUMENTACION
*   http://jira.sibs.net/jira/browse/AUT-350
*		PS10662
*   NI 50552 -  MEJORAS EN LA APLICACION DE LAS TRANFERENCIAS BANCARIAS
* SOURCE
*/
		
#include "postmisc.h"

SUB post:MISCSel_FactCobro
	LOCAL idx LIKE siaf:i
	LOCAL i_idx LIKE siaf:i
	LOCAL limp_fact LIKE siaf:importe
	LOCAL lsaldo_TB LIKE post:monto_TB
	LOCAL lmarca LIKE post:marca_factura
	LOCAL lcant LIKE post:cantidad
	LOCAL varl_imp_rem LIKE post:importe_factura
	LOCAL varl_imp_consumo LIKE	 post:importe_factura    
	LOCAL varl_neto LIKE importe_consumo
	LOCAL varl_tipo_fact LIKE  common:csr_string	
	LOCAL varl_tipo LIKE  common:csr_string
	LOCAL varl_real_fact LIKE common:csr_string
	LOCAL l_date LIKE post:fecha_vencimiento

	//verifico primero si la suma de los importes de las facturas es mayor a cero
	IF (post:Imp_TotFactVenc == 0) THEN
		MSGBOX "La suma de los importes de las facturas vencidas es igual a cero.",0x00,"AVISO"
		IF (!ModalidadCD) THEN
			ERRMSG common:errmsg_list,"Deberá aplicar las Transferencias Bancarias a Adelantos."
		END IF
		UNGETKEY RT_ESC
		RETURN
	END IF
	
	//creo un nuevo picklist para mostrar las facturas seleccionadas y no seleccionadas
	CALL csr:f_sadroppl(DSC:facturas_venc)
	CALL csr:f_sanewpl(DSC:facturas_venc,PIC:climed_mult3)
	
	//Ordeno el Picklist por fecha de vencimiento - tipo y nro de factura
	CALL csr:PickOp PICKOP_SORT DSC:facturas_cliente "0,10" "11,1" "13,15"
	
	lsaldo_TB = post:saldo_TB
	lcant = 0 //Lo uso para contar la cantidad de facturas marcadas * (no pueden superar las 10)

	//Recorro el picklist de facturas
	idx = PL_GETITEM
	DO	
		CLEARFIELD common:csr_string
		CALL csr:myPickcontrol(dsc:facturas_cliente,common:csr_string,idx)
		
		IF (RETVAL < 0) THEN
			BREAK
		END IF
	   
		//recupero los datos del picklist 20090930
		l_date = SUBSTR(common:csr_string,8,2) +  SUBSTR(common:csr_string,6,2) * 100 + SUBSTR(common:csr_string,2,4) * 10000
		//post:fecha_vencimiento = substr(common:csr_string,0,10)
		varl_tipo_fact = SUBSTR(common:csr_string,11,1)
		varl_real_fact = SUBSTR(common:csr_string,13,15)
		post:importe_factura = SUBSTR(common:csr_string,29,16)
		post:factura_nro = SUBSTR(common:csr_string,46,15)
		varl_neto = SUBSTR(common:csr_string,76,16)
		varl_imp_consumo  = SUBSTR(common:csr_string,92,16) 
		varl_imp_rem = SUBSTR(common:csr_string,108,16)
		varl_tipo = SUBSTR(common:csr_string,124,1)
				
		IF (lcant > 9) THEN
			//se fuerza a cero para que no seleccione mas facturas, pero si las agregue en el picklist
			lsaldo_TB = 0
		END IF
	    
		//Recupero el monto real de la factura (imp - consumo de adelanto!)
		limp_fact = SUBSTR(common:csr_string,76,16) 
	  lmarca = " "
	  // verifico si el monto de TB alcanza para pagarla
	  IF (lsaldo_TB >= limp_fact) THEN
	  	lmarca = "*"
	  END IF
	  
		FPRINT common:csr_string,\
					"%10.10e %1.1s %015.15s %16.16e %015.15s %1.1s             ", \
					l_date,varl_tipo_fact,varl_real_fact,post:importe_factura,post:factura_nro,lmarca
		FPRINT common:csr_string,\
				"%s%16.16e%16.16e%16.16e%1.1s", \
				common:csr_string,varl_neto,importe_consumo,varl_imp_rem,varl_tipo

		CALL csr:f_saaddpl(DSC:facturas_venc,common:csr_string)
	  
		// verifico si el monto de TB alcanza para pagarla
		IF (lsaldo_TB >= limp_fact) THEN
			//acumulo en el campo importe_fpendsel el monto de la factura seleccionada para mostrarlo en pantalla
			post:importe_fpendsel = post:importe_fpendsel + limp_fact
			//actualizo el saldo
			lsaldo_TB = lsaldo_TB - limp_fact
			//actualizo el contador de facturas marcadas 
			lcant = lcant + 1
	  ELSE
			//esto quiere decir que la TB no alcanza para pagar la factura vencida mas antigua
			IF (lcant == 0) THEN
				BREAK
			END IF
    END IF
	  LET idx = idx + 1
	LOOP
	
	IF (lcant > 9) THEN
		MSGBOX \
		"Existen más de 10 facturas vencidas pendientes de pago. Se cobrarán las 10 más antiguas, luego deberá ingresar nuevamente a la transacción para cobrar el resto.",OFB_OK,"Atencion"
	end if
    
	IF (lcant == 0) THEN 
		//quiere decir que no se marcó ninguna factura para cobrar
		IF (!ModalidadCD) THEN
			ERRMSG common:errmsg_list,"El monto de la Transferencia Bancaria no es suficiente para realizar la cobranza. Deberá aplicarlo a Adelantos."
		ELSE
			ERRMSG common:errmsg_list,"El monto de la Transferencia Bancaria no es suficiente para realizar la cobranza."
		END IF
		UNGETKEY RT_ESC
	END IF
	
END SUB

/*******/
