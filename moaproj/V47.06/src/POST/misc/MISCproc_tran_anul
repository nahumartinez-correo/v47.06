/****o* Pendientes de agrupación/OFB:post:MISCproc_tran_anul
* NOMBRE
*   OFB:post:MISCproc_tran_anul
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCproc_tran_anul

/************************************************************/
/* Esta rutina carga en un vector que simula un picklist        */
/* el cual se va a ir moviendo segun el boton presionado        */
/*              Gabriel Falciola                                                                        */
/************************************************************/
        local idx like siaf:i
        local idx2 like siaf:i
        idx = TranAnul_idx + PL_GETITEM
        idx2 = 0
        //Recorro el picklist y proceso la informacion de cada item
        do
                call csr:myPickcontrol(dsc:PICanulacion_tran,common:csr_string_171,idx)
                TranAnul_vec[idx2][0] = substr(common:csr_string_171,0,60)
                TranAnul_vec[idx2][1] = substr(common:csr_string_171,61,4)
                TranAnul_vec[idx2][2] = substr(common:csr_string_171,66,5)
                TranAnul_vec[idx2][3] = substr(common:csr_string_171,72,1)
                TranAnul_vec[idx2][4] = substr(common:csr_string_171,74,2)
                TranAnul_vec[idx2][5] = substr(common:csr_string_171,77,2)
                TranAnul_vec[idx2][6] = substr(common:csr_string_171,80,8)
                TranAnul_vec[idx2][7] = substr(common:csr_string_171,89,5)
                TranAnul_vec[idx2][8] = substr(common:csr_string_171,95,1)
                TranAnul_vec[idx2][9] = substr(common:csr_string_171,97,5)
                TranAnul_vec[idx2][10] = substr(common:csr_string_171,103,1) //Para saber si la tx tiene que ser procesada por la Interfaz
                TranAnul_vec[idx2][11] = substr(common:csr_string_171,105,32) // Valor del campo post:Pieza
                TranAnul_vec[idx2][12] = substr(common:csr_string_171,138,5) // Valor del campo post:PreDNroTrnAsoc
                ;TranAnul_vec[idx2][13] = substr(common:csr_string,144,6)// Valor del campo post:sf1_id_paycode
                TranAnul_vec[idx2][13] = substr(common:csr_string_171,144,8)// Valor del campo post:sf1_utility
                TranAnul_vec[idx2][14] = substr(common:csr_string_171,153,8) // Valor del campo post:combo_nro (Combos de productos)
                call csr:trimfield(TranAnul_vec[idx2][9])
                call csr:trimfield(TranAnul_vec[idx2][11])
                call csr:trimfield(TranAnul_vec[idx2][12])
                call csr:trimfield(TranAnul_vec[idx2][13])
                call csr:trimfield(TranAnul_vec[idx2][14])
                refresh TranAnul_vec[idx2][13]
                refresh TranAnul_vec[idx2][0]

                //Busco si el item se encuentra seleccionado o no y en base a eso
                //lo reflejo en el checkbox
                call MISCverif_tran_sel(idx2)
                if (retval == 0)
                        call MISCmarca_tran(idx2)
                else
                        call MISCdesmarca_tran(idx2)
                end if
                if (idx2 == 11)
                        break
                else
                        if ((idx - PL_GETITEM) == TranAnul_cant - 1)
                        		//Se limpian los items que sobran para simular el scroll
                                call MISCsobra_tran(idx2)
                                break
                        else
                                idx = idx + 1
                                idx2 = idx2 + 1
                        end if
                end if
        loop
        call MISCrefresh_items

        //Deshabilito todas las flechas
        if (TranAnul_cant <= 12)
                disablecontrol PBTranAnul_abajo
                disablecontrol PBTranAnul_arriba
				call MISCflecha_restore
        else
                //Para deshabilitar la flecha para bajar me fijo si llegue hasta el ultimo
                idx = (TranAnul_cant - 1) + PL_GETITEM
                call csr:myPickcontrol(dsc:PICanulacion_tran,common:csr_string_171,idx)
                if (substr(common:csr_string_171,61,4) == TranAnul_vec[idx2][1])
                        disablecontrol PBTranAnul_abajo
                        keydef f32,RT_DOWN
                end if
                //Para deshabilitar la flecha para subir me fijo si estoy parado en el primero
                if (TranAnul_idx == 0)
                        disablecontrol PBTranAnul_arriba
                end if
        end if
END SUB

/*******/
