/****o* Pendientes de agrupación/OFB:post:MISCacum_tot_prod
* NOMBRE
*   OFB:post:MISCacum_tot_prod
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCacum_tot_prod
LOCAL rowaux LIKE post:row
LOCAL i_idx LIKE post:idx
LOCAL lidx LIKE post:idx
LOCAL lvalor LIKE post:adt_codseq_nro
	
	AcumTotProd = "S"
	rowaux = 1
	Do 
		if (rowaux >= row)
			break
		end if
		//Por cada uno, busco en el picklist para acumular
		lidx = 0
		let i_idx = PL_GETITEM + lidx
		call csr:myPickcontrol dsc:post:aux_pic_medios common:csr_string i_idx
		Do
			if (retval < 0)
		    	break
		    end if
			if (substr(common:csr_string,0,2) == mat_imp[rowaux][0]) then
				//Lo encontro, borro y agrego con el importe actualizado
				CALL csr:trimfield common:csr_string
				lvalor = substr(common:csr_string,3,8)
				vec_tot_prod[rowaux] = vec_tot_prod[rowaux] + lvalor
				
				i_idx = i_idx - PL_GETITEM
	        	CALL CSR:myPickdelete(dsc:post:aux_pic_medios,common:csr_string,i_idx)
				lidx = lidx - 1
				
				fprint common:csr_string "%s %8.8s",substr(common:csr_string,0,2),vec_tot_prod[rowaux]
				Call csr:f_saaddpl dsc:post:aux_pic_medios common:csr_string
				break //salgo del loop
			end if
			let lidx = lidx + 1
		    let i_idx = PL_GETITEM + lidx
		    call csr:myPickcontrol dsc:post:aux_pic_medios common:csr_string i_idx            
		Loop
		rowaux = rowaux + 1
	Loop
END SUB

/*******/
