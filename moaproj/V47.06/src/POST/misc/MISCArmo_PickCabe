/****o* Pendientes de agrupación/OFB:post:MISCArmo_PickCabe
* NOMBRE
*   OFB:post:MISCArmo_PickCabe
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCArmo_PickCabe
	local varl_picstr like common:csr_string
	local varl_picstr2 like common:csr_string
	local l_rest_regHab like adt_rest_regHab
	local l_rest_regTipo like adt_rest_regTipo
	local l_rest_prvHab like adt_rest_prvHab
	local l_rest_prvTipo like adt_rest_prvTipo
	local l_rest_sucHab like adt_rest_sucHab
	local l_rest_sucTipo like adt_rest_sucTipo
	local l_rest_cliHab like adt_rest_cliHab
	local l_rest_cliTipo like adt_rest_cliTipo
	local l_rest_upHab like adt_rest_upHab
	local l_rest_upTipo like adt_rest_upTipo

	l_rest_regHab = adt_rest_regHab
	l_rest_regTipo = adt_rest_regTipo
	l_rest_prvHab = adt_rest_prvHab
	l_rest_prvTipo = adt_rest_prvTipo
	l_rest_sucHab = adt_rest_sucHab
	l_rest_sucTipo = adt_rest_sucTipo
	l_rest_cliHab = adt_rest_cliHab
	l_rest_cliTipo = adt_rest_cliTipo
	l_rest_upHab = adt_rest_upHab
	l_rest_upTipo = adt_rest_upTipo

	clearfield adt_rest_cantRest
	CALL csr:f_sadroppl dsc:pic_restCabe
	call csr:f_sanewpl dsc:post:pic_restCabe, PIC:PICrestCabe, 560, 120
	if (retval < 0) then
    	errmsg common:errmsg_list,"Error de Ejecucion"
    	return (-2)
	end if

	if (adt_rest_tipoProd.numchars != 0 ) then
		CDS SELECT FROM dsc:adt_restCabe_tbl BECOMES dsc:adt_restCabe_ctx \
		WHERE adt_rest_tipoProd == FLD:adt_rest_tipoProd
	else
		CDS SELECT FROM dsc:adt_restCabe_tbl BECOMES dsc:adt_restCabe_ctx
	end if
    cds findfirst dsc:adt_restCabe_ctx nolock

    do
		if (cdsretval < 0) then
			break
		end if
		adt_rest_cantRest = adt_rest_cantRest + 1
		cds extract dsc:adt_restCabe_ctx all
		fprint varl_picstr2, "%1s %1s   %1s %1s   %1s %1s   %1s %1s" \
		adt_rest_regHab, adt_rest_regTipo, adt_rest_prvHab, adt_rest_prvTipo, \
		adt_rest_sucHab, adt_rest_sucTipo, adt_rest_cliHab, adt_rest_cliTipo
		fprint varl_picstr2, "%22s   %1s %1s" varl_picstr2, adt_rest_upHab, adt_rest_upTipo
		fprint varl_picstr, "%3s   %-41s %28s" adt_rest_tipoProd, \
				adt_rest_claveProdu, varl_picstr2
	    call csr:f_saaddpl dsc:pic_restCabe varl_picstr
	    cds findnext dsc:adt_restCabe_ctx nolock
	loop
	cds endselect dsc:adt_restCabe_ctx
	adt_rest_regHab = l_rest_regHab
	adt_rest_regTipo = l_rest_regTipo
	adt_rest_prvHab = l_rest_prvHab
	adt_rest_prvTipo = l_rest_prvTipo
	adt_rest_sucHab = l_rest_sucHab
	adt_rest_sucTipo = l_rest_sucTipo
	adt_rest_cliHab = l_rest_cliHab
	adt_rest_cliTipo = l_rest_cliTipo
	adt_rest_upHab = l_rest_upHab
	adt_rest_upTipo = l_rest_upTipo
	adt_rest_tipoProd = aux_rest_tipoProd
END SUB

/*******/
