/****o* Pendientes de agrupación/OFB:post:MISCvalidaRestDet
* NOMBRE
*   OFB:post:MISCvalidaRestDet
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCvalidaRestDet
	local bError like siaf:i
	local l_cliTipo like post:cli_tipo

	call post:MISCvalidaProd
	if (retval != 0)
		return retval
	endif

	; primero valido clave foránea (no hace falta hacerlo si es una baja.
	if (adt_mdata_esBaja != "S")
		call post:CDSexisteCabecera
		if (retval != 0)
			call post:MISCbuscaColumna("post:adt_rest_tipoProd")
			siaf:columnas_cl = retval
		   	fprint common:csr_string "Error de clave foránea, no existe registro correspondiente en la tabla RestProdu!"
			return -2
		endif
	endif

	; valido que si es UP solo puede ser ESP
	if (adt_rest_tipo_Rest == "UP" && adt_rest_tipoProd != "ESP")
		call post:MISCbuscaColumna("post:adt_rest_tipoProd")
		siaf:columnas_cl = retval
	   	fprint common:csr_string "Las restricciones para UP solo pueden ser de especies!"
		return -2
	endif

	; primero valido tamaños y tipos de datos.
	bError = false
	select (post:adt_rest_tipo_Rest)
		case "REG"
			call post:MISCvalidoTipoLong(adt_rest_claveRest, "N", 99, 1, 0)
			bError = bError || (retval != 0)
			break
		case "PRV"
			call post:MISCvalidoTipoLong(adt_rest_claveRest, "A", 1, 1, 0)
			bError = bError || (retval != 0)
			break
		case "SUC"
			call post:MISCvalidoTipoLong(adt_rest_claveRest, "A", 5, 1, 0)
			bError = bError || (retval != 0)
			break
		case "UP"
			call post:MISCvalidoTipoLong(adt_rest_claveRest, "A", 5, 1, 0)
			bError = bError || (retval != 0)
			break
		case "CLI"
			call post:MISCvalidoTipoLong(adt_rest_claveRest, "N", 9, 1, 0)
			bError = bError || (retval != 0)
			break
	end select

	if (bError)
		call post:MISCbuscaColumna("post:adt_rest_claveRest")
		siaf:columnas_cl = retval
	   	fprint common:csr_string "Error en los tipos de datos o longitudes!"
	   	return -2
	endif

	; después valido que existan
	select (post:adt_rest_tipo_Rest)
		case "REG"
	    	CDS SELECT FROM DSC:region_tbl BECOMES DSC:post:CargaMasiva_ctx \
	    	where  adt_region_cod == adt_rest_claveRest
	    	fprint common:csr_string "El código de región ingresado no existe!"
			break
		case "PRV"
	    	CDS SELECT FROM DSC:adt_pcia_table BECOMES DSC:post:CargaMasiva_ctx \
	    	where  post:adt_pcia_cod == adt_rest_claveRest
	    	fprint common:csr_string "El código de provincia ingresado no existe!"
			break
		case "SUC"
	    	CDS SELECT FROM DSC:adt_br_table BECOMES DSC:post:CargaMasiva_ctx \
	    	 where   admin:adt_br_branch == adt_rest_claveRest
	    	fprint common:csr_string "El código de sucursal ingresado no existe!"
			break
		case "UP"
			CDS SELECT FROM DSC:cliocaUP_tbl BECOMES DSC:post:CargaMasiva_ctx \
			where 	post:NisUP == adt_rest_claveRest
	    	fprint common:csr_string "El código de cliente UP ingresado no existe!"
			break
		case "CLI"
	    	fprint common:csr_string "El código de cliente ingresado no existe!"
			l_cliTipo = adt_rest_claveRest
			PICKVERIFY l_cliTipo, PIC:post:cli_tipo
			if (retval < 0)
				call post:MISCbuscaColumna("post:adt_rest_claveRest")
				siaf:columnas_cl = retval
				return -2
			else
				return 0
			endif
			break
	end select

	CDS FINDFIRST DSC:post:CargaMasiva_ctx nolock
	if (cdsretval != 0)
		call post:MISCbuscaColumna("post:adt_rest_claveRest")
		siaf:columnas_cl = retval
		CDS ENDSELECT DSC:post:CargaMasiva_ctx
		return (-2)
	endif
	CDS ENDSELECT DSC:post:CargaMasiva_ctx
END SUB

/*******/
