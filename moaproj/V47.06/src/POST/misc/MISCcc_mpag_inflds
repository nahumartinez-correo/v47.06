/****o* Pendientes de agrupación/OFB:post:MISCcc_mpag_inflds
* NOMBRE
*   OFB:post:MISCcc_mpag_inflds
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCcc_mpag_inflds
    Local fecha_aux like fec_d

    // verifica que se hayan ingresado los campos de entrada en la 
    // pantalla de medios de pagos de cobranza de cuentas corrientes
    if (tipo_mpago.NUMCHARS == 0) then
        errmsg common:errmsg_list,"Tipo de Valor Incompleto"
        nextfield tipo_comprobante
        return (-2)        
    else
        CALL CSR:set_currentfield tipo_mpago
        call FVALtipo_mpago
        if (retval < 0)
            return (retval)
        end if
    end if

    if (tipo_mpago == 0 || tipo_mpago == 1)
        if (banco_mpago.NUMCHARS != 0 || cuenta_mpago.NUMCHARS != 0)
	    errmsg common:errmsg_list,"Datos Invalidos"
	    nextfield tipo_mpago
	    return (-2)
        end if
    end if
    if (tipo_mpago == 5)
        if (banco_mpago.NUMCHARS != 0)
	    errmsg common:errmsg_list,"Datos Invalidos"	        
	    nextfield tipo_mpago
	    return (-2)        
        end if
    end if

    // Si es un cheque
    if (post:adt_mp_admban == "S") then
	if (banco_mpago.NUMCHARS == 0) then
	    errmsg common:errmsg_list,"Codigo de Banco Incompleto"
	    nextfield banco_mpago
	    return (-2)
	else
	    CALL CSR:set_currentfield banco_mpago
	    CALL FVALbanco_mpago
            if (retval < 0)
                return (retval)
            end if	       
        end if

        //cgw:valida cuenta.
	
	CALL CSR:set_currentfield cuenta_mpago
	CALL post:FVALcta_chq_mpago
        if (retval < 0)
            nextfield cuenta_mpago
	    return (-2)
	end if

	if (cuenta_mpago.NUMCHARS == 0 || cuenta_mpago == 0) then
	    errmsg common:errmsg_list,"Nro. de Cuenta Incompleto"
	    nextfield cuenta_mpago
	    return (-2)
	end if
	
	//cgw: valido nro.cheque.
        CALL CSR:set_currentfield cheque_mpago
        CALL post:FVALchq_mpago
        if (retval < 0)
            nextfield cheque_mpago
	    return (-2)
        end if

	//if (cheque_mpago.NUMCHARS == 0 || cheque_mpago == 0) then
	//    errmsg common:errmsg_list,"Nro. de Cheque Incompleto"
	//    nextfield cheque_mpago
	//    return (-2)
	//end if

        if (fec_e.NUMCHARS == 0) then
	    errmsg common:errmsg_list,"Fecha de Emision Incompleta"
	    nextfield fec_e
	    return (-2)
	end if        

        /* cgw:se elimina el clearing 
        if (tes:clearing.NUMCHARS == 0) then
	    errmsg common:errmsg_list,"Clearing Incompleto"
	    nextfield fec_e
	    return (-2)
	else
	    CALL CSR:set_currentfield tes:clearing
	    call FVALclearing_cheq
            if (retval < 0)
                return (retval)
            end if	    	
	end if
        */

        call csr:date_compare(fec_e,common:system_date)
        if (retval == 1) then /* fecha de emision mayor a la fecha del sistema */
            MSGBOX "La fecha de Emisión debe ser menor o igual a la fecha actual",0x00,"ERROR"
            nextfield fec_e
            return -2
        end if 		    	    	    

        unprotfield fec_d
        adt_mp_cod = tipo_mpago
        CALL post:CDSadt_MedPago_load        
        IF (adt_mp_diferido == "S")
            CALL CSR:set_currentfield fec_d
            CALL post:FVALfecha_vto_CC
            if (retval == -2) then
        	nextfield fec_d
        	return (-2)
            end if
            /*
            if (fec_d.NUMCHARS == 0) then
	        errmsg common:errmsg_list,"Fecha de Vencimiento incompleta"
	        nextfield fec_d
	        return (-2)
	    end if

            call csr:date_compare(fec_d,fec_d)
            if (retval < 0) then
                errmsg LST:common:errmsg_list,"FECHA INVALIDA"
                nextfield fec_d
                return (-2)
            end if

            call csr:date_compare(fec_d,common:system_date)
            if (retval == 2) then // fecha de vencimiento menor a la fecha del sistema 
                errmsg LST:common:errmsg_list,"FECHA INVALIDA"
                nextfield fec_d
                return (-2)
            end if 	*/
            
            /*
            call csr:date_add(common:system_date,5,"d",fecha_aux)
            call csr:date_compare(fec_d,fecha_aux)
            If (RetVal == 2) //fecha de vencimiento menor a 5 dias que la fecha del sistema
	        MSGBOX "Fecha de Vencimiento invalida",0x00,"ERROR"
	        nextfield fec_d
	        return (-2)
            End IF
            */
            /*
            call csr:date_compare(fec_d,common:system_date)
            If (retval == 2 || retval == 0)  //fecha vto es menor o igual a fecha proceso
	        MSGBOX "Fecha de Vencimiento invalida",0x00,"ERROR"
	        nextfield fec_d
	        return (-2)
            End IF */
            /*

            call csr:date_add(common:system_date,1,"y",fecha_aux)
            call csr:date_compare(fecha_aux ,fec_d)
            If (RetVal == 2) //fecha de vencimiento mayor a 1 años que la fecha del sistema
	        MSGBOX "Fecha de Vencimiento invalida",0x00,"ERROR"
	        nextfield fec_d
	        return (-2)
            End If */
        	/*
            call csr:date_compare(fec_e,fec_d)
            if (retval == 1 || retval == 0) then // fecha de emision es mayor o igual a la fecha de vencimiento
                errmsg LST:common:errmsg_list,"FECHA INVALIDA"
                nextfield fec_e
                return (-2)
            end if 	   */     
        else
            clearfield fec_d
            refresh fec_d
            protfield fec_d
        END IF
        
        call csr:date_compare(fec_e,fec_e)
        if (retval < 0) then
            errmsg LST:common:errmsg_list,"Fecha de emisión inválida"
            nextfield fec_e
            return -2
        end if
		
        call  csr:date_subtract(common:system_date,fec_e)
	If (adt_mp_diasatras < RetVal)
	    MSGBOX "Fecha de Emisión inválida",0x00,"ERROR"
	    return -2
	End IF
	/* Fecha de emision no anterior a una año
	call csr:date_add(common:system_date,-1,"y",fecha_aux)
	call csr:date_compare(fecha_aux,fec_e)
	If (RetVal == 1)
	    MSGBOX "Fecha de Emision Invalida",0x00,"ERROR"
	    return -2
	End IF

	//fecha_e <= common:systema_date <= fecha_e+25
	call csr:date_add(fec_e,25,"d",fecha_aux)
	call csr:date_compare(common:system_date,fecha_aux)
	If (RetVal == 1)
            MSGBOX "Fecha de Emision Invalida",0x00,"ERROR"
	    return -2
	End IF*/	    
	    
    end if

    if (importe_mpago.NUMCHARS == 0 || importe_mpago == 0) then
        errmsg common:errmsg_list,"Importe del Valor Incompleto"
        nextfield importe_mpago
        return (-2)
    end if

    if (post:adt_mp_int == "S")
	if (cuenta_mpago.NUMCHARS == 0 || cuenta_mpago == 0) then
            errmsg common:errmsg_list,"Falta ingresar el Codigo Interno"
            nextfield importe_mpago
            return (-2)
        else
            let siaf:moneda = post:adt_mp_cod
            CALL tes:CDSexiste_codint(cuenta_mpago)
            if (retval < 0)
                errmsg common:errmsg_list,"Codigo Interno Inexistente"
                return (-2)
            end if
            clearfield siaf:moneda
        end if
    end if

    // Para los itemizados exijo nro de comprobante
    if (post:adt_mp_adm == "I")
	if (cheque_mpago.NUMCHARS == 0 || cheque_mpago == 0) then
	    errmsg common:errmsg_list,"Nro. de Comprobante Incompleto"
	    nextfield cheque_mpago
	    return (-2)
	end if
    end if

END SUB

/*******/
