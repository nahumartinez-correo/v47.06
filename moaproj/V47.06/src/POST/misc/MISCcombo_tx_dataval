/****o* Pendientes de agrupación/OFB:post:MISCcombo_tx_dataval
* NOMBRE
*   OFB:post:MISCcombo_tx_dataval
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCcombo_tx_dataval
local loc_retval 	like lib:err_retval
local loc_quantity	like post:cantidad

//cgw: busco la cantidad de combos que se quiere vender...
call post:CDScombo_qnt_2sell(op:op_operator_id,PresNro,adt_cb_cod,combo_nro)
if (retval > 0) then
	loc_quantity = retval
else
	// si algo salio mal... asumo que se vende uno
	loc_quantity = 1
endif

let loc_retval = 0

if (adt_concb_usa_tarif == "S") then
	select (post:adt_concb_tipo)
		case "PO"
		case "EN"
			call post:FVALdestino
			let loc_retval = loc_retval + retval
			post:cantidad = adt_concb_cantidad * loc_quantity //cgw:cantidad a vender
			call post:FVALpn_cantidad
			let loc_retval = loc_retval + retval
			post:peso_en_grs = adt_rpdcb_hasta 
			post:peso_en_kgs = adt_rpdcb_hasta 
			if (post:adt_serv_pesable == "T") then
				call post:FVALpeso2
				let loc_retval = loc_retval + retval
			endif
			break
		case "MO"
			// monetarios siempre colectan
			break
		case "TE"
			call  tele:FVALcomboServTele // tele:FVALtipo_serv
			let loc_retval = loc_retval + retval
			let post:destino = adt_rpdcb_destino
			call tele:FVALdestino
			let loc_retval = loc_retval + retval
			call tele:FVALcant_palabras 
			let loc_retval = loc_retval + retval
			//let post:cantidad = post:adt_concb_cantidad
			post:cantidad = adt_concb_cantidad * loc_quantity //cgw:cantidad a vender
			call csr:set_currentfield post:cantidad
			call tele:FVALcantidad 
			let loc_retval = loc_retval + retval
			break
	end select
		
	if (adt_concb_usa_opc == "S") then
		// leo de la tabla OpcServCombo
	endif
	
	// la venta de combo es sin Bienes de Cambio
	clearfield post:adt_serv_usa_caja
	clearfield post:adt_serv_prodvs
	clearfield post:adt_serv_espv_cod
	clearfield post:adt_serv_espv_subcod
	clearfield post:adt_serv_prodvsCC
	clearfield post:adt_serv_usa_formu
	clearfield codesp_prod
	clearfield subcod_prod
	clearfield prod_serv
	clearfield codesp_serv
	clearfield subcod_serv
	
else

	select (post:adt_concb_tipo)
	case "EV"
		call tes:FVAL_Especie_ent
		let loc_retval = loc_retval + retval
		let tes:adt_evaux_subcod = adt_concb_interno
		call tes:FVALsubesp_mov_vta
		let loc_retval = loc_retval + retval
		call csr:set_currentfield FLD:tes:adt_evaux_cantidad
		//let tes:adt_evaux_cantidad = adt_concb_cantidad
		let tes:adt_evaux_cantidad = adt_concb_cantidad * loc_quantity //cgw:cantidad a vender
		call tes:FVALcant_venta_ev
        let loc_retval = loc_retval + retval
		call tes:FVALimporte_ev
		let loc_retval = loc_retval + retval
				
		if (tes:adt_evaux_importe == 0 && tes:adt_evaux_cantidad == 0) then
	        //cgw: tes:adt_evaux_importe y tes:adt_evaux_cantidad fueron inicializados por falta
	        //     de stock, por lo tanto no se debe agregar registros a la tabla AuxEspV.
	        retval = -1
	    else
	    	call tes:PBauxesp_agregar_vta
        endif
		let loc_retval = loc_retval + retval
		break
	case "PV"
		call post:FVALvta_pv_cod
		let loc_retval = loc_retval + retval
		//let post:cantidad2 = adt_concb_cantidad
		let post:cantidad2 = adt_concb_cantidad * loc_quantity //cgw:cantidad a vender
		call post:FVALvta_pv_cantidad
		let loc_retval = loc_retval + retval
		break
	end select

endif

// pa' despue'
if (adt_concb_principal != "S") then
	clearfield post:adt_serv_formfiscal
	clearfield post:PreDForFis
endif

if (loc_retval < 0) then
	return (-2)
endif

END SUB

/*******/
