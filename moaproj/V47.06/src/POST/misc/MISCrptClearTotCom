/****o* Pendientes de agrupación/OFB:post:MISCrptClearTotCom
* NOMBRE
*   OFB:post:MISCrptClearTotCom
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCrptClearTotCom(l_totales)
LOCAL l_cli_tipo like post:cantidad
LOCAL indice like post:cantidad
	SELECT (l_totales)
		CASE 1
			indice = PL_GETITEM
			IF (post:cant_cli_tipo > 0)
				CALL csr:myPickcontrol(DSC:post:tiposDeClientes,common:csr_string,indice)
			END IF
			WHILE ((indice - PL_GETITEM) < post:cant_cli_tipo )
				l_cli_tipo = SUBSTR(common:csr_string,0,1)
        		CLEARFIELD raux_cant_totPorTx[l_cli_tipo]
				CLEARFIELD raux_imp_totPorTx[l_cli_tipo]
				indice = indice + 1
				CALL csr:myPickcontrol(DSC:post:tiposDeClientes,common:csr_string,indice)
			END WHILE
			CLEARFIELD raux_ccons_totPorTx
			CLEARFIELD raux_icons_totPorTx
			CLEARFIELD raux_icons_totPorAux
		CASE 2
			indice = PL_GETITEM
			IF (post:cant_cli_tipo > 0)
				CALL csr:myPickcontrol(DSC:post:tiposDeClientes,common:csr_string,indice)
			END IF
			WHILE ((indice - PL_GETITEM) < post:cant_cli_tipo )
				l_cli_tipo = SUBSTR(common:csr_string,0,1)
				CLEARFIELD raux_cant_totPorCod[l_cli_tipo]
				CLEARFIELD raux_imp_totPorCod[l_cli_tipo]
				indice = indice + 1
				CALL csr:myPickcontrol(DSC:post:tiposDeClientes,common:csr_string,indice)
			END WHILE
			CLEARFIELD raux_ccons_totPorCod
			CLEARFIELD raux_icons_totPorCod
			BREAK
	END SELECT
END SUB

/*******/
