/****o* Pendientes de agrupación/OFB:post:MISCCalcChkSum
* NOMBRE
*   OFB:post:MISCCalcChkSum
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

/* Esta rutina calcula un checksum usando el valor ingresado en Vaux y
   acumulandolo en itemcheck
   En la rutina que mando el correo, Vaux era un array de varios strings
     ej:	vaux[1] = CC0023929387
	     	vaux[2] = EP0434242344
		vaux[3] = CA3453459387
		vaux[4] = EP0344545487
	y la rutina procesaba todo el array devolviendo el valor del checksum final.
	Creo que para lo que la vamos a usar nosotros, es mejor asi como la arme
	Recorremos la DetTmp, y por cada cadena que tenemos que procesar, llamamos
	a esta rutina, sin resetear el valor de itemcheck, que es la variable que
	contiene el checksum. */
/* Jul. ´98 */
SUB post:MISCCalcChkSum(Vaux, Vaux_len, itemcheck)
  LOCAL indice like  post:cantid_impre
  LOCAL pos like  post:cantid_impre
  LOCAL pos_aux like  post:cantid_impre
  LOCAL cadena_aux like common:csr_string
  let pos = 0
  do
     let potencia = 1
     let pos = pos + 1
     let pos_aux = pos - 1
     move substr(Vaux,pos_aux,1) to cadena_aux
     call MISC_ASCII( cadena_aux )
     let checkeo = retval
     let indice = 0
     do
        let indice = indice + 1
        if (indice > 1) then
          potencia = potencia * 2
        endif
        if (indice > pos_aux) then
            break
        endif
     loop
     let checkeo = checkeo * potencia
     if (checkeo>65535) then
        let checkeo = checkeo | (checkeo/ 65535)
        let checkeo = checkeo & 65535
     endif
     let itemcheck = itemcheck ^ checkeo
     if (itemcheck > 65535) then
        let itemcheck = itemcheck - 65535
     endif
     if (pos >= Vaux_len) then
        break
     endif
  loop
  return (itemcheck)
END SUB

/*******/
