/****o* Pendientes de agrupación/OFB:post:MISCwri_beneficios
* NOMBRE
*   OFB:post:MISCwri_beneficios
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCwri_beneficios

LOCAL aux_operativo LIKE post:adt_benTmp_operativo
LOCAL aux_cliente LIKE post:adt_benTmp_cli
LOCAL aux_tipodoc LIKE post:adt_benTmp_pag_tipoD
LOCAL aux_nrodoc LIKE post:adt_benTmp_pag_NroD
LOCAL aux_AyN_pag LIKE post:adt_benTmp_nombre
LOCAL aux_cantidad LIKE common:local_int
LOCAL aux_importe LIKE siaf:ImporteSinIva
LOCAL aux_estado LIKE post:adt_benTmp_estado
LOCAL aux_tot_cant LIKE common:local_int
LOCAL aux_tot_imp  LIKE siaf:ImporteSinIva
LOCAL line_csr_aux        LIKE common:csr_string_aux
   
    CDS ENDSELECT "BenefTmp_ctx"
    CDS SELECT FROM "BenefTmp" BECOMES "BenefTmp_ctx" where \
    adt_benTmp_PresNro == post:PresNro && \
    (adt_benTmp_estado == "JS" || \
    adt_benTmp_estado == "JX" || \
    adt_benTmp_estado == "JY") \
    sort "BenOpPag"
    
    CDS FINDFIRST "BenefTmp_ctx" NOLOCK

    lib:err_retval = CDSRETVAL
    IF (cdsretval == -801)
        CDS ENDSELECT "BenefTmp_ctx"
        CALL siaf:MISCclose_lis
        RETURN (-2)
    END IF  
    WHILE (lib:err_retval == 0)
        
        CDS EXTRACT "BenefTmp_ctx" \
        adt_benTmp_operativo \
        adt_benTmp_benef \
        adt_benTmp_pag_tipoD \
        adt_benTmp_pag_NroD \
        adt_benTmp_pag_nombr \
        adt_benTmp_pag_apell \
        adt_benTmp_importe \
        adt_benTmp_cli \
        adt_benTmp_cli_desc \
        adt_benTmp_estado \
        adt_benTmp_desde \
        adt_benTmp_hasta
        
        IF (aux_estado != adt_benTmp_estado) THEN

            IF (aux_operativo != "") THEN
                FPRINT common:csr_string, "     %-2.2s   %-11.11s  %-41.41s     %4.4s  %14.14e", aux_tipodoc, aux_nrodoc, aux_AyN_pag, aux_cantidad, aux_importe
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                common:csr_string = "       "
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)
               //PS 10969 IMPRIMO TOTALES
  						common:csr_string = "       "
					    CALL tes:MISCwrite_file1(1,fld:common:csr_string)

					    FPRINT common:csr_string, "%-s   %4.4s %-s  %14.14e",  "CANTIDAD TOTAL:", aux_tot_cant,"IMPORTE TOTAL:",aux_tot_imp
					    
					    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
					  	common:csr_string = "       "
					    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
					    common:csr_string = "       "
					    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
					    common:csr_string = "       "
					    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
            END IF
            
            //imprimo el título del listado     
            IF (adt_benTmp_estado == "JS") THEN
                //JS: asignados al pagador
                FPRINT common:csr_string, "BENEFICIOS ASIGNADOS AL PAGADOR"
								 CALL tes:MISCwrite_file1(1,fld:common:csr_string) 
                FPRINT common:csr_string, "-------------------------------"
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)               
            ELSE
                IF (adt_benTmp_estado == "JX") THEN
                    //JX: pagados
                    FPRINT common:csr_string, "BENEFICIOS PAGADOS"
                     CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                    FPRINT common:csr_string, "------------------"
                    CALL tes:MISCwrite_file1(1,fld:common:csr_string)                   
                ELSE
                    IF (adt_benTmp_estado == "JY") THEN
                        //JY: no pagados 
                        FPRINT common:csr_string, "BENEFICIOS NO PAGADOS"
                          CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                        FPRINT common:csr_string, "---------------------"
                        CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                    END IF                          
                END IF
            END IF
                        
            //Imprimo el cliente y el operativo
            common:csr_string = "       "
            CALL tes:MISCwrite_file1(1,fld:common:csr_string)
            FPRINT common:csr_string, "Cliente:   %-10.10s", adt_benTmp_cli
            CALL tes:MISCwrite_file1(1,fld:common:csr_string)           
            FPRINT common:csr_string, "Operativo: %-20.20s   Desde: %e Hasta: %e", \
            adt_benTmp_operativo, adt_benTmp_desde, adt_benTmp_hasta
            CALL tes:MISCwrite_file1(1,fld:common:csr_string)               
            
            //cargo las variables
            aux_cantidad = 1
            aux_importe = adt_benTmp_importe
            aux_cliente = adt_benTmp_cli
            aux_operativo = adt_benTmp_operativo
            aux_tipodoc = adt_benTmp_pag_tipoD
            aux_nrodoc = adt_benTmp_pag_NroD        
            aux_estado = adt_benTmp_estado
            call csr:trimfield (adt_benTmp_pag_nombr)
            call csr:trimfield (adt_benTmp_pag_apell)
            fprint aux_AyN_pag "%s %s" adt_benTmp_pag_apell, adt_benTmp_pag_nombr
            //PS 10969 - SETEO CANTIDAD E IMPORTE TOTAL
            aux_tot_cant =  aux_cantidad 
            aux_tot_imp =  aux_importe 
            //imprimo el encabezado
            FPRINT common:csr_string, "    TIPO  NUMERO       APELLIDO Y NOMBRE                         CANTIDAD         IMPORTE"
            CALL tes:MISCwrite_file1(1,fld:common:csr_string)                   
         
            
        ELSE            
            IF (aux_operativo != adt_benTmp_operativo) THEN
            
                IF (aux_operativo != "") THEN
                    FPRINT common:csr_string, "     %-2.2s   %-11.11s  %-40.40s      %4.4s  %14.14e", aux_tipodoc, aux_nrodoc, aux_AyN_pag, aux_cantidad, aux_importe
                    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                END IF
                
                //Imprimo el cliente y el operativo
                common:csr_string = "       "
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)
                FPRINT common:csr_string, "Cliente:   %-10.10s", adt_benTmp_cli
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)           
                FPRINT common:csr_string, "Operativo: %-20.20s   Desde: %e Hasta: %e", \
                adt_benTmp_operativo, adt_benTmp_desde, adt_benTmp_hasta
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)               
            
                //cargo las variables
                aux_cantidad = 1
                aux_importe = adt_benTmp_importe
                aux_cliente = adt_benTmp_cli
                aux_operativo = adt_benTmp_operativo
                aux_tipodoc = adt_benTmp_pag_tipoD
                aux_nrodoc = adt_benTmp_pag_NroD        
                call csr:trimfield (adt_benTmp_pag_nombr)
                call csr:trimfield (adt_benTmp_pag_apell)
                fprint aux_AyN_pag "%s %s" adt_benTmp_pag_apell, adt_benTmp_pag_nombr
                //PS  10969 -  ACUMULO CANTIDAD E IMPORTE TOTAL (DE DISTINTOS OPERATIVOS)
		            aux_tot_cant = aux_tot_cant + aux_cantidad 
    		        aux_tot_imp =  aux_tot_imp + aux_importe    
                //imprimo el encabezado
                FPRINT common:csr_string, "    TIPO  NUMERO       APELLIDO Y NOMBRE                         CANTIDAD         IMPORTE"
                CALL tes:MISCwrite_file1(1,fld:common:csr_string)           
               
            ELSE
                //es el mismo cliente, operativo y pagador
                aux_cantidad = aux_cantidad  + 1
                aux_importe = aux_importe + adt_benTmp_importe
                //PS  10969 -  CANTIDAD E IMPORTE TOTAL
		            aux_tot_cant = aux_tot_cant + 1 
    		        aux_tot_imp =  aux_tot_imp + adt_benTmp_importe 
            END IF
        END IF
                
        CDS FINDNEXT "BenefTmp_ctx" NOLOCK
        lib:err_retval = CDSRETVAL
        
    END WHILE
    
    
    //Imprimo el pagador
    FPRINT common:csr_string, "     %-2.2s   %-11.11s  %-40.40s      %4.4s  %14.14e", aux_tipodoc, aux_nrodoc, aux_AyN_pag, aux_cantidad, aux_importe
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
	
	
	   //PS 10969 IMPRIMO TOTALES
  common:csr_string = "       "
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    FPRINT common:csr_string, "%-s   %4.4s %-s  %14.14e",  "CANTIDAD TOTAL:", aux_tot_cant,"IMPORTE TOTAL:",aux_tot_imp
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
  common:csr_string = "       "
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
 	common:csr_string = "       "
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    common:csr_string = "FIRMA:"
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    common:csr_string = "ACLARACION:"
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    common:csr_string = "DOCUMENTO:"
    CALL tes:MISCwrite_file1(1,fld:common:csr_string)
    
	
	
    CDS ENDSELECT "BenefTmp_ctx"
    
    call siaf:MISCclose_lis
    if ( retval < 0 )
        return -2
    end if

FYIMSG CLEAR

END SUB

/*******/
