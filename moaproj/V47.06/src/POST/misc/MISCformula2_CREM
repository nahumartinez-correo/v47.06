/****o* Pendientes de agrupación/OFB:post:MISCformula2_CREM
* NOMBRE
*   OFB:post:MISCformula2_CREM
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCformula2_CREM(p_impCremResultAcum,p_comCremAcum)
local x like siaf:i
local imp_crem_result like giros:ImporteNeto
local imp_crem_result_acum like giros:ImporteNeto
local l_comision like post:tarifa
local l_acrec like post:tarifa
local com_crem_acum like giros:Comision_fld
local mensaje like common:csr_string
local cadena like common:csr_string
    
    x = 0
    while (x < 10)
        if (track[x].numchars > 0 && importe_crem[x] > 0) then
            ;Calculo comisión
            post:adt_tarif_desde = importe_crem[x]
            CALL post:MISCactualizo_tarifa
            if (retval < 0) then
                return -2
            end if
            l_comision = post:tarifa
            if (post:adt_tarif_modo == "D") then
                fixed2int = l_comision
                Call csr:pat_it(fixed2int,cadena)
                Call post:MISCsaco_ceros_der(cadena,cadena.numchars,mensaje)
                fprint giros:formuCalc[x] "%s %s --> %s$" importe_crem[x],post:adt_tarif_um, mensaje
            else
               /* CALL post:MISCformulaDeCalculo(importe_crem[x],post:adt_tarif_modo,\
                                           post:tarif_aux, post:adt_tarif_fijo, \
                                           l_comision,post:adt_tarif_um)*/
                                           
                  CALL MISCformulaDeCalc2(importe_crem[x],post:adt_tarif_modo,\
                                           post:tarif_aux, post:adt_tarif_fijo, \
                                           l_comision,post:adt_tarif_um)
                                           
            
                giros:formuCalc[x] = formuCalc
            end if
            clearfield formuCalc
            
            INIT 22,1
            ;calculo acrecentamiento sobre la comisión
            l_acrec = (l_comision * post:adt_acreperc_aliacre / 100)
            ;Obtengo el importe y cantidad de giros
            imp_crem_result = importe_crem[x] - l_comision - l_acrec
            if (imp_crem_result <= 0) then
                fprint mensaje "El importe crem de la pieza %s, no permite el cobro de comisiones.\n",track[x]
                MSGBOX mensaje,0x00,"Error"
                return -2
            end if
            INIT 22,0
            
            com_crem_acum = com_crem_acum + l_comision
            imp_crem_result_acum = imp_crem_result_acum + imp_crem_result
        end if
        if (x < 9) then
            if (track[x + 1].numchars == 0) then 
                break
            end if    
        else
            break
        end if   
        x = x + 1
    end while
    p_impCremResultAcum = imp_crem_result_acum
    p_comCremAcum = com_crem_acum
END SUB
/*******/
