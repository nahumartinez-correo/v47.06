/****o* Pendientes de agrupación/OFB:post:MISCexisteDenom
* NOMBRE
*   OFB:post:MISCexisteDenom
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCexisteDenom(mp,imp)
	local Lmensaje	like common:csr_string
	local Lauxiliar	like siaf:i
	local Lencontre	like siaf:i
	local Lidx	like siaf:idx
	local Lidx2 like siaf:idx
	local Lidx3 like siaf:idx
	local Lresta like siaf:importe
	local Lmin like siaf:importe
	local Lmax like siaf:importe
	local lImporte like siaf:importe

	lImporte = imp

	if (lImporte < 0) then
		lImporte = lImporte * -1
	end if

	// valido que el importe ingresado sea multiplo de alguna de las denominaciones del bono...
	CALL CSR:proc_list(F_CLEAR,LST:tes:LISTden_mon_flds)
	let tes:den_moneda = mp
	call tes:CDSden_mon_load
	if (retval < 0) then
		return (false)
	end if

	/* Si estoy en un deposito en caja buzon, elimino del vector las denominaciones no permitidas */
	if (siaf:codigo_siaf == 8930 || siaf:codigo_siaf == 8940) then
		call tes:MISCElimino_den
		if (retval < 0) then
			return (false)
		end if
	end if
	
	let Lidx = 0
	Lencontre = 0
	do
	   	let Lauxiliar = lImporte % tes:den_valor[Lidx]
	   	if (Lauxiliar == 0 && tes:den_valor[Lidx] > 0) then
			let Lencontre = 1
	   		break
	   	end if
	   	let Lidx = Lidx + 1
	   	if (Lidx > 13 || tes:den_valor[Lidx] <= 0) then
			break
	   	end if
	loop

	let Lidx = 0
	let Lmin = tes:den_valor[Lidx]
	let Lmax = tes:den_valor[Lidx]
	do
		if (tes:den_valor[Lidx] < Lmin && tes:den_valor[Lidx] > 0) then
			let Lmin = tes:den_valor[Lidx]
		endif
		if (tes:den_valor[Lidx] > Lmax) then
			let Lmax = tes:den_valor[Lidx]
		endif
		let Lidx = Lidx + 1
		if (Lidx == 13) then
			break
		endif
	loop

	if (!Lencontre) then
		// FGB 23.4.2002: el importe ingresado no es multiplo...
		// veo si se puede construir con las denominaciones existentes (PS 5498)
		Lidx3 = 1
		do
			Lidx = 0
			do
				if (lImporte > (tes:den_valor[Lidx] * Lidx3)) then
					let Lresta = lImporte - (tes:den_valor[Lidx] * Lidx3)
					let Lidx2 = Lidx + 1
					do
						if (Lidx2 > 13 || tes:den_valor[Lidx2] <= 0) then
							break
						endif
						let Lauxiliar = Lresta % tes:den_valor[Lidx2]
						if (Lauxiliar == 0 && tes:den_valor[Lidx2] > 0) then
							let Lencontre = 1
							let Lidx = 13 // <- p' salir del loop externo.
							break
						endif
						let Lidx2 = Lidx2 + 1
					loop
				endif
				if (Lidx >= 13 || tes:den_valor[Lidx] <= 0) then
					break
				endif
				let Lidx = Lidx + 1
			loop
			let Lidx3 = Lidx3 + 1
			if (((Lmin * Lidx3) > lImporte) || (Lencontre)) then
				break
			endif
		loop
	endif

	if (!Lencontre) then
		// FGB 23.4.2002: el importe ingresado no es multiplo...
		// veo si se puede construir con las denominaciones existentes (PS 5498)
		Lidx3 = 1
		do
			Lidx = 13
			do
				if (lImporte > (tes:den_valor[Lidx] * Lidx3)) then
					let Lresta = lImporte - (tes:den_valor[Lidx] * Lidx3)
					let Lidx2 = Lidx - 1
					do
						if (Lidx2 < 0) then
							break
						endif
						if (tes:den_valor[Lidx2] <= 0) then
							break
						endif
						let Lauxiliar = Lresta % tes:den_valor[Lidx2]
						if (Lauxiliar == 0 && tes:den_valor[Lidx2] > 0) then
							let Lencontre = 1
							let Lidx = (-1) // <- p' salir del loop externo.
							break
						endif
						let Lidx2 = Lidx2 - 1
					loop
				endif
				let Lidx = Lidx - 1
				if (Lidx < 0) then
					break
				endif
			loop
			let Lidx3 = Lidx3 + 1
			if (((Lmin * Lidx3) > lImporte) || (Lencontre)) then
				break
			endif
		loop
	endif


	if (!Lencontre) then
		return (false)
	else
		return (true)
	endif


END SUB

/*******/
