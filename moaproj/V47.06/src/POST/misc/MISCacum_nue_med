/****o* Pendientes de agrupación/OFB:post:MISCacum_nue_med
* NOMBRE
*   OFB:post:MISCacum_nue_med
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

/*Voy acumulando en un picklist, por moneda, el importe total de las transacciones
a las cuales se les cambia el medio de pago por cheque o tarjeta. Esto me sirve para luego
chequear que no queden negativas - Gabriel Falciola*/
SUB post:MISCacum_nue_med(mone_aux,afecta,importe)
local mone_acum like siaf:moneda
local mone_aux2 like siaf:moneda
local imp_acum like post:tmpl_importe
local imp_aux like post:tmpl_importe
local indice like siaf:i
local afecta_aux like siaf:afecta_efectivo

	indice = PL_GETITEM
	do
		call csr:myPickcontrol(dsc:pic_acum_captura,common:csr_string,indice)
		if (retval < 0)
			break
		end if
		mone_acum = substr(common:csr_string,0,2)
		afecta_aux = substr(common:csr_string,17,1)
		mone_aux2 = mone_aux
		if (mone_acum == mone_aux2 && afecta == afecta_aux)
			imp_acum = substr(common:csr_string,3,13)
			imp_aux = importe
			imp_acum = imp_acum + imp_aux
			indice = indice - PL_GETITEM
			fprint common:csr_string "%013.013s" imp_acum
			call csr:f_samodpl dsc:pic_acum_captura,common:csr_string,common:csr_string,3,indice
			return (0)
		end if
		indice = indice + 1
	loop
	fprint common:csr_string "%02.02s %013.013s %1s" mone_aux importe afecta
	call csr:f_saaddpl dsc:pic_acum_captura common:csr_string
END SUB

/*******/
