/****o* Mensajería/OFB:post:MISCresponseMsgHost2
* NOMBRE
*   OFB:post:MISCresponseMsgHost2
* DESCRIPCION
*   Esta OFB se encarga de esperar los mensajes de respuesta del host2 y 
*   devolver una respuesta en base a ello.
*	La respuesta la espera en la variable post:CodRespuesta_host2.
* ENTRADAS
*   El parámetro pWait puede ser true o false. True indica que se tiene que quedar
*	esperando un segundo mensaje.
* SALIDAS
*	Devuelve los siguientes retval:
*   0 APROBADA
*	1 PROCESO_NO_ENCONTRADO
*	2 PARAMETROS_INCORRECTOS	
*	3 PROCESO_CORRIO_CON_ERRORES
*	4 PROCESO_BLOQUEADO
*  -2 SIN_RESPUESTA_DEL_HOST (indica que estuvo esperando un mensaje y se perdió la comunicación)
* IMPACTOS
*   La modificación erronea puede producir que no se ejecuten los scripts
* REFERENCIADO POR
*   tes:MISCenv_esp_total, post:MISCverif_bloqNovTT, post:MISCenv_stockHist
*	post:MISCenv_NovTT, post:MISCenv_merch_total, post:MISCenv_jnl_total
*	post:MISCenv_Excep, tes:MISCLanzaProceso
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/

#include "postmisc.h"

SUB post:MISCresponseMsgHost2(pWait)
local ESPERA LIKE common:csr_string
local l_host LIKE hcomm:host1
	move pWait to ESPERA
	do
		select (CodRespuesta_host2)
			case APROBADA
				if (ESPERA == "true") then
					CodRespuesta_host2 = ESPERANDO_MENSAJE
					move "false" to ESPERA
					;dprint "ESPERA\n"
					COMM WAITFORMSG NO_RESET_ALLOWED
				else
				    ;dprint "APROBADA\n"
					return APROBADA
				end if
				break  
	        case PROCESO_NO_ENCONTRADO
	        	return PROCESO_NO_ENCONTRADO
	        	break
	        case PARAMETROS_INCORRECTOS
	        	return PARAMETROS_INCORRECTOS
	        	break
	        case PROCESO_CORRIO_CON_ERRORES
	        	return PROCESO_CORRIO_CON_ERRORES
	        	break
	        case PROCESO_BLOQUEADO
	        	return PROCESO_BLOQUEADO
	        	break
	        case ESPERANDO_MENSAJE
	        	if (lib:stat_host2 == dsc:hcomm:host_down || \
	        	 	lib:stat_host2 == dsc:hcomm:host_unready) then
	        		return SIN_RESPUESTA_DEL_HOST
	        	end if
	        	comm waitformsg DEFAULT_WAIT_TIME
	        	if (commretval == RESET_OUT || commretval == TIMED_OUT)
					return SIN_RESPUESTA_DEL_HOST
				end if
	        	break
	    end select
	loop
END SUB

/*******/
