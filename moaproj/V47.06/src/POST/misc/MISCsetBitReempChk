/****o* Tratamiento de Cheques/OFB:post:MISCsetBitReempChk
* NOMBRE
*   OFB:post:MISCsetBitReempChk
* DESCRIPCION
*   Rutina que setea los bits de envio del mensaje de Reemplazo de Cheque (997009)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:SENDreempChk
* DOCUMENTACION
*   http://jira.sibs.net/jira/browse/AUT-520
* SOURCE
*/
#include "postmisc.h"


SUB post:MISCsetBitReempChk

    /*Prende los bits del Registro de Pago*/
    local l_byte like common:csr_string
    local monto_bit4 LIKE monto_chk_dif 
    local banco_ficticio like cod_banco
    local monto_bit6 LIKE monto_chk_dif 
    LOCAL idx LIKE siaf:i
    LOCAL hay_chk LIKE adt_mp_admban
    LOCAL hay_efvo LIKE adt_mp_admban
    LOCAL admban   LIKE adt_mp_admban
    LOCAL banco_nue LIKE cod_banco
    LOCAL cuenta_nue LIKE cuenta
    LOCAL cheque_nue LIKE nro_cheque
    LOCAL f_emi_nue LIKE fec_e
    LOCAL f_vto_nue LIKE fec_d
    LOCAL med_pago_nue LIKE tipo_mpago
    LOCAL clearing_nue LIKE tes:clearing
    LOCAL varl_tipo_cheq LIKE post:tipo_mpago

    //LOCAL importe???
 	
    local varl_cheque        like post:nro_cheque
    local varl_f_emision     like post:fec_d
    local varl_f_vencimiento like post:fec_e
    local varl_banco         like post:cod_banco
    local varl_cuenta        like post:cuenta
    local varl_clearing      like tes:clearing
	
    CALL MISCbitUp_1_2_3

    CLEARFIELD siaf:importe_chq
    //CLEARFIELD nro_cheque
    //CLEARFIELD fec_e
    //CLEARFIELD fec_d
    //CLEARFIELD cod_banco
    //CLEARFIELD cuenta
    siaf:i = 0
    WHILE (siaf:i < cant_valores)
	   CALL CDSmedPag_cheq_reemp(ValorPago[siaf:i],admban)
	   IF (RETVAL < 0)
	       MSGBOX "No se puede obtener los datos necesarios para el Medio de Pago elegido",0x00,"Error"
	       BREAK
	   END IF
	   IF (admban == "S")
	       hay_chk = "S"
	       //siaf:importe_chq = siaf:importe_chq + ImporteBanco[siaf:i]
	       siaf:importe_chq = ImporteBanco[siaf:i]
	       FPRINT cheque_nue "%d" NumCuenta[siaf:i]
	       //nro_cheque = NumCuenta[siaf:i]
	       f_emi_nue = Emision_Fecha[siaf:i]
	       banco_nue = BancoPago[siaf:i]
	       cuenta_nue = Bco_Cuenta[siaf:i]
	       med_pago_nue = ValorPago[siaf:i]
	       clearing_nue = chq_clearing[siaf:i]

	       IF (ValorPago[siaf:i] == 02)
		   //si es diferido le pongo la fecha de vto cargada
		   f_vto_nue = Valor_Fecha[siaf:i]
	       ELSE
		   //si no es diferido le pongo la fecha de vto = a la de emision
		   f_vto_nue = Emision_Fecha[siaf:i]
	       END IF
	   ELSE
	       hay_efvo = "S"
	   END IF
	   siaf:i = siaf:i + 1
    END WHILE	
	
    /*****************************************************************************/
    /*De acuerdo a los distintas 1/2 de pagos utilizados en el Reemplazo de
      un cheque rechazado se deben tener en cuenta qué importes mandar al switch*/	
	
    // Se paga con Efectivo + cheque || Solo cheque 
    /*IF ((hay_chk == "S" && hay_efvo == "S") || \
	  (hay_chk == "S" && hay_efvo == ""))
    //bit #4 Monto Cheque Nuevo
           monto = siaf:importe_chq * 100
    //bit #6 Monto Cheque Nuevo
	   monto2 = siaf:importe_chq * 100
    END IF


    // Solo efectivo
    IF (hay_chk == "" && hay_efvo == "S")
	//bit #4 0.00 
	CLEARFIELD monto
	//bit #6 0.00
	CLEARFIELD monto2
    END IF*/

    IF (hay_chk == "S")

	//bit #4 Monto Cheque Nuevo
	monto_bit4 = siaf:importe_chq * 100

	IF (siaf:importe_chq > post:imp_aux)
	    //bit #6
	    monto_bit6 = post:imp_aux * 100
	ELSE
	    monto_bit6 = siaf:importe_chq * 100
	END IF
		
    ELSE
	CLEARFIELD monto_bit4
	CLEARFIELD monto_bit6
    END IF

    /***************************************************************************/

    monto_chk_dif = siaf:importe_chq
    FPRINT l_byte,"%012.12d",monto_bit4
    call post:MISCprendeBit_UP(4,l_byte) 

    FPRINT l_byte,"%012.12d",monto_bit6
    call post:MISCprendeBit_UP(6,l_byte) 

    CALL MISCbitUP_7_11_12_13

    call post:MISCprendeBit_UP(24,"")	

    CALL post:MISCprendeBit_UP(28,common:sucursal_activa)

    CALL MISCbitUP_31_41_60
	
    //monto_chk_dif = monto_chk_dif * 100	
    CALL MISCarmaFirmaUP
    //monto_chk_dif = monto_chk_dif / 100	

    /*Encripto la firma*/
    CALL giros:MISCfirma

    /*Prendo el Bit en donde se enviará la Firma*/
    call post:MISCprendeBit_UP(117, common:csr_string_171)	

    if ( siaf:codigo_siaf == 99175 || siaf:codigo_siaf == 99170 )
	 varl_cheque = post:nro_cheque
	 varl_f_emision = post:fec_e
	 varl_f_vencimiento = post:fec_d
	 varl_banco = post:cod_banco
	 varl_cuenta = post:cuenta
	 varl_tipo_cheq = siaf:moneda
	 varl_clearing = tes:clearing
    else
	 varl_cheque = siaf:nro_cheque
	 varl_f_emision = siaf:f_emision
	 varl_f_vencimiento = siaf:f_vencimiento
	 varl_banco = tes:banco_codigo
	 varl_cuenta = siaf:cheqcuenta
	 varl_tipo_cheq = post:cheqrech_moneda
	 varl_clearing = tes:clearing
    end if

    fprint l_byte "%08.8d%8.8s%8.8s%03.3d%020.20s%02.2s%03.3s",\
    varl_cheque,varl_f_emision,varl_f_vencimiento,\
    varl_banco,varl_cuenta,varl_tipo_cheq,varl_clearing

    call post:MISCprendeBit_UP(118,l_byte) 		

    IF (hay_chk == "S") //Cheque
		//agregar el medio de pago al final...
		fprint l_byte \
		"%08.8d%8.8s%8.8s%03.3d%020.20s%02.02s%03.03s",cheque_nue, \
		f_emi_nue,f_vto_nue,banco_nue,cuenta_nue,med_pago_nue,clearing_nue
		
		//50295 - AUT-1028 y AUT-1233
		if (siaf:codigo_siaf == 99240 || siaf:codigo_siaf == 99242) then
			fprint l_byte \
			"%s%1.1s%3.3s%1.1s%015.15s%1.1s", l_byte \
			tes:teso_cheq_lista_giro,"REC","",post:cheq_adel_nro,post:cheq_acreditado
		else
			fprint l_byte \
			"%s%1.1s%3.3s%1.1s%015.15s%1.1s", l_byte \
			post:cheq_lista_giro,"REC","",post:cheq_adel_nro,post:cheq_acreditado
		endif
		
		call post:MISCprendeBit_UP(119,l_byte) 	
    ELSE // Efectivo
		 //adt_codseq_nro = stan 0 numero de cheque
	 	//op_operator_id = número de cuenta
		banco_ficticio = 000
		IF (!TESTFLAG(giros:tran_send_mode,cancelacion))
	     	CodSeqNro = adt_codseq_nro
		END IF
		fprint l_byte \
		"%08.8d%8.8s%8.8s%03.3d%020.20s%02.02s%03.03s",CodSeqNro, \
		siaf:f_emision,common:system_date,banco_ficticio,\
		operator_aux,med_pago_nue,clearing_nue

		call post:MISCprendeBit_UP(119,l_byte) 	
    END IF

END SUB


/*******/
