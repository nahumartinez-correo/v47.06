/****o* Uso General/OFB:post:MISCjustifico_cadena
* NOMBRE
*   OFB:post:MISCjustifico_cadena
* DESCRIPCION
*   Esta rutina se encarga de justificar el texto de una cadena.
* ENTRADAS
*   Cadena a justificar, tamano de la cadena
* SALIDAS
*   La salida se hace por parametros a travez de "cadena"
* IMPACTOS
* REFERENCIADO POR
*   tes:PRTnotifFallaNegEpsV
* DOCUMENTACION
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCjustifico_cadena(cadena,tamano)
LOCAL INDICE_INF LIKE post:cantidad
LOCAL INDICE     LIKE post:cantidad
LOCAL c_nuevo LIKE common:csr_string
LOCAL c_viejo LIKE common:csr_string
LOCAL l_cantidad     LIKE post:cantidad
LOCAL l_subcadena1 LIKE common:csr_string
LOCAL l_subcadena2 LIKE common:csr_string
LOCAL l_subcadenaAux LIKE common:csr_string
LOCAL l_subcadenaAux2 LIKE common:csr_string
LOCAL l_EncontroComa LIKE siaf:i
; Esta rutina se encarga de justificar el texto de una cadena.
; Pra que la justificación se vea bien encuadrada la letra debería ser corrier new
; o alguna otra donde el tamaño de letra sea uniforme para todas. *** MDG
	INDICE_INF = 0
	l_subcadenaAux = cadena
	l_subcadenaAux2 = cadena
	c_nuevo = "  "
	c_viejo = " "
	CALL csr:str_search (l_subcadenaAux,c_viejo,INDICE,INDICE_INF)
	l_EncontroComa = retval == 0
	WHILE (l_EncontroComa && l_subcadenaAux2.numchars < tamano)
		l_cantidad = INDICE
		l_subcadena1 = SUBSTR(l_subcadenaAux,0,l_cantidad)
		INDICE = INDICE + 1
		INDICE_INF = l_subcadenaAux2.numchars
		l_subcadena2 = SUBSTR(l_subcadenaAux,INDICE,INDICE_INF)
		if (INDICE > 10) then
		    FPRINT l_subcadenaAux2 "%s%2s%s", l_subcadena1, c_nuevo, l_subcadena2
		end if
		INDICE_INF = INDICE + 1
		l_subcadenaAux = l_subcadenaAux2
		CALL csr:str_search (l_subcadenaAux,c_viejo,INDICE,INDICE_INF)
		l_EncontroComa = retval == 0
	END WHILE
	cadena = l_subcadenaAux2
END SUB

/*******/
