/****o* Pendientes de agrupación/OFB:post:MISCacum_DetRep
* NOMBRE
*   OFB:post:MISCacum_DetRep
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postmisc.h"

SUB post:MISCacum_DetRep(tipo,cod,imp,item)
	/* Acumulo los detalles */
	post:adt_det_tipo = tipo
	post:adt_det_cod = cod
	post:adt_raux_punit = 0	
	post:adt_raux_item = item
	call csr:cleararray(post:adt_raux_cant)
	call csr:cleararray(post:adt_raux_imp)			
	
	cds select from dsc:DetRep_tbl becomes dsc:DetRep_ctx where \
	post:adt_raux_op == post:adt_raux_op && \
	post:adt_raux_flia == post:adt_raux_flia && \
	post:adt_raux_tx == post:adt_raux_tx && \
	post:adt_raux_cod == post:adt_raux_cod && \
	post:adt_raux_subcod == post:adt_raux_subcod && \
	post:adt_raux_hasta == post:adt_raux_hasta && \
	post:adt_det_tipo == post:adt_det_tipo && \
	post:adt_det_cod == post:adt_det_cod
	
	cds findfirst dsc:DetRep_ctx lock
	select (cdsretval)
		case 0
			cds extract dsc:DetRep_ctx all
			if (post:adt_det_tipo == TIPO_BLOQ) then
		 		post:adt_raux_ccons = post:adt_raux_ccons + post:cant_bloq
			 	post:adt_raux_cant[post:jnl_cli_tipo] = post:adt_raux_cant[post:jnl_cli_tipo] \
		 		+ post:cant_bloq
		 	else
		 		post:adt_raux_ccons = post:adt_raux_ccons + 1
		 		post:adt_raux_cant[post:jnl_cli_tipo] = post:adt_raux_cant[post:jnl_cli_tipo] \
		 		+ 1
		 	end if
		 	post:adt_raux_imp[post:jnl_cli_tipo] = post:adt_raux_imp[post:jnl_cli_tipo] \
		 	+ imp			
		 	post:adt_raux_icons = post:adt_raux_icons + imp
		 	
		 	cds clearbuffer dsc:DetRep_ctx
		 	cds append dsc:DetRep_ctx post:adt_raux_ccons \
		 	post:adt_raux_icons \
		 	array post:adt_raux_cant \
		 	array post:adt_raux_imp

		 	/* Actualizo el precio unitario para el opcional */
		 	if (post:adt_det_tipo == TIPO_OPC && post:adt_raux_punit == 0 && imp != 0 && \
		 		post:jnl_cli_tipo != 1) then		 		
		 		call post:MISCleo_modo
		 		if (post:adt_opcserv_tipo == "S")
		 			post:adt_raux_punit = imp
			 		cds append dsc:DetRep_ctx post:adt_raux_punit
			 	end if
			end if

		 	cds update dsc:DetRep_ctx lock
			break
		case -801
			if (post:adt_det_tipo == TIPO_BLOQ) then
		 		post:adt_raux_ccons = post:cant_bloq
			 	post:adt_raux_cant[post:jnl_cli_tipo] =  post:cant_bloq
		 		
		 	else
		 		post:adt_raux_ccons = 1
		 		post:adt_raux_cant[post:jnl_cli_tipo] = 1
		 	end if
		 	post:adt_raux_imp[post:jnl_cli_tipo] = imp			
		 	post:adt_raux_icons =  imp		
			select (adt_det_tipo)
				case TIPO_OPC
					cds select from dsc:OPC_TAB becomes dsc:OPC_CTX where \
					post:adt_opc_opci == post:adt_det_cod
					cds findfirst dsc:OPC_CTX nolock
					if (cdsretval == 0) then
						cds extract dsc:OPC_CTX post:adt_opc_desc 
						fprint post:adt_raux_coddesc "%-40.40s" post:adt_opc_desc
					end if
					call post:MISCleo_modo
					if (post:adt_opcserv_tipo == "S" && post:jnl_cli_tipo != 1) then
						post:adt_raux_punit = imp
					end if
					break
				case TIPO_DTO
					cds select from dsc:DES_TAB becomes dsc:DES_CTX where \
					post:adt_descto_cod == post:adt_det_cod
					cds findfirst dsc:DES_CTX nolock
					if (cdsretval == 0) then
						cds extract dsc:DES_CTX post:adt_descto_desc 
						fprint post:adt_raux_coddesc "%-40.40s" post:adt_descto_desc
					end if
					break
				case TIPO_BLOQ
					post:adt_raux_coddesc = "BLOQUES ADICIONALES"
					break
			end select
			cds clearbuffer dsc:DetRep_ctx 
		 	call csr:proc_list(F_APPEND,DSC:post:DetRep_ctx,LST:post:LISTDetRep_fld,2)
		 	cds append dsc:DetRep_ctx \
		 	array adt_raux_imp \
		 	array adt_raux_cant
		 	cds insert dsc:DetRep_ctx lock
		break
	end select
	cds unlock dsc:DetRep_ctx
	cds endselect dsc:DetRep_ctx
END SUB

/*******/
