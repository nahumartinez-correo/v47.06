/****o* Pendientes de agrupación/OFB:post:TRANanula_fact
* NOMBRE
*   OFB:post:TRANanula_fact
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "posttran.h"

SUB post:TRANanula_fact
	; Es fundamental que el flag de cheque UP rechazado quede limpio.
	post:rechazoDiferido = false
	CALL post:CDSadt_presuact_save

	If ( !testflag(tlr:tran_flags,correction) && \
	   ( Tipo_Formulario == FACTURA_A || Tipo_Formulario == FACTURA_B ))
	   Cds SELECT FROM DSC:ControlFactura_tbl BECOMES 	dsc:Anula_Factura_Ctx \
	    	WHERE  adt_fecha == common:system_date && \
	   			  adt_tipo_formulario == Tipo_Formulario && \
	   			  adt_fact_anula == "1" && post:PresNro_Fact == post:PresNro && \
	              post:Estado_Fact != "J"
	
	   Cds FINDFIRST dsc:Anula_Factura_Ctx   NOLOCK
	   CutScreen fld:drv:INDcur_scr,NoCursor
	//   drv:stack_cnt = drv:stack_cnt + 1
	   UngetKey RT_SEND
	   While  ( CDSRETVAL == 0 )
	      Cds Extract dsc:Anula_Factura_Ctx   post:adt_nro_fact
	   	Fprint DocInic "%s%012.12s0",Tipo_Formulario,adt_nro_fact
	      UngetKey RT_SEND
	      SetFlag transacciones,fin_sesion
	      drv:funct_rest = 0
	      drv:stack_cnt = drv:stack_cnt + 1
	      Call csr:listexec lst:TRANcaptura_nro_fact
	      Cds FINDNEXT dsc:Anula_Factura_Ctx   NOLOCK
	   End While
	   drv:funct_rest = 0
	   ClearField drv:INDrun_funct
	   ResetFlag transacciones,fin_sesion
	Endif
END SUB

/*******/
