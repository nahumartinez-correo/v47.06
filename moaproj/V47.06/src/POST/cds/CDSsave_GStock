/****o* Reportes Gestión Stock/OFB:post:CDSsave_GStock
* NOMBRE
*   OFB:post:CDSsave_GStock
* DESCRIPCION
*   Graba los registros de la tabla correspondiente en la nueva tabla GStock que se usa para
*   armar los listados.
* ENTRADAS
*   ctx_aux = contexto de la tabla que se quiere cargar en la GStock
*   l_es_cdd  = "S" indica que la tabla es StockpCDD o StockpCDDHist, entonces el append
*   tiene que hacerse con AS (porque los campos no son los mismos)
*   l_es_cdd  = "N" indica que la  tabla es la stockp o stockpHist
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   post:CDScargo_pieza_rend,post:CDScargo_pieza_stock,post:CDScargo_pieza_venc,
*   post:CDSsel_GStock_gral,post:CDSsel_rep1,post:CDSsel_rep10,post:CDSsel_rep11
*   post:CDSsel_rep12,post:CDSsel_rep13,post:CDSsel_rep14,post:CDSsel_rep15,
*   post:CDSsel_rep16,post:CDSsel_rep17,post:CDSsel_rep2,post:CDSsel_rep3,
*   post:CDSsel_rep4,post:CDSsel_rep5,post:CDSsel_rep6,post:CDSsel_rep7
*   post:CDSsel_rep8,post:CDSsel_rep9
* DOCUMENTACION
*   SC50190:http://livelink.intranet.siemens-itron.com.ar/livelink/livelink.exe?func=doc.ViewDoc&nodeId=639223&
* SOURCE
*/
#include "postcds.h"

SUB post:CDSsave_GStock(ctx_aux,es_cdd)
	LOCAL retval_aux LIKE lib:err_retval
	LOCAL l_es_cdd LIKE post:es_CDD
	LOCAL l_destino LIKE post:adt_stockp_destino
	LOCAL l_Oficio LIKE post:adt_stockp_Oficio
	LOCAL x LIKE common:local_int
	LOCAL l_op_login_id LIKE op:op_login_id
    
	//resguardo el valor del campo
	LET l_op_login_id = op:op_login_id
    
	l_es_cdd = es_cdd
	/* Se setean datos genericos para grabar los registros en la GStock provenientes de la 
	de la StockpCDD o StockpCDDHist, ya que como estos datos estan definidos en la tabla
	como parte de indices si estan vacios al grabar sale un FATAL ERROR*/
	l_destino = "GENERAL"
	l_Oficio = "000000"
    
	WHILE (lib:err_retval == 0)
		CALL csr:proc_list(F_CLEAR,LST:post:LISTstockp)
		CALL csr:proc_list(F_CLEAR,LST:post:LISTstockpCDD)
		CALL csr:cleararray (adt_stockp_serie)
		CALL csr:cleararray (adt_stockp_nro)
		CALL csr:cleararray (adt_stockp_dig)
		CALL csr:cleararray (adt_stockp_fec)
		CALL csr:cleararray (adt_stockp_impGiro)
		CALL csr:cleararray (adt_stockp_TT_giros)
		CALL csr:cleararray (adt_CDD_serie)
		CALL csr:cleararray (adt_CDD_nro)
		CALL csr:cleararray (adt_CDD_dig)
		CALL csr:cleararray (adt_CDD_fec)
		CALL csr:cleararray (adt_CDD_impGiro)
		CALL csr:cleararray (adt_CDD_TT_giros)

		CDS EXTRACT FLD:ctx_aux ALL
		
		//gpb:PS10847-Arreglo operador PED
		IF (op:op_login_id != l_op_login_id) THEN
			LET op:op_login_id = l_op_login_id
		END IF
        
    CDS SELECT FROM DSC:GStock_tbl BECOMES DSC:GStock_ctx \
    	WHERE post:operador_GS == op:op_operator_id \
    	&& post:adt_stockp_pieza == post:adt_stockp_pieza
	        
    CDS FINDFIRST DSC:GStock_ctx LOCK
    LET retval_aux = CDSRETVAL
    CDS CLEARBUFFER DSC:GStock_ctx
        
		/*Falta recuperar el nombre y domicilio del rtte de la tabla que corresponda 
		(CliOca si es minorista   / CliMay si es mayorista)*/
		IF (l_es_cdd == "N") THEN
			CALL CDSrecupero_Rtte(post:adt_stockp_ctaOM,adt_stockp_tipo_doc,adt_stockp_doc)
		ELSE
			CALL CDSrecupero_Rtte(post:adt_CDD_CtaOM,adt_CDD_TipoDoc,adt_CDD_NumDoc)
		END IF
        
    //SC 50190
    IF (l_es_cdd == "N") THEN
	    CDS APPEND DSC:GStock_ctx \
	      op:op_operator_id AS operador_GS \
	      adt_stockp_pieza \
	      adt_stockp_es_grancl \
	      adt_stockp_plazoguar \
	      adt_stockp_recepfech \
	      adt_stockp_recephora \
	      adt_stockp_recepop \
	      adt_stockp_vtofecha \
	      adt_stockp_entrega_f \
	      adt_stockp_entrega_h \
	      adt_stockp_entrega_o \
	      adt_stockp_devol_fec
        
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_devol_hor \
				adt_stockp_devol_op \
				adt_stockp_destino \
				adt_stockp_abon_apar \
				adt_stockp_dest_nom \
				adt_stockp_vd_imp \
				adt_stockp_crem_imp \
				adt_stockp_crem_impc \
				adt_stockp_rem_nom \
				adt_stockp_rem_domic \
				adt_stockp_rem_loc \
				adt_stockp_rem_CP
        
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_rem_pcia \
				adt_stockp_Orden \
				adt_stockp_franq_inc \
				adt_stockp_en_devol \
				adt_stockp_dias_alm \
				adt_stockp_Baja
        
			CDS APPEND DSC:GStock_ctx \
        adt_stockp_tyt_reenc \
        adt_stockp_Oficio \
        adt_stockp_Observ \
        adt_stockp_ult_mod_f \
        adt_stockp_ult_mod_h \
        adt_stockp_ult_mod_o \
        adt_stockp_recep_nom \
        adt_stockp_DocInic \
        adt_CDD_plan_nro \
        l_es_cdd AS es_CDD  \
        adt_stockp_conting AS adt_CDD_contingencia \
        CloProvin
        
      //gpb:PS10898 - REQ 005 – Consulta General de Piezas 	
			IF (adt_stockp_lugarGuar == "" || adt_stockp_lugarGuar.NUMCHARS == 0) THEN
				adt_stockp_lugarGuar = "NO ESPECIFICADO"
			END IF
				
			IF (adt_stockp_ordGuarda == "" || adt_stockp_ordGuarda.NUMCHARS == 0) THEN
				adt_stockp_ordGuarda = "00000000"
			END IF	

			CDS APPEND DSC:GStock_ctx \
				adt_stockp_lugarGuar
				
			//gpb:PS10898 - REQ 005 – Consulta General de Piezas 	
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_ordGuarda
        
      x = 0 
      WHILE (x < 10)
      	CDS APPEND DSC:GStock_ctx \
          adt_stockp_serie[x] \
          adt_stockp_nro[x] \
          adt_stockp_dig[x] \
          adt_stockp_fec[x] \
          adt_stockp_impGiro[x] \
          adt_stockp_TT_giros[x]
          x = x + 1
      END WHILE 
		ELSE
			CDS APPEND DSC:GStock_ctx \
				op:op_operator_id AS operador_GS \
				adt_CDD_pieza AS adt_stockp_pieza \
				adt_CDD_es_grancl AS adt_stockp_es_grancl \
				adt_stockp_plazoguar \
				adt_CDD_recep_f AS adt_stockp_recepfech \
				adt_CDD_recep_h AS adt_stockp_recephora \
				adt_CDD_recep_op AS adt_stockp_recepop \
				adt_stockp_vtofecha \
				adt_CDD_entrega_f AS adt_stockp_entrega_f \
				adt_CDD_entrega_h AS adt_stockp_entrega_h \
				adt_CDD_entrega_op AS adt_stockp_entrega_o \
				post:adt_CDD_devol_fec AS adt_stockp_devol_fec
            
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_devol_hor \
				adt_stockp_devol_op \
				l_destino AS adt_stockp_destino \
				adt_stockp_abon_apar \
				adt_stockp_dest_nom \
				adt_stockp_vd_imp \
				adt_CDD_crem_imp AS adt_stockp_crem_imp \
				adt_CDD_crem_impc AS adt_stockp_crem_impc \
				adt_stockp_rem_nom \
				adt_stockp_rem_domic \
				adt_stockp_rem_loc \
				adt_stockp_rem_CP
            
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_rem_pcia \
				adt_CDD_Orden AS adt_stockp_Orden \
				adt_stockp_franq_inc \
				adt_stockp_dias_alm \
				adt_CDD_Baja AS adt_stockp_Baja \
				adt_stockp_tyt_reenc \
				l_Oficio AS adt_stockp_Oficio \
				adt_stockp_Observ \
				adt_CDD_recep_f AS adt_stockp_ult_mod_f \
				adt_CDD_recep_h AS adt_stockp_ult_mod_h \
				adt_CDD_recep_op AS adt_stockp_ult_mod_o \
				adt_stockp_recep_nom \
				adt_CDD_DocInic as adt_stockp_DocInic\
				l_es_cdd AS es_CDD \
				adt_CDD_plan_nro \
				adt_CDD_contingencia \
				CloProvin
				
			//gpb:PS10898 - REQ 005 – Consulta General de Piezas 	
			IF (adt_stockp_lugarGuar == "" || adt_stockp_lugarGuar.NUMCHARS == 0) THEN
				adt_stockp_lugarGuar = "NO ESPECIFICADO"
			END IF
				
			IF (adt_stockp_ordGuarda == "" || adt_stockp_ordGuarda.NUMCHARS == 0) THEN
				adt_stockp_ordGuarda = "00000000"
			END IF	
				
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_lugarGuar
				
			//gpb:PS10898 - REQ 005 – Consulta General de Piezas 	
			CDS APPEND DSC:GStock_ctx \
				adt_stockp_ordGuarda
            
			x = 0 
			WHILE (x < 10)
				CDS APPEND DSC:GStock_ctx \
					adt_CDD_serie[x] AS adt_stockp_serie[x] \
					adt_CDD_nro[x] AS adt_stockp_nro[x]\
					adt_CDD_dig[x] AS adt_stockp_dig[x]\
					adt_CDD_fec[x] AS adt_stockp_fec[x]\
					adt_CDD_impGiro[x] AS adt_stockp_impGiro[x] \
					adt_CDD_TT_giros[x] AS adt_stockp_TT_giros[x]
				x = x + 1
			END WHILE             
		END IF
        
		IF (retval_aux == -801)
			CDS INSERT DSC:GStock_ctx LOCK
		END IF
		CDS UNLOCK DSC:GStock_ctx
		CDS ENDSELECT DSC:GStock_ctx
		CDS FINDAGAIN FLD:ctx_aux NOLOCK
		CDS FINDNEXT FLD:ctx_aux NOLOCK
		LET lib:err_retval = CDSRETVAL
	END WHILE 
	CDS ENDSELECT FLD:ctx_aux 
END SUB

/*******/
