/****o* Pendientes de agrupación/OFB:post:CDSUnNegMePag_sel
* NOMBRE
*   OFB:post:CDSUnNegMePag_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSUnNegMePag_sel

/*Se agrega el filtrado de tablas. Diego Priore 05/04/2000*/

offset_0000:
    MOVE adt_unmp_une_cod TO tmp_unmp_une_cod
    MOVE adt_unmp_mpa_cod TO tmp_unmp_mpa_cod
    
    IF ((post:adt_unmp_une_cod.numchars == 0) && (post:adt_unmp_mpa_cod.numchars == 0)) THEN
    	CDS SELECT FROM DSC:adt_UnNegMePag_table BECOMES DSC:adt_UnNegMePag_ctx
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_UnNegMePag_ctx LISTadt_UnNegMePag
    END IF
    
    IF ((post:adt_unmp_une_cod.numchars != 0) && (post:adt_unmp_mpa_cod.numchars == 0)) THEN
    	CDS SELECT FROM DSC:adt_UnNegMePag_table BECOMES DSC:adt_UnNegMePag_ctx \
    	WHERE (post:adt_unmp_une_cod == post:adt_unmp_une_cod)
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_UnNegMePag_ctx LISTadt_UnNegMePag
    END IF
    
    IF ((post:adt_unmp_une_cod.numchars == 0) && (post:adt_unmp_mpa_cod.numchars != 0)) THEN
    	CDS SELECT FROM DSC:adt_UnNegMePag_table BECOMES DSC:adt_UnNegMePag_ctx \
    	WHERE (post:adt_unmp_mpa_cod == post:adt_unmp_mpa_cod)
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_UnNegMePag_ctx LISTadt_UnNegMePag
    END IF
    
    IF ((post:adt_unmp_une_cod.numchars != 0) && (post:adt_unmp_mpa_cod.numchars != 0)) THEN
    	CDS SELECT FROM DSC:adt_UnNegMePag_table BECOMES DSC:adt_UnNegMePag_ctx \
    	WHERE ((post:adt_unmp_mpa_cod == post:adt_unmp_mpa_cod) && (post:adt_unmp_une_cod == post:adt_unmp_une_cod))
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_UnNegMePag_ctx LISTadt_UnNegMePag
    END IF
    
    
    IF (CDSRETVAL == 0x01FD) THEN
       GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
       MOVE tmp_unmp_une_cod TO adt_unmp_une_cod
       MOVE tmp_unmp_mpa_cod TO adt_unmp_mpa_cod
       CALL CDSUnNegMePag_load
       RETURN (-2)
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    
    IF (RETVAL != 0) THEN
      	clearfield adt_unmp_une_cod 
	clearfield adt_unmp_mpa_cod
	clearfield adt_unmp_mezcla 
	clearfield adt_unmp_itemi 
	clearfield adt_unmp_por_max
	clearfield adt_unmp_req_sup 
	clearfield adt_unmp_res_prv 
	clearfield adt_unmp_res_prd 
	
	refresh adt_unmp_une_cod 
	refresh adt_unmp_mpa_cod
	refresh adt_unmp_mezcla 
	refresh adt_unmp_itemi 
	refresh adt_unmp_por_max
	refresh adt_unmp_req_sup 
	refresh adt_unmp_res_prv 
	refresh adt_unmp_res_prd 
	
      RETURN (-1)
    END IF
    
    CDS EXTRACT DSC:adt_UnNegMePag_ctx ALL
    CDS UNLOCK DSC:adt_UnNegMePag_ctx
	//mercedes - journalizacion ABM Un. Neg / Med. Pago
	call adt_to_bck23
	//fin mercedes

END SUB

/*******/
