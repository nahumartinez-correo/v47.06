/****o* Pendientes de agrupación/OFB:post:CDS_DevPza1_max
* NOMBRE
*   OFB:post:CDS_DevPza1_max
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDS_DevPza1_max

    Local cod_ttrace like Pieza

    /* NOV. 1999 - B. Petrella -    */
    let orden = 1
    DO
        CDS SELECT FROM FLD:adt_table BECOMES FLD:adt_ctx WHERE \
            (post:CodOperador == op:op_operator_id && \
            post:orden == post:orden)
        CDS FINDNEXT FLD:adt_ctx LOCK
        IF (CDSRETVAL < 0) THEN
            RETURN (-2)
        ENDIF
        CDS EXTRACT FLD:adt_ctx ALL
        /*Feb 2000 M.F.Marco*/
        /*IF (MarcaIncluye == ">>") THEN
            IF (Pieza.NUMCHARS == 13)//La pieza debe ser un T&T valido
                If (substr(Pieza,11,2) == "AR")
                    //Compruebo que el digito verificador sea valido
                    CALL post:MISCvalida_dig_GC (Pieza)
                    If (RETVAL == 0) Then
                        //Compruebo que los 2 primeros caracteres sean un T&T valido,
                        //en la tabla de T&T
                        cod_ttrace = substr(Pieza,0,2)
                        CALL MISCverif_cod_tyt (cod_ttrace)
                        If (RETVAL == 0) Then
                            CALL MISCCalcChkSum(Pieza, 13, itemcheck)
                            itemcheck_aux = itemcheck
                        ELSE
                            CLEARFIELD itemcheck_aux
                        End If
                    End If
                End If
            END IF
        END IF*/
        LET orden_max = orden
        LET orden = orden + 1
    LOOP
END SUB

/*******/
