/****o* Pendientes de agrupación/OFB:post:CDStotArrayAnt
* NOMBRE
*   OFB:post:CDStotArrayAnt
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDStotArrayAnt
	local idx like siaf:i
	idx = 0
	while (idx <= IDX_MONEDA)
		totCaptAnt[idx] = 0
		monCaptAnt[idx] = 99
		idx = idx + 1
	end while

	CDS SELECT FROM NC_TAB BECOMES NC_CON \
		where tlr:jnl_operator == op:op_operator_id && 						\
			  tlr:jnl_status != 100 && siaf:cancelacion == "" && 			\
			  tlr:jnl_bus_date == common:system_date && 					\
			  (siaf:codigo_siaf == 99098 || siaf:codigo_siaf == 99099) && 	\
			  tlr:jnl_branch == common:sucursal_activa

	Cds FINDFIRST DSC:NC_CON NOLOCK
	let lib:err_retval = cdsretval
	while (lib:err_retval == 0)
		Cds Extract DSC:NC_CON siaf:moneda siaf:importe into siaf:importe2 siaf:codigo_siaf
		if (siaf:codigo_siaf == 99099)
			call MISCtotCaptAcum("ANT", siaf:moneda, siaf:importe2, "+")
		else
			call MISCtotCaptAcum("ANT", siaf:moneda, siaf:importe2, "-")
		endif
		Cds FINDNEXT DSC:NC_CON NOLOCK
		let lib:err_retval = cdsretval
	End while
	Cds EndSelect DSC:NC_CON
END SUB

/*******/
