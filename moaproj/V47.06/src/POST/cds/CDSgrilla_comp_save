/****o* Pendientes de agrupación/OFB:post:CDSgrilla_comp_save
* NOMBRE
*   OFB:post:CDSgrilla_comp_save
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSgrilla_comp_save
    LOCAL indice     LIKE post:Tarif_idx    
    LOCAL modificada LIKE post:SiNo
    LOCAL lcod       LIKE post:Tarif_idx
    LOCAL idx_tarm   LIKE post:Tarif_idx
    
    idx_tarm = 0    
    indice = idx_tarm + PL_GETITEM    
    
    WHILE (idx_tarm < comp_cant_tot)
        call csr:myPickcontrol(dsc:aux_pic_medios,common:csr_string,indice) 
        
	// Si existe el registro en la tabla AuxComp, lo actualizo
	// si no lo inserto
	
        aux_concepto_cod  = substr(common:csr_string,0,5)                
        aux_item_cod      = substr(common:csr_string,6,5)
        aux_subitem_cod   = substr(common:csr_string,12,5)
        aux_comp_desc     = substr(common:csr_string,18,30)
        aux_comp_imp     =  substr(common:csr_string,49,13)
        //aux_signo	=   substr(common:csr_string,61,1)
        CALL csr:trimfield post:aux_concepto_cod
        CALL csr:trimfield post:aux_item_cod
        CALL csr:trimfield post:aux_subitem_cod
        CALL csr:trimfield post:aux_comp_desc
        CALL csr:trimfield post:aux_comp_imp
                
        CDS SELECT FROM DSC:AuxComp_tbl BECOMES DSC:AuxComp_ctx WHERE\
        aux_concepto_cod  == FLD:aux_concepto_cod && \
        aux_item_cod  == FLD:aux_item_cod && \
        aux_subitem_cod == FLD:aux_subitem_cod
        CDS FINDFIRST DSC:AuxComp_ctx LOCK
        LET lib:err_retval = CDSRETVAL
        CDS CLEARBUFFER DSC:AuxComp_ctx
        if (lib:err_retval == 0) then
	        CDS APPEND DSC:AuxComp_ctx FLD:aux_comp_imp
        	CDS UPDATE DSC:AuxComp_ctx LOCK
        else
	        CALL CDSobtiene_secuen("COMPR")
        	LET seq_compromiso = adt_codseq_nro
        	fld:post:aux_fecha = fld:post:fechaux
        	fld:post:aux_signo = fld:post:concepto_signo
                CDS APPEND DSC:AuxComp_ctx \
                fld:aux_concepto_cod, fld:seq_compromiso, fld:aux_item_cod, \
                fld:aux_subitem_cod, fld:aux_comp_desc, FLD:aux_comp_imp, \
                fld:aux_signo, fld:aux_fecha
                CDS INSERT DSC:AuxComp_ctx LOCK
        END IF
        CDS UNLOCK DSC:AuxComp_ctx
        CDS ENDSELECT DSC:AuxComp_ctx

        idx_tarm = idx_tarm + 1
        indice = indice + 1
    END WHILE
END SUB

/*******/
