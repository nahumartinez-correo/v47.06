/****o* Pendientes de agrupación/OFB:post:CDScloraz_sel_scr2
* NOMBRE
*   OFB:post:CDScloraz_sel_scr2
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDScloraz_sel_scr2
    LOCAL loc_CloRazon like CloRazon
offset_0000:
    MOVE CloRazon TO loc_CloRazon
    CDS SELECT FROM FLD:tablaCli BECOMES FLD:contextoCli \
    WHERE post:IvaCod == "CF" && \
    post:CloCuit != "99999999999" && \
    post:CloCuit != "99999999995" sort "ClOxRazo"
    
	if (tablaCli == DSC:post:cliocaUP_tbl)
	    ; Debe aparecer otro mensaje cuando es UP.
		CDS MULTIDISPLAY FLD:contextoCli LISTCloRazUP
	else
	    CDS MULTIDISPLAY FLD:contextoCli LISTCloRaz
	endif
    IF (CDSRETVAL == 0x01FD) THEN
       GOTO offset_0000
    END IF

    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
       MOVE loc_CloRazon TO CloRazon
       /*CALL post:ABMidentif_clear*/
       CALL ABMCliOca_scr2_clear
       CALL CDScloraz_load_scr2
       IF (RETVAL < 0) THEN
       	   //cgw:si al reponer no existe cliente, limpia el resto de la pantalla.
           CALL post:ABMCliOca_scr2_clear    	  
           CLEARFIELD post:CloRazon
           CLEARFIELD post:pcia_desc
    	   CALL post:ABMCliO_scr2_refr
           REFRESH post:CloRazon
           REFRESH post:pcia_desc
           CALL post:ABMCliO_scr2_unprot
       ELSE
           //cgw:si al reponer existe refresco pantalla.
           CALL post:ABMCliO_scr2_refr
           REFRESH post:CloRazon
           CLEARFIELD post:pcia_desc
           IF (CloProvin.numchars != 0) THEN
               CALL post:CDSadt_cloprov_load
               post:pcia_desc = post:adt_pcia_desc
           END IF
           REFRESH post:pcia_desc
           CALL post:ABMCliO_scr2_prot
       END IF
       RETURN (-2)
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    IF (RETVAL != 0) THEN
       RETURN (-1)
    END IF
    /*CALL post:ABMidentif_clear*/
    CALL ABMCliOca_scr2_clear
    CDS EXTRACT FLD:contextoCli ALL
    CDS UNLOCK FLD:contextoCli
    //let CliRaz = CloRazon

    let adt_TipoDoc_tipo = CloTipDoc
    //cgw:reservo el tipo doc. para chequear en caso de cambio del mismo.
    post:CloTipDoc_temp = post:adt_TipoDoc_tipo
    CALL FVALTipoDoc_scr2

    RETURN (0)
END SUB

/*******/
