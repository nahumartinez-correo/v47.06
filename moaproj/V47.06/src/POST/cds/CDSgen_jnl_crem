/****o* Pendientes de agrupación/OFB:post:CDSgen_jnl_crem
* NOMBRE
*   OFB:post:CDSgen_jnl_crem
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSgen_jnl_crem(p_pieza)
local l_imp_giro like giros:ImporteNeto
local l_com_giro like giros:Comision_fld
local l_lim_giro like giros:ImporteNeto
local x like siaf:i
local cant_giros like siaf:i
local giro_mas_sello like giros:ImporteNeto
    l_lim_giro = giros:imp_max_crem
    cds endselect "stockp_ctx"
    cds select from "stockp" becomes "stockp_ctx" \
    where post:adt_stockp_pieza == p_pieza
            
    cds findfirst "stockp_ctx" lock
    if (cdsretval == 0) then
        cds extract "stockp_ctx" all
        
        x = 0
        while (x < 10)
            if (adt_stockp_PresNro[x].numchars > 0 && adt_stockp_PresNro[x] != post:PresNro) then
                call post:CDSjnl_crem_insert(adt_stockp_PresNro[x])
                if (x == 0) then
                    cds findagain "stockp_ctx" lock
                    adt_stockp_rev = "S" 
                    CDS CLEARBUFFER "stockp_ctx"
        
                    CDS APPEND "stockp_ctx" \
                    adt_stockp_rev        
        
                    CDS UPDATE "stockp_ctx" LOCK
                end if
            else
                break
            end if    
            x = x + 1
        end while       
        CDS UNLOCK "stockp_ctx"
        cds endselect "stockp_ctx"
        return 
    end if
    CDS UNLOCK "stockp_ctx"
    cds endselect "stockp_ctx"
    cds endselect "StockpCDD_ctx"
    cds select from "StockpCDD"  becomes "StockpCDD_ctx" \
    where adt_CDD_pieza  == p_pieza
        
    cds findfirst "StockpCDD_ctx" lock
    if (cdsretval == 0) then
        cds extract "StockpCDD_ctx" all
        
        x = 0
        while (x < 10)
            if (adt_CDD_PresNro[x].numchars > 0 && adt_CDD_PresNro[x] != post:PresNro) then
                call post:CDSjnl_crem_insert(adt_CDD_PresNro[x])
                if (x == 0) then
                    cds findagain "StockpCDD_ctx" lock
                    adt_CDD_rev = "S" 
                    CDS CLEARBUFFER "StockpCDD_ctx"
        
                    CDS APPEND "StockpCDD_ctx" \
                    adt_CDD_rev        
        
                    CDS UPDATE "StockpCDD_ctx" LOCK
                end if
            else
                break
            end if    
            x = x + 1
        end while
        
        CDS UNLOCK "StockpCDD_ctx"
        cds endselect "StockpCDD_ctx"
        return 
    else
        CDS UNLOCK "StockpCDD_ctx"
        cds endselect "StockpCDD_ctx"
        return -2
    end if 

END SUB
/*******/
