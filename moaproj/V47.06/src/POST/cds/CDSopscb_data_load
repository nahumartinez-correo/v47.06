/****o* Pendientes de agrupación/OFB:post:CDSopscb_data_load
* NOMBRE
*   OFB:post:CDSopscb_data_load
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSopscb_data_load(prmCode,prmHierarchy,prmProduct,prmArray0,prmArray1,prmArray2,prmArray3,prmArray4,prmArray5)
local	loc_opscb_code		like post:adt_cb_cod
local	loc_opscb_hierarchy	like post:adt_concb_jerarquia
local	loc_opscb_product	like post:adt_concb_producto
local	loc_pos				like siaf:idx
local	loc_fetch_result	like lib:err_retval
local	loc_result			like post:sel_opc
local	loc_result_new		like post:sel_opc

let loc_opscb_code = prmCode
let loc_opscb_hierarchy = prmHierarchy
let loc_opscb_product = prmProduct


let prmArray0 = ""
let prmArray1 = ""
let prmArray2 = ""
let prmArray3 = ""
let prmArray4 = ""
let prmArray5 = ""

CDS SELECT FROM DSC:OpcServCombo_tbl BECOMES DSC:OpcServCombo_ctx \
	WHERE	post:adt_opscb_cod 			== loc_opscb_code && \
			post:adt_opscb_jerarquia 	== loc_opscb_hierarchy && \
			post:adt_opscb_producto 	== loc_opscb_product
if (cdsretval == 0) then
	let loc_pos = 0
	CDS FINDFIRST DSC:OpcServCombo_ctx NOLOCK
	while (cdsretval == 0 && loc_pos < 6) 
		CDS EXTRACT DSC:OpcServCombo_ctx post:adt_opscb_opci INTO loc_result
		let loc_fetch_result = loc_fetch_result + cdsretval 
		
		if (combo_cambia_a_prod != loc_opscb_product) then
			// voy a buscar el opcional para el otro servicio
			call CDSget_opc_equiv(loc_result,loc_result_new)
			if (loc_result_new.NUMCHARS > 0) then
				loc_result = loc_result_new
			endif	
		endif
		
		select (loc_pos)
			case 0
				let prmArray0 = loc_result
				break
			case 1
				let prmArray1 = loc_result
				break
			case 2
				let prmArray2 = loc_result
				break
			case 3
				let prmArray3 = loc_result
				break
			case 4
				let prmArray4 = loc_result
				break
			case 5
				let prmArray5 = loc_result
				break
			case else
		end select
		let loc_pos = loc_pos + 1
		CDS FINDNEXT DSC:OpcServCombo_ctx NOLOCK
	end while
	CDS ENDSELECT DSC:OpcServCombo_ctx
endif

if (loc_fetch_result < 0) then
	return (-2)
endif

END SUB

/*******/
