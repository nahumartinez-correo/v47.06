/****o* Pendientes de agrupación/OFB:post:CDSgraboTransf
* NOMBRE
*   OFB:post:CDSgraboTransf
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSgraboTransf
    /* Transferencia a Otro Contenedor              */
    /* Graba en la tabla TranCont                           */
    /* Jul. 1998 - B. Petrella -                    */

    CDS SELECT FROM DSC:post:TranCont BECOMES DSC:post:TranCont_ctx WHERE \
		(post:Operador_id == post:Operador_id)

    CDS SELECT FROM DSC:DetTmp BECOMES DSC:DetTmp_ctx WHERE \
	(op:op_operator_id == op:op_operator_id)
    CDS FINDFIRST DSC:DetTmp_ctx LOCK
    DO
	    IF (CDSRETVAL < 0) THEN
	        break
	    ENDIF
	    
	    /*CSZ*/
	    CLEARFIELD jnl_simp_esp
	    
	    /*MFM */
	    CLEARFIELD jnl_stockp_reenc
	    CLEARFIELD jnl_stockp_reenc_cul
	    
	    CDS EXTRACT DSC:DetTmp_ctx ALL
	    If (MarcaBorrado != "*")
            
		    /* Graba en TranCont */
		    cds clearbuffer DSC:post:TranCont_ctx
            
		    /* Grabo la clave del journal - */
		    CDS APPEND DSC:post:TranCont_ctx \
		        fld:post:jnl_sequence_ori \
		        fld:post:jnl_date_ori \
		        fld:post:jnl_branch_ori \
		        fld:post:jnl_operator_ori \
		        fld:post:jnl_time_ori \
		        fld:post:jnl_bus_date_ori \
		        fld:post:NroTranf
                
		    CDS APPEND DSC:post:TranCont_ctx \
		        fld:post:track_trace \
		        fld:post:Pieza \
		        fld:post:cod_ctrol \
		        fld:post:Pieza_id \
		        fld:post:MarcaBorrado
                
		    CDS APPEND DSC:post:TranCont_ctx \
		        fld:post:adt_grucorte_desc \
		        fld:post:adt_grucorte_cod \
		        fld:post:jnl_grucorte_cod \
		        fld:post:jnl_apertura_cod \
		        fld:siaf:jnl_codigo_siaf \
		        fld:post:jnl_corteop_cod \
		        fld:post:jnl_corteop_saca \
		        fld:post:jnl_corteop_despacho
                
                
		    CDS APPEND DSC:post:TranCont_ctx \
		        fld:post:Operador_id \
		        fld:post:CodOperador \
		        fld:op:op_branch_id \
		        fld:post:Sucursal_id
                
            /*CSZ - MFM*/
            CDS APPEND DSC:post:TranCont_ctx \
                jnl_simp_esp \
                jnl_stockp_reenc \
	    		jnl_stockp_reenc_cul \
	    		jnl_marca_excep \
				jnl_excep_existe
    
                
		    if (siaf:codigo_siaf == "99116" || siaf:codigo_siaf == "99110")
			    /* El op. origen puede ser distinto al op. logonneado */
			    CDS APPEND DSC:post:TranCont_ctx \
			        fld:post:adt_op_login_id AS fld:op:op_login_id \
			        fld:post:adt_op_operator_id AS fld:op:op_operator_id
		    else
			    CDS APPEND DSC:post:TranCont_ctx \
			        fld:op:op_login_id \
			        fld:op:op_operator_id
		    end if
            
		    cds insert DSC:post:TranCont_ctx lock
		    CDS UNLOCK DSC:post:TranCont_ctx
		    IF (NroTranf > 1)
			    Let NroTranf = NroTranf - 1
			    CDS SELECT FROM DSC:post:TranCont BECOMES DSC:post:TranCont_ctx WHERE \
			        (post:jnl_branch_ori == post:jnl_branch_ori && \
		            post:jnl_operator_ori == post:jnl_operator_ori && \
			        post:jnl_date_ori == post:jnl_date_ori && \
			        post:jnl_time_ori == post:jnl_time_ori && \
			        post:jnl_bus_date_ori == post:jnl_bus_date_ori && \
		            post:jnl_sequence_ori == post:jnl_sequence_ori && \
			        post:NroTranf == post:NroTranf)
                    
		        CDS FINDFIRST DSC:TranCont_ctx LOCK
			    IF (CDSRETVAL == 0) THEN
				    /* Resguardo */
				    swapdup op:op_login_id
				    swapdup op:op_operator_id
				    swapdup post:CodOperador
				    swapdup post:Operador_id
                    
				    CDS EXTRACT DSC:TranCont_ctx ALL
				    Let MarcaBorrado = 3
				    call CDSmodifTranCont
                    
				    /* Recupero */
				    dupfield op:op_login_id
				    dupfield op:op_operator_id
				    dupfield post:CodOperador
				    dupfield post:Operador_id
			    END IF
			    Let NroTranf = NroTranf + 1
		    End If
	    Else
		    IF (NroTranf > 1)
			    Let NroTranf = NroTranf - 1
			    CDS SELECT FROM DSC:post:TranCont BECOMES DSC:post:TranCont_ctx WHERE \
				    (post:jnl_branch_ori == post:jnl_branch_ori && \
			        post:jnl_operator_ori == post:jnl_operator_ori && \
				    post:jnl_date_ori == post:jnl_date_ori && \
				    post:jnl_time_ori == post:jnl_time_ori && \
				    post:jnl_bus_date_ori == post:jnl_bus_date_ori && \
			        post:jnl_sequence_ori == post:jnl_sequence_ori && \
				    post:NroTranf == post:NroTranf)
                
			    CDS FINDFIRST DSC:TranCont_ctx LOCK
			    IF (CDSRETVAL == 0) THEN
				    /* Resguardo */
				    swapdup op:op_login_id
				    swapdup op:op_operator_id
				    swapdup post:CodOperador
				    swapdup post:Operador_id
                    
                    
				    CDS EXTRACT DSC:TranCont_ctx ALL
				    clearfield MarcaBorrado
				    call CDSmodifTranCont
                    
				    /* Recupero */
				    dupfield op:op_login_id
				    dupfield op:op_operator_id
				    dupfield post:CodOperador
				    dupfield post:Operador_id
                    
			    END IF
			    Let NroTranf = NroTranf + 1
		    End If
	    End If
        
	    CDS FINDNEXT DSC:DetTmp_ctx LOCK
    LOOP
    
    CDS UNLOCK DSC:post:TranCont_ctx
    CDS ENDSELECT DSC:post:TranCont_ctx
    
    CDS UNLOCK DSC:post:DetTmp_ctx
    CDS ENDSELECT DSC:post:DetTmp_ctx
    
END SUB

/*******/
