/****o* Pendientes de agrupación/OFB:post:CDSnroStockpCDD
* NOMBRE
*   OFB:post:CDSnroStockpCDD
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSnroStockpCDD(p_pieza,p_giro,p_envio,p_cant_giros)
local x like siaf:i
    cds endselect "stockp_ctx"
    cds select from "stockp" becomes "stockp_ctx" \
    where \
    post:adt_stockp_pieza == p_pieza
    
    cds findfirst "stockp_ctx" nolock
    if (cdsretval == 0) then
        cds extract "stockp_ctx" ALL
        
        fprint p_giro "%s-%s-%s" adt_stockp_serie[0],adt_stockp_nro[0], adt_stockp_dig[0]  
        
        x = 1
        while (x < 10)
            if (adt_stockp_nro[x].numchars > 0)
                fprint p_giro "%s / %s-%s-%s" p_giro,adt_stockp_serie[x],adt_stockp_nro[x], adt_stockp_dig[x]  
            else
                break
            end if
            x = x + 1
        end while
        
        p_cant_giros = x
        
        fprint p_envio "%s" adt_stockp_TT_giros[0]
        
        x = 1
        while (x < 10)
            if (adt_stockp_TT_giros[x].numchars > 0)
                fprint p_envio "%s / %s" p_envio,adt_stockp_TT_giros[x]
            else
                break
            end if
            x = x + 1
        end while 
        cds endselect "stockp_ctx"
        return 0
    end if
    
    cds endselect "stockp_ctx"
    cds select from "StockpCDD"  becomes "stockp_ctx" \
    where \
    adt_CDD_pieza  == p_pieza
    
    cds findfirst "stockp_ctx" nolock
        
    if (cdsretval == 0) then
        cds extract "stockp_ctx" ALL
        
        fprint p_giro "%s-%s-%s" adt_CDD_serie[0],adt_CDD_nro[0], adt_CDD_dig[0]  
        
        x = 1
        while (x < 10)
            if (adt_CDD_nro[x].numchars > 0)
                fprint p_giro "%s / %s-%s-%s" p_giro,adt_CDD_serie[x],adt_CDD_nro[x], adt_CDD_dig[x]  
            else
                break
            end if
            x = x + 1
        end while
        
        p_cant_giros = x
        fprint p_envio "%s" adt_CDD_TT_giros[0]
        
        x = 1
        while (x < 10)
            if (adt_CDD_TT_giros[x].numchars > 0)
                fprint p_envio "%s / %s" p_envio,adt_CDD_TT_giros[x]
            else
                break
            end if
            x = x + 1
        end while 
        cds endselect "stockp_ctx"
    
        return 0
    else
        cds endselect "stockp_ctx"
        return -2
    end if             

END SUB
/*******/
