/****o* Expedición/OFB:post:CDSbuscaOperadorDest
* NOMBRE
*   OFB:post:CDSbuscaOperadorDest
* DESCRIPCION
*   Esta rutina busca los operadores que estan en condiciones de recibir una transferencia de piezas:
*	aquellos que no se encuentran inhibidos y que tienen caja abierta y no cerrada aun en el dia.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:post:FVALoperadorDest,OFB:post:FVALoperDest
* DOCUMENTACION
*   http://jira.sibs.net/jira/browse/AUT-351
* SOURCE
*/
#include "postcds.h"

SUB post:CDSbuscaOperadorDest
LOCAL l_operador_id like op:op_operator_id
LOCAL l_login_id like op:op_login_id
LOCAL l_branch_id like op:op_branch_id
LOCAL l_inhibido LIKE op:op_inhibido 

    /* Transferencia a otro Cont.: Operador */
    /* Jul. 1998 - B. Petrella -    */

    /* Resguardo el op:op_login_id 
    swapdup op:op_login_id
    dupfield op:op_login_id
    swapdup op:op_operator_id
    dupfield op:op_operator_id*/
    
  	//Inicio agrego German
	CALL post:MISCFtrim(post:Operador_id)
	REFRESH post:Operador_id
	//Fin agrego German
    
    if (siaf:codigo_siaf != "99110")
		IF (op:op_login_id == post:Operador_id)
			RETURN (-2)
		END IF
	endif
	/*Se agrega marca de borrado logico - Gabriel Falciola*/
    CDS SELECT FROM DSC:op:adt_op_table BECOMES DSC:op:adt_op_context WHERE \
    (op:op_branch_id == op:op_branch_id && \
	op:op_login_id == Operador_id && \
	op:op_tlr_auth == "X" && \
	op:op_borrado_logico != "S")

    CDS FINDFIRST DSC:op:adt_op_context NOLOCK
    IF (CDSRETVAL != 0) THEN
		//CDS UNLOCK DSC:op:adt_op_context
		CDS ENDSELECT DSC:op:adt_op_context
		/* Recupero op:op_login_id 
    	dupfield op:op_login_id
    	dupfield op:op_operator_id*/
		RETURN (-2)
    ELSE
       /* MFM - Para poder actualizar el campo adt_novtt_op2*/
    	//CDS EXTRACT DSC:op:adt_op_context op:op_operator_id INTO post:CodOperador  op:op_inhibido
    	CDS EXTRACT DSC:op:adt_op_context op:op_operator_id into l_operador_id \
		op:op_login_id into l_login_id \
		op:op_branch_id into l_branch_id \
		op:op_inhibido into l_inhibido
		
		IF (l_inhibido == "S") THEN
	//		CDS UNLOCK DSC:op:adt_op_context
	    	CDS ENDSELECT DSC:op:adt_op_context
	    	/* Recupero op:op_login_id 
    		dupfield op:op_login_id
    		dupfield op:op_operator_id*/
    		MSGBOX "EL OPERADOR SE ENCUENTRA INHIBIDO",0x00,"Advertencia"
    		RETURN -1
    	END IF
	
	 	CDS ENDSELECT DSC:op:adt_op_context
	 
		//50242 - SE DEBE VERIFICAR QUE EL OPERADOR TENGA CAJA ABIERTA EN EL DIA, SIN CERRAR
		CDS SELECT FROM DSC:tes:rend_caj_table BECOMES DSC:tes:rend_caj_context WHERE \
		tes:rend_op_id == l_operador_id && tes:rend_fecha == common:system_date && \
		tes:rend_tipo_cierre == "" && tes:rend_inicio_cierre != "S"
		
		CDS FINDFIRST DSC:tes:rend_caj_context NOLOCK
		IF (CDSRETVAL != 0) THEN
			CDS ENDSELECT DSC:tes:rend_caj_context 
			MSGBOX "EL OPERADOR NO TIENE CAJA ABIERTA EN EL DIA.",0X00,"ATENCION"
			RETURN -2
		ENDIF
	
		CDS ENDSELECT DSC:tes:rend_caj_context 
	ENDIF
	/*MFM - Setiembre 2000 - Para que se grabe la sucursal en la tabla TranCont*/
    //Let Sucursal_id = op:op_branch_id

    //CDS UNLOCK DSC:op:adt_op_context
    //CDS ENDSELECT DSC:op:adt_op_context

    /* Recupero op:op_login_id 
    dupfield op:op_login_id
    dupfield op:op_operator_id*/

END SUB

/*******/
