/****o* Pendientes de agrupación/OFB:post:CDScant_piezasUP
* NOMBRE
*   OFB:post:CDScant_piezasUP
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDScant_piezasUP
	cont_tt_conAR = 0
	cont_tt_sinAR = 0
	cont_simpInt = 0
	cont_simpNac = 0
	cont_tt_prePaq = 0
	CDS SELECT FROM dsc:stockpUP_tmp_tbl becomes dsc:stockpUP_tmp_ctx where \
		tmpUP_op == op:op_operator_id
	CDS FINDFIRST dsc:stockpUP_tmp_ctx NOLOCK
	let lib:err_retval = CDSRETVAL
	WHILE (lib:err_retval != -801)
		CDS EXTRACT	dsc:stockpUP_tmp_ctx ALL
		SELECT (tmpUP_tipo_piezaUP)
			case "CONTROL CON AR"
				cont_tt_conAR = cont_tt_conAR + 1
				break
			case "CONTROL SIN AR"
				cont_tt_sinAR = cont_tt_sinAR + 1
				break
			case "SIMPLES NAC"
				cont_simpNac = tmpUP_cant_simples
				break
			case "SIMPLES INTER"
				cont_simpInt = tmpUP_cant_simples
				break
		  case "PIEZAS PREPAQ"
			cont_tt_prePaq = cont_tt_prePaq  + 1
				break
		END SELECT
		CDS FINDNEXT dsc:stockpUP_tmp_ctx NOLOCK
		let lib:err_retval = CDSRETVAL
	END WHILE
	CDS ENDSELECT dsc:stockpUP_tmp_ctx
	
END SUB

/*******/
