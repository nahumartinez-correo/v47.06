/****o* Pendientes de agrupación/OFB:post:CDScpcor_sel
* NOMBRE
*   OFB:post:CDScpcor_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDScpcor_sel

offset_0000:
    MOVE adt_cpcor_cp TO tmp_cpcor_cp
    MOVE adt_cpcor_corte TO tmp_cpcor_corte
    IF (adt_cpcor_cp.NUMCHARS == 0) THEN
        CDS SELECT FROM DSC:adt_cpcor_table BECOMES DSC:adt_cpcor_ctx
    ELSE
        CDS SELECT FROM DSC:adt_cpcor_table BECOMES DSC:adt_cpcor_ctx \
            WHERE adt_cpcor_cp == FLD:adt_cpcor_cp && adt_cpcor_corte == FLD:adt_cpcor_corte
    END IF
    let siaf:last_key = LASTKEY

    CDS MULTIDISPLAY DSC:adt_cpcor_ctx LISTadt_cpcor
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF

    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    IF (RETVAL != 0) THEN
      MOVE tmp_cpcor_cp TO adt_cpcor_cp
      MOVE tmp_cpcor_corte TO adt_cpcor_corte
      RETURN (-1)
    END IF

    CDS EXTRACT DSC:adt_cpcor_ctx ALL
    CDS UNLOCK DSC:adt_cpcor_ctx

	//mercedes - journalizacion ABM corte op. / CP / CTP
	call adt_to_bck42
	//fin mercedes
END SUB

/*******/
