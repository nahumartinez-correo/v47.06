/****o* Pendientes de agrupación/OFB:post:CDSsacagrupo_sel
* NOMBRE
*   OFB:post:CDSsacagrupo_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSsacagrupo_sel
	LOCAL adt_saca_tmp              LIKE post:adt_sacagrupo_cod
	LOCAL adt_sacagrupo_tmp         LIKE post:adt_sacagrupo_desc
	offset_0000:
    MOVE post:adt_sacagrupo_cod     TO adt_saca_tmp
    MOVE post:adt_sacagrupo_desc    TO adt_sacagrupo_tmp
    CDS SELECT FROM DSC:adt_sacagrupo_tbl BECOMES DSC:adt_sacagrupo_ctx
    CDS MULTIDISPLAY DSC:adt_sacagrupo_ctx LISTsacagrupo
    drv:button = 28
    CALL drv:but_disable
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
        MOVE adt_saca_tmp           TO post:adt_sacagrupo_cod
        MOVE adt_sacagrupo_tmp      TO post:adt_sacagrupo_desc
        CALL CDSsacagrupo_load
        RETURN (-2)
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    IF (RETVAL != 0) THEN
        RETURN (-1)
    END IF
    CDS EXTRACT DSC:adt_sacagrupo_ctx ALL
    CDS UNLOCK DSC:adt_sacagrupo_ctx
    CALL csr:proc_list(F_COPY,lst:post:LISTsacagrupo_flds,lst:post:LISTbck_sacagrupo)
    RETURN (0)
END SUB

/*******/
