/****o* Pendientes de agrupación/OFB:post:CDSmotpv_bc_sel
* NOMBRE
*   OFB:post:CDSmotpv_bc_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSmotpv_bc_sel /*bc =  bienes de cambio*/
offset_0000:
    MOVE adt_motpv_motivo TO tmp_motpv_motivo
    if (adt_prodvs_ctl_stock == "S")
        CDS SELECT FROM DSC:adt_motpv_table BECOMES DSC:adt_motpv_ctx WHERE \
        adt_motpv_sap != "" || adt_motpv_sap != " "
    else
        CDS SELECT FROM DSC:adt_motpv_table BECOMES DSC:adt_motpv_ctx
    end if
    let siaf:last_key = LASTKEY
    CALL CSR:proc_list(170,LST:LISTmotpv_flds)
    CDS MULTIDISPLAY DSC:adt_motpv_ctx LISTadt_motpv
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
        MOVE tmp_motpv_motivo TO adt_motpv_motivo
        CALL CDSmotpv_bc_load
        RETURN (-2)
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    IF (RETVAL != 0) THEN
      RETURN (-1)
    END IF
    CDS EXTRACT DSC:adt_motpv_ctx ALL
    CDS UNLOCK DSC:adt_motpv_ctx
	//mercedes - journalizacion ABM motivos
	call adt_to_bck33
	//fin mercedes

END SUB

/*******/
