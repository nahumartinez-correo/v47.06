/****o* Pendientes de agrupación/OFB:post:CDSadt_tarif_sel
* NOMBRE
*   OFB:post:CDSadt_tarif_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSadt_tarif_sel

/*Se agrega el filtrado de tablas. Diego Priore 05/04/2000*/

offset_0000:


    MOVE adt_tarif_serv TO tmp_tarif_serv
    MOVE adt_tarif_dest TO tmp_tarif_dest
    MOVE adt_tarif_desde TO tmp_tarif_desde

    /*Antes de hacer la busqueda en la tabla, limpio los campos por si hay valores ingresados
    en el tipo de caja puesto que sino no se hace el refresh correcto de los mismos.
    Diego Priore 13/04/2000*/

    clearfield adt_tarif_tipo_caja
    refresh adt_tarif_tipo_caja

    /* Se elimina el campo adt_tarif_usa_caja del ABM tarifas - Maricel 5/7/2000*/
    /*clearfield adt_tarif_usa_caja  	*/
    /*refresh adt_tarif_usa_caja  	*/


    IF ((post:adt_tarif_serv.numchars == 0) && (post:adt_tarif_dest.numchars == 0)) THEN
    	CDS SELECT FROM DSC:adt_tarif_table BECOMES DSC:adt_tarif_ctx_pl
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_tarif_ctx_pl LISTadt_tarif
    END IF

    IF ((post:adt_tarif_serv.numchars != 0) && (post:adt_tarif_dest.numchars == 0)) THEN
    	CDS SELECT FROM DSC:adt_tarif_table BECOMES DSC:adt_tarif_ctx_pl \
    	WHERE (post:adt_tarif_serv == post:adt_tarif_serv)
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_tarif_ctx_pl LISTadt_tarif
    END IF

    IF ((post:adt_tarif_serv.numchars == 0) && (post:adt_tarif_dest.numchars != 0)) THEN
    	CDS SELECT FROM DSC:adt_tarif_table BECOMES DSC:adt_tarif_ctx_pl \
    	WHERE (post:adt_tarif_dest == post:adt_tarif_dest)
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_tarif_ctx_pl LISTadt_tarif
    END IF

    IF ((post:adt_tarif_serv.numchars != 0) && (post:adt_tarif_dest.numchars != 0)) THEN
    	CDS SELECT FROM DSC:adt_tarif_table BECOMES DSC:adt_tarif_ctx_pl \
    	WHERE ((post:adt_tarif_dest == post:adt_tarif_dest) && (post:adt_tarif_serv == post:adt_tarif_serv))
    	let siaf:last_key = LASTKEY
    	CDS MULTIDISPLAY DSC:adt_tarif_ctx_pl LISTadt_tarif
    END IF
    LET lib:err_retval = CDSRETVAL
	posPickList = cdsretval
	CDS RECORDCOUNT DSC:adt_tarif_ctx_pl
	posPickList = (cdsretval - posPickList) * (-1)
	eligioPickList = true

    IF (lib:err_retval == 0x01FD) THEN
        GOTO offset_0000
    END IF
    IF (lib:err_retval == 0) THEN
        MOVE tmp_tarif_serv TO adt_tarif_serv
        MOVE tmp_tarif_dest TO adt_tarif_dest
        MOVE tmp_tarif_desde TO adt_tarif_desde
        CALL CDSadt_tarif_load
        RETURN (-2)
    END IF
	LET CDSRETVAL = lib:err_retval
    CALL lib:MISCcds_find_err

    IF (RETVAL != 0) THEN
	CALL csr:proc_list(F_CLEAR,LST:post:LISTtarif_flds)
	CALL csr:proc_list(F_REFRESH,LST:post:LISTtarif_flds)

      RETURN (-1)
    END IF


    CDS EXTRACT DSC:adt_tarif_ctx_pl ALL
    CDS UNLOCK DSC:adt_tarif_ctx_pl
	CALL csr:proc_list(F_COPY,LST:post:LISTtarif_flds,LST:post:LISTbck_tarifas)
END SUB

/*******/
