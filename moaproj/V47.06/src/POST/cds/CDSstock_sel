/****o* Pendientes de agrupación/OFB:post:CDSstock_sel
* NOMBRE
*   OFB:post:CDSstock_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSstock_sel

offset_0000:

    MOVE adt_stock_codprod TO tmp_stock_codprod
    MOVE adt_stock_coddep TO tmp_stock_coddep
    
    IF (post:adt_stock_codprod.numchars == 0) THEN
    	CDS SELECT FROM DSC:adt_stock_table BECOMES DSC:adt_stock_context
    	let siaf:last_key = LASTKEY
    	CALL CSR:proc_list(170,LST:LISTstock_flds)
    	CDS MULTIDISPLAY DSC:adt_stock_context LISTadt_stock
    ELSE
    	CDS SELECT FROM DSC:adt_stock_table BECOMES DSC:adt_stock_context \
    	WHERE (post:adt_stock_codprod == post:adt_stock_codprod)
    	let siaf:last_key = LASTKEY
    	CALL CSR:proc_list(170,LST:LISTstock_flds)
    	CDS MULTIDISPLAY DSC:adt_stock_context LISTadt_stock
    END IF
    
    
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
        MOVE tmp_stock_codprod TO adt_stock_codprod
        MOVE tmp_stock_coddep TO adt_stock_coddep
        CALL CDSstock_load
        RETURN (-2)
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    
    IF (RETVAL != 0) THEN
      CALL CSR:proc_list(F_CLEAR,LST:LISTstock_flds)
      CALL CSR:proc_list(F_REFRESH,LST:LISTstock_flds)
      RETURN (-1)
    END IF
    
    CDS EXTRACT DSC:adt_stock_context ALL
    CDS UNLOCK DSC:adt_stock_context
	//mercedes - journalizacion ABM  stock
	call adt_to_bck32
	//fin mercedes

END SUB

/*******/
