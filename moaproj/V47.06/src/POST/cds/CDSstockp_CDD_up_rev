/****o* Pendientes de agrupación/OFB:post:CDSstockp_CDD_up_rev
* NOMBRE
*   OFB:post:CDSstockp_CDD_up_rev
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postcds.h"

SUB post:CDSstockp_CDD_up_rev(p_pieza)
local l_imp_giro like giros:ImporteNeto
local l_com_giro like giros:Comision_fld
local l_lim_giro like giros:ImporteNeto
local x like siaf:i
local cant_giros like siaf:i
local giro_mas_sello like giros:ImporteNeto
local cont like siaf:i
    l_lim_giro = giros:imp_max_crem
    cds endselect "stockp_ctx"
    cds select from "stockp" becomes "stockp_ctx" \
    where post:adt_stockp_pieza == p_pieza
            
    cds findfirst "stockp_ctx" lock
    if (cdsretval == 0) then
        cds extract "stockp_ctx" all
        if (adt_stockp_original > 0) then
            adt_stockp_crem_imp = adt_stockp_original
            clearfield adt_stockp_original
        end if
        adt_stockp_Baja = "N"
        clearfield adt_stockp_devol_fec
        clearfield adt_stockp_devol_hor
        clearfield adt_stockp_devol_op
        clearfield adt_stockp_NIS_dest
        clearfield adt_stockp_DocInic
        
        CDS CLEARBUFFER "stockp_ctx"
        
        CDS APPEND "stockp_ctx" \
        adt_stockp_original \
        adt_stockp_NIS_dest \
        adt_stockp_crem_imp \
        adt_stockp_Baja \
        adt_stockp_devol_fec \
        adt_stockp_devol_hor \
        adt_stockp_devol_op \
        adt_stockp_DocInic
        
        x = 0
        while (x < 10)
            if (adt_stockp_nro[x].numchars > 0) then
                if (giros:Serie_fld == adt_stockp_serie[x] && giros:digito_fld == adt_stockp_dig[x] && \
                giros:NroGiro_fld == adt_stockp_nro[x]) then
                    clearfield adt_stockp_serie[x]
                    clearfield adt_stockp_nro[x]
                    clearfield adt_stockp_dig[x]
                    clearfield adt_stockp_fec[x]
                    clearfield adt_stockp_PresNro[x]
                    clearfield adt_stockp_impGiro[x]
                    clearfield adt_stockp_TT_giros[x]
                    
                    CDS APPEND "stockp_ctx" \
                    adt_stockp_serie[x] \
                    adt_stockp_nro[x] \
                    adt_stockp_dig[x] \
                    adt_stockp_fec[x] \
                    adt_stockp_PresNro[x] \
                    adt_stockp_impGiro[x] \
                    adt_stockp_TT_giros[x]
                end if
                cont = cont + 1
            end if
            x = x + 1
        end while        
        if (cont == 1) then
            adt_stockp_rev = "N" 
            CDS APPEND "stockp_ctx" \
                    adt_stockp_rev 
        end if                                   
        CDS UPDATE "stockp_ctx" LOCK
        CDS UNLOCK "stockp_ctx"
        cds endselect "stockp_ctx"
        return 
    end if
    CDS UNLOCK "stockp_ctx"
    cds endselect "stockp_ctx"
    cds endselect "StockpCDD_ctx"
    cds select from "StockpCDD"  becomes "StockpCDD_ctx" \
    where adt_CDD_pieza  == p_pieza
        
    cds findfirst "StockpCDD_ctx" lock
    if (cdsretval == 0) then
        cds extract "StockpCDD_ctx" all
        clearfield adt_CDD_NIS_dest
        clearfield adt_CDD_DocInic
        clearfield post:adt_CDD_devol_fec
        clearfield post:adt_CDD_devol_op
        clearfield post:adt_CDD_devol_hor
        if (adt_CDD_original > 0) then
            adt_CDD_crem_imp = adt_CDD_original
            clearfield adt_CDD_original
        end if
        adt_CDD_Baja = "N"
        
        CDS CLEARBUFFER "StockpCDD_ctx"
        
        CDS APPEND "StockpCDD_ctx" \
        adt_CDD_original \
        adt_CDD_NIS_dest \
        adt_CDD_crem_imp \
        post:adt_CDD_devol_fec \
        post:adt_CDD_devol_op \
        post:adt_CDD_devol_hor \
        adt_CDD_Baja \
        adt_CDD_DocInic
        
        x = 0
        while (x < 10)
            if (adt_CDD_nro[x].numchars > 0) then
                if (giros:Serie_fld == adt_CDD_serie[x] && giros:digito_fld == adt_CDD_dig[x] && \
                    giros:NroGiro_fld == adt_CDD_nro[x]) then
                    clearfield adt_CDD_serie[x]
                    clearfield adt_CDD_nro[x]
                    clearfield adt_CDD_dig[x]
                    clearfield adt_CDD_fec[x]
                    clearfield adt_CDD_PresNro[x]
                    clearfield adt_CDD_impGiro[x]
                    clearfield adt_CDD_TT_giros[x]
                    
                    CDS APPEND "StockpCDD_ctx" \
                    adt_CDD_serie[x] \
                    adt_CDD_nro[x] \
                    adt_CDD_dig[x] \
                    adt_CDD_fec[x] \
                    adt_CDD_PresNro[x] \
                    adt_CDD_impGiro[x] \
                    adt_CDD_TT_giros[x]
                end if
                cont = cont + 1
            end if
            x = x + 1    
        end while        
        if (cont == 1) then
            adt_CDD_rev = "N" 
            CDS APPEND "StockpCDD_ctx" \
                    adt_CDD_rev 
        end if        
        CDS UPDATE "StockpCDD_ctx" LOCK
        CDS UNLOCK "StockpCDD_ctx"
        cds endselect "StockpCDD_ctx"
        return 
    else
        CDS UNLOCK "StockpCDD_ctx"
        cds endselect "StockpCDD_ctx"
        return -2
    end if 

END SUB
/*******/
