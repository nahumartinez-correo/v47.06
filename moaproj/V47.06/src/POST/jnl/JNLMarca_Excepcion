/****o* Pendientes de agrupación/OFB:post:JNLMarca_Excepcion
* NOMBRE
*   OFB:post:JNLMarca_Excepcion
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postjnl.h"

SUB post:JNLMarca_Excepcion

  CDS APPEND DSC:tlr:CONjnl_write \
        FLD:tipo_excepcion \
        FLD:id_excepcion \
        FLD:fecha_excepcion \
        FLD:hora_excepcion \
        FLD:existe_fisicamente \
        FLD:nro_acta \
        FLD:nro_denuncia \
        FLD:id_comisaria \
        FLD:dom_comisaria \
        FLD:id_juzgado \
        FLD:id_secretaria \
        FLD:observacion_excep \
        FLD:adt_codseq_nro

	if (!testflag(tlr:tran_flags,correction)) then
 		/*MFM - Obs 431: Si es una pieza robada y se observó tengo que generar la
 		novedad P para enviarla a T&T*/
		If (tipo_excepcion == "PIEZA" && existe_fisicamente == "N") then
			CALL MISCGeneroObserv(post:id_excepcion)
		End if
		CDS APPEND DSC:tlr:CONjnl_write FLD:adt_novtt_fecha_obs
		CLEARFIELD adt_novtt_fecha_obs
	else
		/*MFM - Obs 431: Si es una pieza robada y se observó tengo que borrar el evento P
		generado*/
		sequence_aux = tlr:jnl_sequence_corr
		CALL post:CDSBorro_Scaneos("E")
	end if
	
END SUB

/*******/
