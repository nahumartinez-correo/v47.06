/****o* Pendientes de agrupación/OFB:post:JNLcanc_reemp
* NOMBRE
*   OFB:post:JNLcanc_reemp
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postjnl.h"

SUB post:JNLcanc_reemp
    LOCAL loc_idx LIKE siaf:i

    //CALL csr:proc_list(F_APPEND,DSC:tlr:CONjnl_write,LST:LISTreemp_chqrech_up,0)   
    //CALL giros:JNLfirma_clave

    CDS APPEND DSC:tlr:CONjnl_write \
	FLD:giros:firma_enviada \
	FLD:giros:Firma_comm  \
	FLD:post:adt_codseq_nro \
	FLD:giros:hora_viaje \
	FLD:giros:dia_viaje \
	giros:clave_hdr_giros

    //cgw:se agrega journalizacion de post:Recep_CliTipo
    CDS APPEND DSC:tlr:CONjnl_write \
        Recep_CliTipo \
    	NisUP \
    	CliUP \
    	tes:banco_codigo \
    	siaf:cheqcuenta \
    	siaf:nro_cheque \
    	imp_aux \
    	siaf:f_vencimiento \
    	siaf:f_emision \
    	post:comision_rechazo

    CDS APPEND DSC:tlr:CONjnl_write \
	giros:codigo_procesamiento \
	post:cant_valores \
	siaf:importe

    // se journalizan solo la cantidad de valores ingresados 
    // (no todos los elementos del vector) Por ahora solo son los dos 
    //primeros, pero lo hago en general
    let loc_idx = 0        
    while (loc_idx < cant_valores) 
           Cds Append DSC:tlr:CONjnl_write  \
               ValorPago[loc_idx]     \
               BancoPago[loc_idx] \
               Bco_Cuenta[loc_idx] \
               NumCuenta[loc_idx] \
               ImporteBanco[loc_idx]  \
               ImporteBase[loc_idx] \
               Emision_Fecha[loc_idx] \
               Valor_Fecha[loc_idx] \
               Cod_Interno[loc_idx]   \
               chq_clearing[loc_idx]        
               let loc_idx = loc_idx + 1
    end while

    CDS APPEND DSC:tlr:CONjnl_write \
	cliente \
	post:cheqrech_moneda \
	post:CliCod_aux AS post:CliCod

    call post:MISCcampos_reporte(0,1,siaf:importe,NO_TARIFA)   	
    CALL csr:proc_list(F_APPEND,DSC:tlr:CONjnl_write,LST:LISTreporte,0)   
       	
END SUB

/*******/
