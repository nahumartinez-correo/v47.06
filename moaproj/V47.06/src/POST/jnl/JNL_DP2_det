/****o* Pendientes de agrupación/OFB:post:JNL_DP2_det
* NOMBRE
*   OFB:post:JNL_DP2_det
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postjnl.h"

SUB post:JNL_DP2_det
    /* Nov. 1999 - B. Petrella */
    CALL MISCclear_DP1_JNL /* Limpia campos a jnl. */

    LET adt_serv_corteop = adt_corteop_cod
    CALL CDSconsCorteOp_DP1 /* Cons. CorteOp para obtener si */
				/* la Pza. requiere cont, saca o cte. de linea */
    CALL CDSconsRelMod_DP2

    IF (adt_relMod_sacatipo.numchars > 0)
		LET jnl_corteop_saca = "S"
    ELSE
		LET jnl_corteop_saca = "N"
    END IF

    CDS APPEND DSC:tlr:CONjnl_write \
            post:adt_apertura_cod \
            post:adt_corteop_desc \
		post:adt_corteop_cod \
            post:adt_apertura_desc  \
		post:Pieza

    CDS APPEND DSC:tlr:CONjnl_write \
		post:adt_apertura_cod AS post:jnl_apertura_cod \
		post:adt_relMod_grucorte AS post:jnl_grucorte_cod \
		post:adt_corteop_cod AS post:jnl_corteop_cod \
		post:jnl_corteop_guiacont \
		post:jnl_corteop_saca \
		post:jnl_corteop_despacho

    CDS APPEND DSC:tlr:CONjnl_write \
		post:jnl_hora_llencont \
		post:jnl_fecha_llencont \
		post:jnl_guia_cont \
		post:jnl_hora_llensaca \
		post:jnl_fecha_llensaca \
		post:jnl_guia_saca \
		post:jnl_hora_despacho \
		post:jnl_fecha_despacho \
		post:jnl_guia_despacho \
		post:codseq_dev \
		post:es_prioritaria
	/*CSZ*/	
	CDS APPEND DSC:tlr:CONjnl_write \
        post:jnl_simp_esp \
        post:jnl_guia_especial \
        post:jnl_simp_esp_aux

	/*MFM - Se agrega el campo del operador al que se le transfiere la pieza*/
    jnl_op_transf = ""
    CDS APPEND DSC:tlr:CONjnl_write \
        FLD:jnl_op_transf
        
	/*MFM*/
	CDS APPEND DSC:tlr:CONjnl_write \
		post:adt_stockp_pie_obs AS post:jnl_stockp_pie_obs \
		post:adt_stockp_reenc  AS post:jnl_stockp_reenc\
		post:adt_stockp_reenc_cul AS post:jnl_stockp_reenc_cul
	
	/*MFM - Grabo el campo que indica si la pieza tiene marca de excepcion en "N"*/
    jnl_marca_excep = "N"
    jnl_excep_existe = ""
    CDS APPEND DSC:tlr:CONjnl_write \
	post:jnl_marca_excep \
	post:jnl_excep_existe
		
    if (testflag(tlr:tran_flags,correction)) then
        /* Si se esta reversando hay que limpiar */
        /* los campos de stockp: adt_stockp_Baja = N, adt_stockp_devol_op = "", */
	  /* adt_stockp_devol_fe == "", adt_stockp_devol_hor = "" */
	  /* Y se actualizan: adt_stockp_ult_modfe, adt_stockp_ult_modho, adt_stockp_ult_modop */
		call CDSrevStockp_DP2
		/*MFM - Borro los Scaneos correspondientes a dicha devolución*/
		CALL CDSBorro_Scaneos("D")
	else
		/*MFM - Grabo los Scaneos correspondientes a dicha devolución*/
		CALL MISCes_TT(Pieza)
      	IF (RETVAL == 0) THEN
	        CALL MISCGrabo_Scaneos_DP
    	ELSE
    	    post:adt_novtt_pieza = Pieza
    	    IF (jnl_simp_esp_aux != "")  THEN
    			adt_novtt_simp_esp = jnl_simp_esp_aux
    		ELSE
    			adt_novtt_simp_esp = jnl_simp_esp
    		END IF
    		CALL CDSGrabo_Scaneo_Aux
    	END IF 
    endif


END SUB

/*******/
