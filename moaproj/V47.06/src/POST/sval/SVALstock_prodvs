/****o* Pendientes de agrupación/OFB:post:SVALstock_prodvs
* NOMBRE
*   OFB:post:SVALstock_prodvs
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postsval.h"

SUB post:SVALstock_prodvs
    IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
        CDS SELECT FROM DSC:stock_pv_table BECOMES DSC:stock_pv_context \
            WHERE adt_stock_pv_op == op:op_operator_id
        CDS FINDFIRST DSC:stock_pv_context LOCK
        IF (CDSRETVAL != 0) THEN
            ERRMSG LST:common:errmsg_list,"IMPOSIBLE SUPERVISAR, NO EXISTEN AJUSTES GRABADOS"
	    RETURN (-2)
        END IF
    ELSE
	/*para la reversa tengo que controlar que el stock no quede negativo*/
        fld:adt_stock_coddep = adt_depstock_cod
        fld:adt_stock_codprod = adt_prodvs_cod
        /* Se pisa este valor, al hacer un extract de la PresuAct, por eso lo recupero */
        post:cantidad2 = siaf:cantidad
        call CDSstock_load
        IF (siaf:cantidad > (adt_stock_stock - adt_stock_reserva)) && (agrega_disc == "A") THEN
            MSGBOX "No se puede reversar - Stock insuficiente",0x00,"ERROR"
            RETURN (-2)
        END IF
    END IF
    /*CALL MISCreqsup_prodvs
    IF (RETVAL < 0) THEN
        return (-2)
    END IF*/
    /*PARA QUE FUNCIONE BIEN LA REVERSA*/
    CALL siaf:SVALnivel_sup
    IF (RETVAL < 0) THEN
	return (-2)
    END IF

    IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
        CDS SELECT FROM DSC:stock_pv_table BECOMES DSC:stock_pv_context \
            WHERE adt_stock_pv_op == op:op_operator_id
        CDS FINDFIRST DSC:stock_pv_context LOCK
        DO

            IF (CDSRETVAL != 0) THEN
                BREAK
            END IF
            CDS EXTRACT DSC:stock_pv_context ALL
            fld:tmp_stock_stock = fld:adt_stock_stock

            CALL MISCverificar_stock
            IF (RETVAL < 0) THEN
                CALL PBhabil_pbcb_stock
                CDS DELETE DSC:stock_pv_context
                CDS UNLOCK DSC:stock_pv_context
            	RETURN (-2)
            END IF

			CALL post:CDSprodvs_load
            /*adt_stock_tarifa  = fld:adt_prodvs_tarifa*/
            siaf:importe2	  = fld:adt_prodvs_tarifa * cantidad2
            
            fld:adt_stock_codprod = adt_prodvs_cod
        	fld:adt_stock_coddep = adt_depstock_cod
        	
        	if (agrega_disc == "D") then
				call post:CDSreserva_stock(adt_stock_codprod,00,cantidad2)
			end if
			/*Hago la reserva de stock */
            if (retval == 0 && agrega_disc == "D") || (agrega_disc == "A")
	            ;adt_stock_codprod = fld:adt_prodvs_cod
	            ;adt_stock_coddep  = fld:adt_depstock_cod
	            adt_stock_stock   = fld:tmp_stock_stock
	
	            adt_stock_fumst   = fld:adt_stock_fumst
	            adt_stock_tumst   = fld:adt_stock_tumst
				
				
				
	            ;CALL CDSstock_save
	
	            tes:es_tesoro = "S"
	            UNGETKEY 0x190
	            FLD:drv:INDjnl_rtn = OFB:post:JNLstock_prodvs
			    CALL tlr:JNLtran
			end if
			
            CDS DELETE DSC:stock_pv_context
            CDS UNLOCK DSC:stock_pv_context

            CDS FINDNEXT DSC:stock_pv_context LOCK
        LOOP
        CLEARFIELD drv:INDjnl_rtn
        CDS ENDSELECT DSC:stock_pv_context
        
    END IF
/*PARA QUE FUNCIONE BIEN LA REVERSA*/
    IF (TESTFLAG(tlr:tran_flags,correction)) THEN
    	tes:es_tesoro = "S"
    ELSE
    	tes:es_tesoro = "N"
    ENDIF
    
 // CALL CDSdel_tab_stockaux
 // CALL CDSdelete_tabla(DSC:post:stock_pv_table,DSC:post:stock_pv_context)

END SUB

/*******/
