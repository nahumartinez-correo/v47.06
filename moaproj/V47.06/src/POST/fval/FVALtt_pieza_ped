/****o* Pago en Destino/OFB:post:FVALtt_pieza_ped
* NOMBRE
*   OFB:post:FVALtt_pieza_ped
* DESCRIPCION
*   Valida el formato del track and trace y lo busca en el picklist de piezas devueltas o robadas
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   post:SCRN30030
* DOCUMENTACION
*   NI50479
* SOURCE
*/
#include "postfval.h"

SUB post:FVALtt_pieza_ped
	LOCAL idx LIKE siaf:idx
	LOCAL l_linea LIKE common:csr_string

	CALL csr:trimfield (post:track_trace)
	IF (post:track_trace.NUMCHARS > 0) THEN	
		//Controlo la cantidad de dígitos, si es des 11 le agrego "AR"
		CALL MISCcant_digitos_tt(track_trace,"1")
		
		IF (post:track_trace.NUMCHARS < 13 || \
			SUBSTR(post:track_trace,11,2) != "AR" || \
			SUBSTR(post:track_trace,0,2) == "") THEN
			MSGBOX "EL TRACK & TRACE LEIDO ES INCORRECTO",0x00,"ERROR"
			RETURN (-2)
		END IF
		CALL MISCvalida_digito(post:track_trace)
		IF (RETVAL != 0) THEN
			RETURN (-2)
		END IF

		idx = 0
		l_linea = post:track_trace
		
		//busco la primera coincidencia
		CALL csr:PickOp (3,DSC:post:PickPiezasPED,l_linea,idx)
		IF (RETVAL >= 0) THEN		
			CALL post:MISCparse_pzas_ped(l_linea)
		ELSE
			ERRMSG common:errmsg_list,"PIEZA INEXISTENTE"
			RETURN (-2)
		END IF
	ELSE
		drv:button = 0
		CALL drv:but_disable
		CALL drv:MISCf_sacombopl (DSC:post:PickPiezasPED, common:csr_string,drv:button)
		IF (RETVAL >= 0) THEN
			l_linea = common:csr_string
			CALL post:MISCparse_pzas_ped(l_linea)
		ELSE
			drv:button = 0
			CALL drv:but_enable
		END IF

		IF (LASTKEY == RT_ESC) THEN
			drv:button = 0
			CALL drv:but_enable
			RETURN -2
		END IF
	END IF
	
END SUB

/*******/
