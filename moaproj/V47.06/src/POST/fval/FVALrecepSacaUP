/****o* Pendientes de agrupación/OFB:post:FVALrecepSacaUP
* NOMBRE
*   OFB:post:FVALrecepSacaUP
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postfval.h"

SUB post:FVALrecepSacaUP
    /* RECEPCION DE SACA            */
    /* B. Petrella - nov. 1999 	*/
    LOCAL i like idx
    LET i = 0
    IF (lastkey != 0x191) /* ENTER */
	    call csr:trimfield(UP_RecepSaca)
	    if (post:UP_RecepSaca.numchars != 5) then
      	     let common:csr_string = "Error en UP."
	           errmsg common:errmsg_list,FLD:common:csr_string
      	     return (-2)
	    end if

	    /* UP tiene que tener formato X9999 */
	    DO
		SELECT (SUBSTR(UP_RecepSaca,i,1))
			Case "0"
	        	Case "1"
			Case "2"
        		Case "3"
			Case "4"
      	  	Case "5"
			Case "6"
	        	Case "7"
			Case "8"
        		Case "9"
				IF (i == 0)
		           		let common:csr_string = "Error en UP."
			           	errmsg common:errmsg_list,FLD:common:csr_string
					return (-2)
				END IF
				i = i + 1
				Break
			Case ELSE
				IF (i != 0)
		      	     	let common:csr_string = "Error en UP."
		           		errmsg common:errmsg_list,FLD:common:csr_string
					return (-2)
				END IF
				i = i + 1
				Break
		END SELECT
		IF (i > 5)
			BREAK
		END IF
    	LOOP
    END IF
END SUB

/*******/
