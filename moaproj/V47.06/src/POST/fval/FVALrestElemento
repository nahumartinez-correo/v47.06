/****o* Pendientes de agrupación/OFB:post:FVALrestElemento
* NOMBRE
*   OFB:post:FVALrestElemento
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postfval.h"

SUB post:FVALrestElemento
	local l_string like common:csr_string
	local l_numeric like adt_region_cod
	local indice like siaf:i

	if (currentfield.numchars == 0)
		return
	endif

	clearfield common:csr_string

	l_string = currentfield
	select (adt_rest_tituloRest)
		case REST_REG
			l_string = currentfield
			if (l_string.numchars > 2)
				ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
				return -2
			endif
			l_numeric = substr(l_string,0,2)
			CDS SELECT FROM "Region" BECOMES restElemento_ctx	\
				WHERE adt_region_cod == l_numeric
			break
		case REST_PRV
			if (l_string.numchars > 1)
				ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
				return -2
			endif
			l_string = substr(l_string,0,1)
			CDS SELECT FROM "provincias" BECOMES restElemento_ctx	\
				WHERE adt_pcia_cod == l_string
			break
		case REST_SUC
			if (l_string.numchars > 5)
				ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
				return -2
			endif
			l_string = substr(l_string,0,5)
			CDS SELECT FROM "BR_adt_br" BECOMES restElemento_ctx	\
				WHERE admin:adt_br_branch == l_string
			break
		case REST_CLI
		    call post:MISCArmo_PickGeneral(REST_CLI)

			indice = PL_GETITEM
			do
				call csr:myPickcontrol(dsc:pic_rest_elemento,common:csr_string,indice)
				if (retval < 0)
					break
				end if
				if (substr(common:csr_string,0,1) == l_string)
					common:csr_string = substr(common:csr_string,2,999)
					return 0
				endif
				indice = indice + 1
			loop
			ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
			common:csr_string = substr(common:csr_string,2,999)
			return -2
			break
		case REST_UP
		    if (l_string.numchars > 5)
				ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
				return -2
			endif
			l_string = substr(l_string,0,5)
			CDS SELECT FROM DSC:post:cliocaUP_tbl BECOMES restElemento_ctx	\
				WHERE post:NisUP == l_string
			break
	end select
    CDS FINDFIRST restElemento_ctx nolock
	if (cdsretval != 0)
		ERRMSG lst:common:errmsg_list,"VALOR INVALIDO!"
	    CDS ENDSELECT restElemento_ctx
		return -2
	else
		; dejo en el common:csr_string la descripcion.
		select (adt_rest_tituloRest)
			case REST_REG
				CDS EXTRACT restElemento_ctx	\
					adt_region_desc into common:csr_string
				break
			case REST_PRV
				CDS EXTRACT restElemento_ctx	\
					adt_pcia_desc into common:csr_string
				break
			case REST_SUC
				CDS EXTRACT restElemento_ctx	\
					admin:adt_br_bank_name into common:csr_string
				break
			case REST_CLI
				; ya se hice antes
				break
			case REST_UP
				CDS EXTRACT restElemento_ctx CloTipDoc, CloCuit, CloRazon
				fprint common:csr_string, "%2s %11s - %s", CloTipDoc, CloCuit, CloRazon
		end select
	endif
    CDS ENDSELECT restElemento_ctx
END SUB

/*******/
