/****o* Expedición/OFB:post:FVALnew_pza_saca
* NOMBRE
*   OFB:post:FVALnew_pza_saca
* DESCRIPCION
*	Esta rutina SIEMPRE desmarca las piezas/contenedores a ingresar en saca del campo post:DetalleContenidoGC y tabla DetTmp
*  de la TX CIerre de Saca.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   SCR:post:SCRNllenadoSaca 
* DOCUMENTACION
*  http://jira.sibs.net/jira/browse/AUT-351
*  INICIATIVA 50571 (2019)
* SOURCE
*/
#include "postfval.h"

Sub post:FVALnew_pza_saca
	LOCAL cod_pieza_cont LIKE common:csr_string
	//LOCAL l_retval LIKE lib:err_retval
	
	CALL CSR:trimfield (post:Pieza2)
	
	IF (post:Pieza2.numchars > 0) THEN
		//PARA EL AGREGADO DE AR EN t&t VALIDOS
		CALL MISCesTT(post:Pieza2)
		//ressguardo el resultado de la MISCesTT para saber si es un T&T valido
	//	l_retval = RETVAL
		LET cod_pieza_cont = post:Pieza2
	
	   CDS SELECT FROM DSC:post:DetTmp BECOMES DSC:post:DetTmp_ctx \
		    WHERE (op:op_operator_id == op:op_operator_id \
		    &&  post:Pieza_id == cod_pieza_cont)      
		    
	    CDS FINDFIRST DSC:post:DetTmp_ctx LOCK
	    IF (CDSRETVAL == -801) THEN
	    	CDS ENDSELECT DSC:post:DetTmp_ctx
	 	  
	    	//VERIFICA SI SE ESTA PONIENDO UN CONTENEDOR EN LA SACA
	    		FPRINT cod_pieza_cont "% 8.8s" post:Pieza2 //Puede ser un contenedor y no una pieza
		    		
				CDS SELECT FROM DSC:post:DetTmp BECOMES DSC:post:DetTmp_ctx \
					WHERE (op:op_operator_id == op:op_operator_id \
					&& post:Pieza_id == cod_pieza_cont)
			
				CDS FINDFIRST DSC:post:DetTmp_ctx LOCK
	    	IF (CDSRETVAL == -801) THEN
						MSGBOX "LA PIEZA/CONTENEDOR NO EXISTE PARA EXPEDIR.",0x00,"ERROR"
						CDS UNLOCK DSC:post:DetTmp_ctx
						CDS ENDSELECT DSC:post:DetTmp_ctx
						CLEARFIELD post:Pieza2 
						REFRESH post:Pieza2
						RETURN -2
				END IF
    	
     END IF
			//si llega aca es porque encuentra algo	
			//si lo que encuentra es un T&T valido hay que verificar la concurrencia
//		IF (l_retval == 0) //si es un TT valido
			//hay que verificar la concurrencia tanto de pieza como de contenedor. Desloqueo la tabla primero
				CDS UNLOCK DSC:post:DetTmp_ctx
				CDS ENDSELECT DSC:post:DetTmp_ctx
				CALL CDSVerifPzaSaca (cod_pieza_cont)
				IF (RETVAL < 0) THEN
						CLEARFIELD post:Pieza2 
						REFRESH post:Pieza2
						RETURN -2
			 END IF
			// VUELVO A RECUPERAR EL REGISTRO
			CDS SELECT FROM DSC:post:DetTmp BECOMES DSC:post:DetTmp_ctx \
		   WHERE (op:op_operator_id == op:op_operator_id \
		   &&  post:Pieza_id == cod_pieza_cont)     
				CDS FINDFIRST DSC:post:DetTmp_ctx LOCK
	//	 END IF			
		IF (CDSRETVAL == 0) THEN
		CDS EXTRACT DSC:post:DetTmp_ctx ALL 
		CDS CLEARBUFFER DSC:post:DetTmp_ctx
		//ESTO NO ENTIENDO PORQUE LO HACE SI LO HACE DE NUEVO EN LAS RUTINAS DONDE MARCA LA PIEZA...
		CLEARFIELD DetalleContenidoGC
		REFRESH post:DetalleContenidoGC
		
		
			FPRINT post:DetalleContenidoGC,"%-10.10e" FLD:tlr:jnl_date
			/*MFM (9.11.2001) PS 4445*/
			MOVE post:Pieza_id to SUBSTR(DetalleContenidoGC,11,32)
			MOVE post:adt_novtt_grupo to SUBSTR(DetalleContenidoGC,44,2)
			MOVE post:jnl_stockp_reenc_cul to SUBSTR(DetalleContenidoGC,47,1)
			MOVE post:MarcaBorrado to SUBSTR(DetalleContenidoGC,49,1)
	
		REFRESH post:DetalleContenidoGC
				            
		CDS UNLOCK DSC:post:DetTmp_ctx
		CDS ENDSELECT DSC:post:DetTmp_ctx
		
		CALL post:MISCAsignaPiezaSaca
		//Contadores de piezas y saca
    CALL post:MISCcontadores_exp
  endif
	 END IF
	CLEARFIELD post:Pieza2
	REFRESH post:Pieza2
	SETVALDONE Pieza2
	NEXTFIELD  post:Pieza2 //para que el cursor se quede en el campo
	
End Sub

/*******/
