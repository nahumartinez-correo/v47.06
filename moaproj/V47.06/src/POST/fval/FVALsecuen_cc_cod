/****o* Pendientes de agrupación/OFB:post:FVALsecuen_cc_cod
* NOMBRE
*   OFB:post:FVALsecuen_cc_cod
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "postfval.h"

SUB post:FVALsecuen_cc_cod

// si estan seteadas alguna de las flags, es porque se presiono alguno de
// los sidebars (ABM func's) asi que no es necesario que valide nuevamente...
if (testflag(admin:mode_flags,update) || testflag(admin:mode_flags,delete) ||\
    testflag(admin:mode_flags,imprimir)) then
        return
end if

// valido que sea uno de los codigos conocidos
pickverify adt_ccseq_codigo,PIC:secuen_cc_cod,update
if (retval < 0) then
    return (-2)
end if
move substr(common:csr_string,4,20) to adt_ccseq_desc
refresh adt_ccseq_desc

// valido el codigo de secuencia
CDS SELECT FROM DSC:post:TABccseq BECOMES DSC:post:CONccseq \
    WHERE adt_ccseq_suc == adt_ccseq_suc && \
          adt_ccseq_codigo == adt_ccseq_codigo
if (cdsretval == 0) then
    CDS FINDFIRST DSC:post:CONccseq NOLOCK
    if (cdsretval == 0) then
           // es un codigo existente => muestro los datos de la tabla
           CDS EXTRACT DSC:post:CONccseq adt_ccseq_desc \
                                         adt_ccseq_fecha \
                                         adt_ccseq_numero \
                                         adt_ccseq_suc \
                                         adt_ccseq_codigo
           if (cdsretval == 0) then
              // desencripto el numero
              clearfield common:csr_string
              // FGB 23.2.2001 - Req. 2386 -
              // Por problemas en la encriptacion/desencriptacion de la 
              // secuencia, se comenta dicho proceso
              // call BlowFishDes(adt_ccseq_numero,common:csr_string)
              move adt_ccseq_numero to common:csr_string
              let retval = 0 // p' simular lo devuelto por la rutina
              // FGB fin
              if (retval == 0) then
                  // pongo el nro. desencriptado en el campo de la pantalla
                  fprint nro_impre_tmp "%8.8d" common:csr_string
                  ;let nro_impre_tmp = common:csr_string
                  call csr:proc_list F_REFRESH LST:post:LISTcc_seq_flds
    	          drv:button = SB0
    	          CALL drv:but_enable
    	          drv:button = SB1
    	          CALL drv:but_enable
    	          drv:button = SB2
    	          CALL drv:but_disable
    	          drv:button = SB3
    	          CALL drv:but_disable
                  return (0)
              end if
           end if
    else
           clearfield nro_impre_tmp
           clearfield adt_ccseq_fecha
           call csr:proc_list F_REFRESH LST:post:LISTcc_seq_flds

           // no esta en la tabla... es un codigo nuevo
	   drv:button = SB2
     	   CALL drv:but_enable
	   drv:button = SB1
     	   CALL drv:but_disable
	   drv:button = SB0
  	   CALL drv:but_disable
	   drv:button = SB3
  	   CALL drv:but_disable
        return (0)
    end if
end if

// si llego hasta aca es porque algo anduvo mal... 
return (-2)
END SUB

/*******/
