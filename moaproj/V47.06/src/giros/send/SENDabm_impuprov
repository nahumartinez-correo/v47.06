/****o* Pendientes de agrupación/OFB:giros:SENDabm_impuprov
* NOMBRE
*   OFB:giros:SENDabm_impuprov
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   giros:TRANABM_IMPUPROV
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girossend.h"

/* imp. de sello de prov */
SUB giros:SENDabm_impuprov
	LOCAL l_tabla LIKE admin:tabla 
	LOCAL l_INDCamposTablas LIKE post:INDCamposTablas 
 
	call post:MISCAutorizoModif("Impuprov")
	; CALL CSR:proc_list(190,LST:LISTImpuProv_fld)
	if (retval < 0) then
		return (-2)
	end if    
	
	drv:save_button = drv:last_button
	IF (TESTFLAG(admin:mode_flags,update)) THEN
		CALL CDSabmImpuprov_save        
		;SMC journalizo Modificacion
		call post:MISCJournalTablas        
		CALL drv:side_bar_disable
		RESETFLAG admin:mode_flags,update
	ELSE
		IF (TESTFLAG(admin:mode_flags,delete)) THEN
			RESETFLAG admin:mode_flags,delete
			call MISCind_Impuprov
			;SMC Modificacion para Testear por impactos antes de Borrar.
			;    Si se detecta impacto, se pregunta si se desea imprimir el reporte
			call lib:MISCchk_impacto
			if (retval < 0) then
				return (retval)
			endif
			CALL lib:adt_delete_verify
			IF (RETVAL == 0) THEN
				CALL CDSabmImpuprov_del                
				;SMC journalizo Modificacion  
				call post:MISCJournalTablas 
				CALL drv:side_bar_disable
				IF (RETVAL != 0) THEN
					drv:button = drv:save_button
					CALL drv:but_up_enable
					RETURN (-1)
				ELSE
					CALL CSR:proc_list(170,LST:LISTImpuProv_fld)
					CALL MISCabmImpuprov_init
					CALL CSR:proc_list(190,LST:LISTImpuProv_fld)
					RETURN (-1)
				END IF
			END IF
		ELSE
			IF (TESTFLAG(admin:mode_flags,imprimir)) THEN
				RESETFLAG admin:mode_flags,imprimir
				
        //Inicio gpb:AUT-2415 
        /*CALL MISCdumptable 
         CALL CDSdumptable*/  
				//resguardo los valores originales
				LET l_tabla = admin:tabla 
				LET l_INDCamposTablas = post:INDCamposTablas         
        CALL post:MISCdumptableNew 
				admin:tabla = "Impuprov"
				post:INDCamposTablas = LST:LISTImpuProv_fld
        CALL post:CDSdumptableNew  
        //recupero los valores originales
				LET admin:tabla = l_tabla
				LET post:INDCamposTablas = l_INDCamposTablas
        //Fin gpb:AUT-2415   
				
				/* CALL giros:MISCPr_rep_impp*/
				CALL CSR:proc_list(170,LST:LISTImpuProv_fld)
				/* CALL MISCabmImpuprov_init*/
				CALL CSR:proc_list(190,LST:LISTImpuProv_fld)
				RETURN (-1)
			END IF
		END IF
		RETURN (-1)
	END IF
  CALL CSR:proc_list(170,LST:LISTImpuProv_fld)
  CALL MISCabmImpuprov_init
  CALL CSR:proc_list(190,LST:LISTImpuProv_fld)
  refresh window
  RETURN (-1)
END SUB

/*******/
