/****o* Giros/OFB:giros:RCVEgral_giros
* NOMBRE
*   OFB:giros:RCVEgral_giros
* DESCRIPCION
*   Rutina RCVE general para Giros.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosrcve.h"

SUB giros:RCVEmult_WI
    LOCAL cont LIKE siaf:idx
    LOCAL cant_reg LIKE siaf:idx
    local aux_del like common:csr_string

    // Blanquear Campos de Comunicacion.
    //call csr:proc_list(F_CLEAR,LST:LISTcomunic_fld)
    //call csr:proc_list(F_CLEAR,LST:LISTcomunic_inter)

   //JLA OJO - EL SELECT NO SE BANCA MAS CASES (DA ERROR DE COMPILACION)
	
	singlestep on
	
        //aca me viene la longitud del bit 56
        COMM get common:csr_string from MSG TYPE BCD LENGTH 2
        
        //le saco los 0 adelante si tiene
        Fprint post:codigo_impre "%d" common:csr_string
              
       //post:codigo_impre		
       //longitud del msg 1=196 con la cantidad incluida
       
		//aca tengo la longitud - los 3 bits de la cantidad
		//codigo impre = 196 - 3 = 193 ponele
		//1 registro = 193
		//2 registros = 386
		//3 registros = 579
		//4 registros = 772
		//5 registros = 965
		//post:codigo_impre = post:codigo_impre - 3     
		
		
	//obtengo todo el registro incluso los 3 primeros bits de la cantidad
	COMM get common:csr_string_4096 from MSG type ASCII length post:codigo_impre   //cantidad de registros que en este caso es 1?
	
	//aca tngo que hacer un substrin eliminando los 3 primeros
	common:csr_string_4096 = substr(common:csr_string_4096,3,post:codigo_impre)
	post:codigo_impre = post:codigo_impre - 3 
	
	cont = 0
	
	WHILE ( post:codigo_impre > cont)
		
		CALL MISCclearMulti_70388
	
		EmisorNombre_comm = SubStr(common:csr_string_4096,cont,40)
		cont = cont + 40

		Emisor_Apell_comm = SubStr(common:csr_string_4096,cont,40)
		cont = cont + 40

		Nombre_comm = SubStr(common:csr_string_4096,cont,40)
		cont = cont + 40

		Apellido_comm = SubStr(common:csr_string_4096,cont,40)
		cont = cont + 40

		ImporteTotalWU_comm = SubStr(common:csr_string_4096,cont,12)
		cont = cont + 12

		CodPaisBenef_comm = SubStr(common:csr_string_4096,cont,2)
		cont = cont + 2

		CodMoneda_comm = SubStr(common:csr_string_4096,cont,3)
		cont = cont + 3

		new_mtcn_WI_comm = SubStr(common:csr_string_4096,cont,16)
		cont = cont + 16	    
		
		
		fprint common:csr_string_130 "%-40.40e %-40.40s",Nombre_comm,Apellido_comm
        call csr:f_saaddpl DSC:consulta_multiple common:csr_string_130

		siaf:importe2 = ImporteTotalWU_comm
		siaf:importe2 =  siaf:importe2 / 100

		CALL MISCpais(CodPaisBenef_comm,LST:LISTfldPaisResidE)
		PaisBenef_fld = PaisResidEmis

      	
      	//"Pais Destino                                          Importe a Pagar                                          MTCN             
        fprint common:csr_string_130 "%-30.30s     %12.12e                  %-16.16s",PaisBenef_fld,siaf:importe2,new_mtcn_WI_comm
        call csr:f_saaddpl DSC:consulta_multiple common:csr_string_130

	END WHILE
	
	CALL post:MISCFtrim(EmisorNombre_comm)
	CALL post:MISCFtrim(Emisor_Apell_comm)
	FPRINT post:falloFirma, "%s %s",EmisorNombre_comm,Emisor_Apell_comm
	
  
  	CALL giros:MISCclearMulti_70388
  
END SUB

/*******/
