/****o* Pendientes de agrupación/OFB:giros:RCVEhdr_giros
* NOMBRE
*   OFB:giros:RCVEhdr_giros
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosrcve.h"

SUB giros:RCVEhdr_giros

	local l_id_wui LIKE clave_hdr_giros
    
    siaf:i = 2  // Esto es antes del codigo de error 
    flag_viajes_giros  = 0
    //Aca recibo los 'x201
    comm get common:csr_string 	from msg type ASCII length 2
    // BitMap de 64 
    // Tomo el Bit que me dice si hay neto o no 
    //1-8
    // bit del PAN Prendido 
    // bit del codigo de Procesamiento Prendido
    // bit del Valor Neto 
    comm get tes:idx from msg type BINARY length 1
    if ( (tes:idx & 0x10) == 0x10 )
    	setflag giros:flag_viajes_giros,ImporteNeto
    Endif
    // 8-16
    // bit del Stan Prendido 
    // bit del Hora Local Procesamiento Prendido
    // bit del Fecha Local  
    comm get common:csr_string 	from msg type BINARY length 1
    //16-24
    comm get tes:idx from msg type BINARY length 1

    if ( (tes:idx & 0x10) == 0x10 )
     	setflag giros:flag_viajes_giros,PaisEmisor
    Endif
    if ( (tes:idx & 0x8) == 0x8 )
      	setflag giros:flag_viajes_giros,PaisBeneficiario
    Endif
    //24-32 
    comm get common:csr_string 	from msg type ASCII length 1
    // y 32 40
    comm get tes:idx from msg type BINARY length 1
    //37
    if ( (tes:idx & 0x8) == 0x8 )
      	setflag giros:flag_viajes_giros,Clave
    Endif
    if ( (tes:idx & 0x6) == 0x6 )
      	setflag giros:flag_viajes_giros,Autorizacion
    Endif
    //40-48
    // bit 41 codigo de identificacion siempre prendido
    // bit 44 codigo de respuesta adicional
    comm get tes:idx from msg type BINARY length 1
    if ( (tes:idx & 0x10) == 0x10 )
       setflag giros:flag_viajes_giros,RespuestaAdicional
    Endif

    // bit 47 codigo de respuesta adicional
    if ( (tes:idx & 0x2) == 0x2 )
       setflag giros:flag_viajes_giros,LeyDocEspecial
    Endif    
  

    //48-56
    //Bit Codigo de Moneda
    comm get tes:idx from msg type BINARY length 1
    if ( (tes:idx & 0x80) == 0x80 )
      	setflag giros:flag_viajes_giros,CodigoMonedaEmis
    endif
    if ( (tes:idx & 0x40) == 0x40 )
      	setflag giros:flag_viajes_giros,CodigoMonedaAdmin
    endif
    if ( (tes:idx & 0x20) == 0x20 )
      	setflag giros:flag_viajes_giros,CodigoMonedaPago
    endif
 
     if ( (tes:idx & 0x1) == 0x1 )
       setflag giros:flag_viajes_giros,BulkFld_56
    endif
 
    //57-64
    
    comm get tes:idx from msg type BINARY length 1
    if ( (tes:idx & 0x10) == 0x10 )
       setflag giros:flag_viajes_giros,termiVersion
    endif

    if ( (tes:idx & 0x80) == 0x80 )
       setflag giros:flag_viajes_giros,BulkFld_57
    endif
    if ( (tes:idx & 0x40) == 0x40 )
       setflag giros:flag_viajes_giros,BulkFld_58
    endif

    if ( (tes:idx & 0x8) == 0x8 )
       setflag giros:flag_viajes_giros,BulkFld_61
    endif
    if ( (tes:idx & 0x4) == 0x4 )
       setflag giros:flag_viajes_giros,BulkFld_62
    endif
    if ( (tes:idx & 0x2) == 0x2 )
       setflag giros:flag_viajes_giros,BulkFld_63
    endif

    //bit 2-3
    //Aca Empieza Todos los Datos
    // Datos del Bit Map
    // PAN y Codigo de Procesamiento 
    // por ahora no me interesa que queden guardados en algun lado
    // bit 4
    comm get common:csr_string 	from msg type ASCII Length 10
    clearfield common:csr_string_tmp
    if (testflag(giros:flag_viajes_giros,ImporteNeto))
    	siaf:idx = 0
   		comm get common:csr_string_tmp from msg type BCD Length 6
    Endif 	
    ImporteRcve = common:csr_string_tmp
    ImporteRcve = ImporteRcve / 100
    // Hora Local y Fecha Local 
    // bit 7
    comm get common:csr_string 	from msg type ASCII Length 5 
    // Parte Varible del Byte 16-24
    // bit 11
    comm get stan_comm from msg type BCD length 3
//    comm get common:csr_string from msg type ASCII length 3
    
    if ( testflag(giros:flag_viajes_giros,PaisEmisor) )
    // No los Uso no me sirve para nada
    	comm get common:csr_string 	from msg type ASCII Length 2  
    Endif
    
    if ( testflag(giros:flag_viajes_giros,PaisBeneficiario) )
    // No los Uso no me sirve para nada
    	comm get common:csr_string 	from msg type ASCII Length 2  
    Endif
    
    //bit 12-13 HHMMSSMMDD
    comm get common:csr_string 	from msg type ASCII length 5
    // bit 24
    comm get common:csr_string 	from msg type ASCII length 2
    //bit 37
    If ( testflag(giros:flag_viajes_giros,Clave) )
    	IF (giros:flia_giro_fld == "I") THEN
    		//WUI devuelve el codigo id_wui_comm generado en el mensaje 200
    		//No me interesa: lo pongo solo para ver que devuelva el valor correcto
    		comm get l_id_wui   	from msg type ASCII length 12
    	ELSE
    		//Para Giros y TN
    		comm get clave_hdr_giros   	from msg type ASCII length 12
    	END IF
    Endif
    // BIT 38
    if ( testflag(giros:flag_viajes_giros,Autorizacion) )
    	comm get common:csr_string 	from msg type ASCII Length 6  
    Endif
    // BIT 39
    comm get common:csr_string 	from msg type ASCII length 2
    CodRespuesta_comm = common:csr_string
    if ( common:csr_string != "00" ) 
		if (giros:flia_giro_fld != "I" )
        	 	Call MISCRechazado_viaje
  			    /*******PROCESO RT BATCH RECUPERACION CAIDAS********/
  			    lib:err_retval = RETVAL //Para proceso batch
  			    resetflag tlr:controla_firma, cancelacion
          		let hcomm:tran_status = HOST_REJECTED    
          		LET MSG = MSGEND  			    
  			    IF (RETVAL == -3) 
                    RETURN -3//No pudo recuperar una caida mediante proceso batch
                ELSE
                    RETURN -1 //No pudo recuperar una caida mediante proceso normal
                END IF
		end if
    Else
          let hcomm:tran_status = HOST_ACCEPTED
       
    Endif
    // Datos que no nos interesan y nos posicionamos en Los datos
    //Terminal
    //BIT 41
    comm get common:csr_string 	from msg type ASCII length 8
    //BIT 44
    if ( testflag(giros:flag_viajes_giros,RespuestaAdicional) )
        comm get common:csr_string_171 	from msg type BCD length 1
    	// Longitud no se usa para nada
    	comm get common:csr_string from msg type BCD length common:csr_string_171
    Endif
    
    
    //BIT 47 - Leyenda para Documento Especial
    if ( testflag(giros:flag_viajes_giros,LeyDocEspecial) )
    
    	comm get common:csr_string_171 from msg type BCD Length 2
		comm get LeyendaDocEsp_comm 	from msg type ASCII length common:csr_string_171
    
    Endif   
    
    
    If ( testflag(giros:flag_viajes_giros,CodigoMonedaEmis) )
    	comm get CodMonedaEmis_comm from msg type ASCII length 3
    Endif

    If ( testflag(giros:flag_viajes_giros,CodigoMonedaAdmin) )
    	comm get CodMonedaAdmin_comm from msg type ASCII length 3
    Endif

    If ( testflag(giros:flag_viajes_giros,CodigoMonedaPago) )
    	comm get CodMoneda_comm from msg type ASCII length 3
    Endif
    If ( testflag(giros:flag_viajes_giros,termiVersion) )
	    // Terminal y Version 
		comm get common:csr_string_171 from msg type BCD Length 2
		comm get termiVersion_comm 	from msg type ASCII length common:csr_string_171
    endif

    // INTERNACIONAL: El error viene en el token 118:
    if ( giros:CodRespuesta_comm != "00" && giros:flia_giro_fld == "I" )

          	Call MISCRechazado_inter
	  	resetflag tlr:controla_firma, cancelacion
          	let hcomm:tran_status = HOST_REJECTED    
          	LET MSG = MSGEND
          	RETURN -1
    end if

END SUB

/*******/
