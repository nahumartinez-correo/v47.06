/****o* Lista de Giros/OFB:giros:MISCvalRegLG
* NOMBRE
*   OFB:giros:MISCvalRegLG
* DESCRIPCION
*   Validacion de los datos del giro y del beneficiario de la Lista de Giros a Importar
* ENTRADAS
*   P_cabecera = Datos del emisor
*   P_registro_1 = Datos del beneficiario 
*   P_registro_2 = Datos del beneficiario
*   P_registro_3 = Datos del beneficiario - opcionales 
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   giros:PBcargaFileLG
* DOCUMENTACION
*   http://jira.sibs.net/jira/browse/AUT-520
* SOURCE
*/
#include "girosmisc.h"
 
SUB giros:MISCvalRegLG(P_cabecera,P_registro_1,P_registro_2,P_registro_3)
	LOCAL l_cabecera LIKE common:csr_string_4096
	LOCAL l_registro_1 LIKE common:csr_string_4096
	LOCAL l_registro_2 LIKE common:csr_string_4096
	LOCAL l_registro_3 LIKE common:csr_string_4096
	LOCAL l_registro_log LIKE common:csr_string_4096
	LOCAL l_mensaje_log LIKE common:csr_string
	LOCAL l_ruta_log LIKE common:csr_string
	LOCAL l_directorio LIKE common:csr_string
	LOCAL l_directorio_log LIKE common:csr_string
	LOCAL caracter LIKE common:csr_string
	LOCAL caracter2 LIKE common:csr_string
	LOCAL INDICE LIKE post:cantidad
	LOCAL l_retval LIKE lib:err_retval

  LET l_cabecera = P_cabecera
  LET l_registro_1 = P_registro_1
  LET l_registro_2 = P_registro_2
  LET l_registro_3 = P_registro_3
  LET l_mensaje_log = ""    
    
	//Limpio los campos asociados a la tabla sesion_gl
	CALL CSR:proc_list(F_CLEAR,LST:giros:LISTlistaGirosCLR) 
	CALL giros:MISCclear_array_lg
	RESETFLAG pjurid_benef_flag,persona_juridica
	
	LET giros:TipoDocBenef_fld = SUBSTR(l_registro_2,176,2)       //tipo de documento beneficiario  
	
	/*AUT-1285 gpb -INICIO VALIDO LOS CARACTERES DE LOS CAMPOS */
	CLEARFIELD giros:mensaje_error_log_LG
	CALL giros:MISCvalidaCharLG(l_registro_1)
	
	IF (RETVAL < 0) THEN
		l_mensaje_log =  giros:mensaje_error_log_LG
		GOTO errorLog 
	END IF
  
  /*AUT- 1285 gpb -FIN VALIDO LOS CARACTERES DE LOS CAMPOS */

	/*Nota:Los campos que estan comentados se validan en la rutina giros:MISCvalidaCharLG*/
;;;;    LET giros:CodPostBenef_fld = SUBSTR(l_registro_1,0,8)         //codigo postal beneficiario
;;;;    LET giros:LocBenef_WU = SUBSTR(l_registro_1,8,25)             //localidad beneficiario
;;;;    LET giros:CodProvBenef_fld = SUBSTR(l_registro_1,33,1)        //provincia beneficiario
;;;;    LET giros:CalleBenef_fld = SUBSTR(l_registro_1,34,15)         //domicilio beneficiario
;;;;    LET giros:NroCalleBenef_fld = SUBSTR(l_registro_1,49,6)       //numero beneficiario
;;;;    LET giros:PisoBenef_fld = SUBSTR(l_registro_1,55,2)           //piso beneficiario
;;;;    LET giros:DptoBenef_fld = SUBSTR(l_registro_1,57,2)           //dpto beneficiario
;;;;    LET giros:ApellidoBenef_fld = SUBSTR(l_registro_1,59,20)      //apellido beneficiario
;;;;    LET giros:NombreBenef_fld = SUBSTR(l_registro_1,79,20)        //nombre beneficiario
	LET giros:ImporteNeto = SUBSTR(l_registro_1,124,15)            //importe beneficiario
;;;;    LET giros:NroDocBenef_fld = SUBSTR(l_registro_1,114,8)        //nro documento beneficiario
;;;;    LET giros:TelBenef_fld = SUBSTR(l_registro_1,122,13)          //nro telefono beneficiario
	LET giros:CodSucBenef_fld = SUBSTR(l_registro_1,163,5)        //nis del beneficiario
	LET giros:tipo_giro_fld = SUBSTR(l_registro_2,175,1)          //tipo de giro  
	LET giros:flia_giro_fld = giros:tipo_giro_fld                 //tipo de familia del giro
	
	LET giros:SucSel2_fld = SUBSTR(giros:CodSucBenef_fld,0,1)
	CALL giros:MISCProvinciaLG(giros:SucSel2_fld,giros:ProvBenef_fld) 
	SETFLAG camara_flags,clear2
	//RESETFLAG pjurid_benef_flag,persona_juridica
	LET giros:CodPaisResidBenef = "AR"
	CALL giros:FVALpais(giros:CodPaisResidBenef,LST:giros:LISTfldPaisResidB) 
    
	//LE QUITO LOS ESPACIOS EN BLANCO A LOS LADOS DE LA CADENA
;;;;    CALL post:MISCFtrim(giros:CodPostBenef_fld)
;;;;    CALL post:MISCFtrim(giros:LocBenef_WU)
;;;;    CALL post:MISCFtrim(giros:CodProvBenef_fld)
;;;;    CALL post:MISCFtrim(giros:CalleBenef_fld)
;;;;    CALL post:MISCFtrim(giros:NroCalleBenef_fld)
;;;;    CALL post:MISCFtrim(giros:PisoBenef_fld)
;;;;    CALL post:MISCFtrim(giros:DptoBenef_fld)
;;;;    CALL post:MISCFtrim(giros:ApellidoBenef_fld)
;;;;    CALL post:MISCFtrim(giros:NombreBenef_fld)
	CALL post:MISCFtrim(giros:ImporteNeto)
;;;;    CALL post:MISCFtrim(giros:NroDocBenef_fld)
;;;;    CALL post:MISCFtrim(giros:TelBenef_fld)
	CALL post:MISCFtrim(giros:CodSucBenef_fld)
	CALL post:MISCFtrim(giros:tipo_giro_fld)
	CALL post:MISCFtrim(giros:TipoDocBenef_fld)
	CALL post:MISCFtrim(giros:flia_giro_fld)
	CALL post:MISCFtrim(NroInscRegBenef_fld) 

	/* INICIO VALIDACION -- DATOS DEL BENEFICIARIO */
	IF (NombreBenef_fld == ".") THEN
		SETFLAG pjurid_benef_flag,persona_juridica
		giros:RazonSocBenef_fld = giros:ApellidoBenef_fld
		
;		CALL post:CDSreqNIR_oblig
;		l_retval = RETVAL
;		
;		IF (TESTFLAG(pjurid_benef_flag,persona_juridica) && l_retval) THEN
;			IF (NroInscRegBenef_fld.numchars == 0) THEN
;				LET l_mensaje_log = "NRO DE INSC.REG. ESTA VACIO"
;				GOTO errorLog 
;			END IF
;		END IF
	END IF

	IF (!TESTFLAG(pjurid_benef_flag,persona_juridica)) THEN
		IF (NombreBenef_fld.numchars == 0) THEN
			LET l_mensaje_log = "EL NOMBRE DEL BENEFICIARIO ESTA VACIO"
			GOTO errorLog 
		END IF 
		IF (ApellidoBenef_fld.numchars == 0) THEN
			LET l_mensaje_log = "EL APELLIDO DEL BENEFICIARIO ESTA VACIO"
			GOTO errorLog 
		END IF
	ELSE
		IF (RazonSocBenef_fld.numchars == 0) THEN
			LET l_mensaje_log = "LA RAZON SOCIAL DEL BENEFICIARIO ESTA VACIO"
			GOTO errorLog 
		END IF
	END IF

	IF (giros:tipo_giro_fld.NUMCHARS > 0) THEN 
		
		IF 	(giros:CodSucBenef_fld.NUMCHARS > 0) THEN		
			CDS SELECT FROM dsc:post:adt_pcia_table BECOMES dsc:post:adt_pcia_ctx WHERE \
			post:adt_pcia_cod == giros:SucSel2_fld
			
			CDS FINDFIRST dsc:post:adt_pcia_ctx NOLOCK
			IF (CDSRETVAL == -801)
				CDS ENDSELECT dsc:post:adt_pcia_ctx
				LET l_mensaje_log = "NO EXISTE EL CODIGO DE PROVINCIA PAGADORA EN LA TABLA PROVINCIA"
				GOTO errorLog 
			ELSE
				CDS EXTRACT dsc:post:adt_pcia_ctx post:adt_pcia_desc post:adt_pcia_cod
				giros:ProvSucBenef_fld = post:adt_pcia_desc
				CDS ENDSELECT dsc:post:adt_pcia_ctx
			END IF
;		ELSE
;			LET l_mensaje_log = "EL CODIGO DE PROVINCIA PAGADORA ESTA VACIO"
;			GOTO errorLog 
		END IF
	
		IF (giros:tipo_giro_fld == "T") THEN
			IF (CalleBenef_fld.numchars == 0) THEN
				LET l_mensaje_log = "LA CALLE DEL BENEFICIARIO ESTA VACIO"
				GOTO errorLog 
			END IF
	
			IF (NroCalleBenef_fld.numchars == 0) THEN
				LET l_mensaje_log = "EL NRO DE CALLE DEL BENEFICIARIO ESTA VACIO"
				GOTO errorLog 
			END IF
	
			IF (CodPostBenef_fld.numchars == 0) THEN
				LET l_mensaje_log = "EL CODIGO POSTAL DEL BENEFICIARIO ESTA VACIO"
				GOTO errorLog 
			ELSE
				CALL MISCcod_postalLG(CodPostBenef_fld)
				IF (RETVAL == -2) THEN
					LET l_mensaje_log = "EL CODIGO POSTAL DEL BENEFICIARIO ES INVALIDO"
					GOTO errorLog            	        
				END IF
			END IF
	
			IF (LocBenef_WU.numchars == 0) THEN
				LET l_mensaje_log = "LA LOCALIDAD DEL BENEFICIARIO ESTA VACIO"
				GOTO errorLog 
			ELSE
				CALL giros:MISCvalidaLocBeneLG
				IF (RETVAL == -801) THEN
					LET l_mensaje_log = "LA LOCALIDAD DEL BENEFICIARIO ES INEXISTENTE"
					GOTO errorLog 
				ELSEIF (RETVAL == -2) THEN
					LET l_mensaje_log = "EXISTE MAS DE UNA PROVINCIA PARA LA LOCALIDAD DEL BENEFICIARIO"
					GOTO errorLog 
				END IF
			END IF
		ENDIF

		IF (giros:tipo_giro_fld == "P" || giros:tipo_giro_fld == "T") THEN
			IF (giros:TipoDocBenef_fld.NUMCHARS > 0 || giros:NroDocBenef_fld.NUMCHARS > 0) THEN
				IF (giros:TipoDocBenef_fld.NUMCHARS > 0) THEN   
					CALL giros:CDSTcheckTipoDocWu(giros:TipoDocBenef_fld)
					IF (RETVAL < 0) THEN
						LET l_mensaje_log = "TIPO DE DOCUMENTO DEL BENEFICIARIO NO VALIDO"
						GOTO errorLog 
					ELSE
							IF (giros:TipoDocBenef_fld == 80 || giros:TipoDocBenef_fld == 86 || giros:TipoDocBenef_fld == 87) THEN
								CALL MISCvaldaCuitLG
								IF (RETVAL <0) THEN
									LET l_mensaje_log = "EL NRO DE CUIT/CUIL/CDI DEL BENEFICIARIO ES INVALIDO"
									GOTO errorLog 
								END IF
							ELSE
								IF (NroDocBenef_fld.NUMCHARS == 0) THEN
									LET l_mensaje_log = "EL NRO DE DOCUMENTO DEL BENEFICIARIO ESTA VACIO"
									GOTO errorLog  
								END IF
							END IF 
					END IF
				ELSE
					LET l_mensaje_log = "TIPO DE DOCUMENTO DEL BENEFICIARIO VACIO"
					GOTO errorLog                    
				END IF
			END IF
		ELSE
			LET l_mensaje_log = "EL TIPO DE GIRO ES DISTINTO A POSTAL O TELEGRAFICO"
			GOTO errorLog 
		END IF
  ELSE
		LET l_mensaje_log = "EL TIPO DE GIRO ESTA VACIO"
		GOTO errorLog 
	END IF
  /* FIN VALIDACION -- DATOS DEL BENEFICIARIO */
	
	/* INICIO VALIDACION -- GIRO */
	//Valido el codigo de provincia pagadora con el de la sucursal pagadora
	IF (giros:SucSel2_fld !=  substr(giros:CodSucBenef_fld,0,1)) THEN
		LET l_mensaje_log = "EL CODIGO DE PROVINCIA PAGADORA NO CORRESPONDE A LA SUCURSAL PAGADORA."
		GOTO errorLog                     
	END IF
 
	//Valido el codigo de la sucursal pagadora
	IF (giros:CodSucBenef_fld.numchars == 0) THEN
		LET l_mensaje_log = "EL CODIGO DE LA SUCURSAL PAGADORA ESTA VACIO"
		GOTO errorLog 
	ELSE
		IF (giros:flia_giro_fld == "T" || giros:flia_giro_fld == "W" || siaf:codigo_siaf == 70050)
			//cgw:se agrego que se pueda seleccionar sucursales del tipo SA,SN,SF,NG,SB,SE.
			CDS SELECT FROM dsc:admin:adt_br_table BECOMES dsc:admin:adt_br_context WHERE \
			admin:adt_br_branch == giros:CodSucBenef_fld && (admin:adt_br_tipo == "SA" ||  \
			admin:adt_br_tipo == "SN" || admin:adt_br_tipo == "SF"  )
		ELSE
			//cgw:se agrego que se pueda seleccionar sucursales del tipo SA,SN,SF,NG,SB,SE.
			CDS SELECT FROM dsc:admin:adt_br_table BECOMES dsc:admin:adt_br_context WHERE \
			admin:adt_br_branch == giros:CodSucBenef_fld && (admin:adt_br_tipo == "SA" ||  \
			admin:adt_br_tipo == "SN" || admin:adt_br_tipo == "SF" || \
			admin:adt_br_tipo == "SB" )
		END IF

		CDS FINDFIRST dsc:admin:adt_br_context NOLOCK
		IF (CDSRETVAL < 0) then
			CDS ENDSELECT dsc:admin:adt_br_context
			//gpb:AUT-2400
			LET l_mensaje_log = "EL NIS SELECCIONADO NO PERMITE EL PAGO DEL TIPO DE GIRO"
			GOTO errorLog 
		ELSE
			CDS ENDSELECT dsc:admin:adt_br_context
		END IF
	ENDIF
	
	//Valido el importe a pagar
	IF (giros:ImporteNeto.NUMCHARS == 0) THEN
		LET l_mensaje_log = "EL IMPORTE DEBE SER MAYOR A CERO"
		GOTO errorLog 
	END IF
	
	IF (giros:ImporteNeto.NUMCHARS > 8) THEN
		LET l_mensaje_log = "EL IMPORTE IMPORTE SUPERA MAXIMO HABILITADA"
		GOTO errorLog 
	END IF
    
	//Obtengo la secuencia de los registros de la Lista de Giros
	CALL post:CDSobtiene_secuen("TRXLG")
	IF (RETVAL != 0) THEN
		LET l_mensaje_log = "NO SE PUDO OBTENER EL NRO DE TRANSACCION DEL REGISTRO DE LA LISTA DE GIROS."
		GOTO errorLog 
	ELSE
		//resultado va en post:adt_codseq_nro
		LET giros:nro_trx_lg = post:adt_codseq_nro
	END IF

	//CALCULO LOS IMPORTES SEGUN DEL GIRO
	CALL giros:MISCinic_Calc_Imp_lg (giros:tipo_giro_fld)
	
	IF (RETVAL < 0) then
		LET l_mensaje_log = "NO SE PUDO CALCULAR LOS IMPORTES"
		GOTO errorLog 
	END IF
	
	CALL giros:MISCcalc_Importes_lg
	IF (RETVAL < 0) then
		LET l_mensaje_log = "NO SE PUDO CALCULAR LOS IMPORTES"
		GOTO errorLog 
	END IF
    
	//SC 50170
	CALL post:MISCdesglosaIva(Comision_fld,post:adt_serv_aliciva,1,0)
	ComisionSinIva_fld = post:ImporteSinIva
	IvaComision_fld = post:ImporteIva
	//SC 50170-FACTURACION
	giros:ComisionSinIva4_fld = post:ImporteSinIva_bis
	post:AliServUP = post:adt_serv_aliciva
    
	IF (giros:tipo_giro_fld == "T") THEN
		//SC 50170
		CALL post:MISCdesglosaIva(post:adt_tarif_fijo,post:adt_tarif_fj_aliciva,1,0)
		
		TasaSinIva_fld = post:ImporteSinIva
		IvaTasa_fld = post:ImporteIva
		//SC 50170-FACTURACION
		giros:TasaSinIva4_fld = post:ImporteSinIva_bis
	END IF
    
  //SC50383 - Opcionales Importacion Lista de Giros  
	CALL giros:MISCvalOpcLG(l_registro_3)
	
	IF (RETVAL == -1) THEN
		LET l_mensaje_log = "NO SE PUEDE DETERMINAR LA TARIFA DEL OPCIONAL POR NO HALLARSE EN EL TARIFARIO"
		GOTO errorLog
	ELSEIF (RETVAL == -2) THEN
		LET l_mensaje_log = "NO EXISTE EL OPCIONAL EN LA PARAMETRIA"
		GOTO errorLog
  END IF
  
  /* FIN VALIDACION -- GIRO */      
  RETURN (0)
    		
errorLog:
	//Genero el log de error de la carga de Lista de Giros
	l_directorio = giros:mdata_detalleArchLG
	CALL csr:str_search (l_directorio,".",INDICE)
	LET INDICE = INDICE 
	LET l_directorio = SUBSTR(l_directorio,0,INDICE)
	
	//actualizo el campo de rechazados
	LET post:mdata_nroRechazos = post:mdata_nroRechazos + 1
	REFRESH post:mdata_nroRechazos
	
	FPRINT l_directorio_log "%s%s%s%s",l_directorio ,"_",common:system_date,"_ERROR.LOG"
	
	FPRINT caracter "%s", "\\"
	FPRINT caracter2 "%s", "/"
	CALL post:MISCremplazaCaracter(l_directorio_log,caracter2,caracter)
	
	CALL CSR:file_open(7,l_directorio_log,"a")
	                     
	CALL CSR:file_putline(7,"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	
	CALL CSR:file_putline(7,l_cabecera)
	CALL CSR:file_putline(7,l_registro_1)
	CALL CSR:file_putline(7,l_registro_2)
	CALL CSR:file_putline(7,l_registro_3)
	
	FPRINT l_registro_log "Mensaje de Error: %s",l_mensaje_log
	CALL CSR:file_putline(7,l_registro_log)
	
	CALL CSR:file_putline(7,"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	
	CALL CSR:file_close(7)
	
	RETURN (-2)
    
END SUB

/*******/
