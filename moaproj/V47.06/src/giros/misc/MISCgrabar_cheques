/****o* Pendientes de agrupación/OFB:giros:MISCgrabar_cheques
* NOMBRE
*   OFB:giros:MISCgrabar_cheques
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosmisc.h"

SUB giros:MISCgrabar_cheques


	/*
	Esta rutina se encarga de guardar los datos de los cheques que
	seran emitidos segun la cantidad seleccionada. 
	*/

	local indice	like siaf:i
	local cantdisp	like giros:adt_chk_cantid
	local chkdesde	like giros:adt_chk_nrogiro
	local chkhasta	like giros:adt_chk_nrogiro
	local chqant	like common:csr_string

	if ( giros:cantidad_chk_emi == 0 )
		return 0
	end if

	CDS SELECT FROM dsc:giros:RecepChk_tab BECOMES \
	dsc:giros:RecepChk_ctx WHERE \
	adt_chk_suc == common:sucursal_activa && \
	adt_chk_op == op:op_operator_id  && \
	adt_chk_estado == 2

	CDS FINDFIRST dsc:giros:RecepChk_ctx nolock
	LET lib:err_retval = CDSRETVAL

	DO
		if (lib:err_retval != 0) then
			break
		end if

		CDS EXTRACT dsc:giros:RecepChk_ctx all

		/*Recorro cada una de las posiciones del vector para
		 ver si cada cheque esta en condiciones de ser emitido*/

		indice   = 0
		cantdisp = 0
		chqant   = ""

		while (giros:adt_chk_cantid > indice)

			if (giros:adt_chk_cheque[indice] == "HA") then 
				/*el cheque esta disponible*/
				if (cantdisp == 0) then
					 /*si es la primera vez...guardo el 
					indice para saber desde cual empezo*/
					chkdesde = indice + adt_chk_nrogiro
				end if
				cantdisp = cantdisp + 1
			else
				/*si el actual es EM y el anterior es
				 HA...inserto hasta aca los HA que tenga*/
				if (chqant == "HA") then
					/*Inserto hasta los que tenga...*/
					chkhasta = chkdesde + (cantdisp - 1)
					DLL "DBdoQuery" \
					(odbc:db_handle_giros_m,0,dsc:odbc:insert_chk_gm,giros:adt_chk_serie,chkdesde,chkhasta,0,0)
					if (retval < 0) then
						break
					end if	
					/*Inicializo*/
					cantdisp = 0
				end if
			end if

			chqant = giros:adt_chk_cheque[indice]
			indice = indice + 1

		end while

		if (retval < 0) then
			/*error de insercion...salgo !*/
			break
		end if

		if (chqant == "HA") then
			/*Inserto hasta los que tenga...*/
			chkhasta = chkdesde + (cantdisp - 1)

			DLL "DBdoQuery" (odbc:db_handle_giros_m,0,dsc:odbc:insert_chk_gm,giros:adt_chk_serie,chkdesde,chkhasta,0,0)
			if (retval < 0) then
				break
			end if
		end if
			
		CDS FINDNEXT dsc:giros:RecepChk_ctx nolock
		LET lib:err_retval = CDSRETVAL
	LOOP

	if (retval < 0) then
		CDS ENDSELECT dsc:giros:RecepChk_ctx
		return -2
	end if	

	CDS ENDSELECT dsc:giros:RecepChk_ctx

END SUB

/*******/
