/****o* Pendientes de agrupación/OFB:giros:MISCgen_line_multi
* NOMBRE
*   OFB:giros:MISCgen_line_multi
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosmisc.h"

SUB giros:MISCgen_line_multi

    LOCAL cont LIKE siaf:idx
     LOCAL Serie_ant like Serie_comm
    LOCAL NroGiro_ant like NroGiro_comm
    LOCAL digito_ant  like digito_comm
    
    clearfield Serie_ant
    clearfield NroGiro_ant
    clearfield digito_ant
    
    if (flia_giro_fld != "I" && cantidad_coi_comm == 1) then
	   	    let Serie_ant = Serie_comm
    	    let NroGiro_ant = NroGiro_comm
    	    let digito_ant = digito_comm
	end if
    
    cont = 0
    while (post:codigo_impre > cont)

        Call giros:MISCclear_cons_multi
           Select (flia_giro_fld)
            case "P"
            case "T"
                Serie_comm = SubStr(common:csr_string_aux,cont,1)
                cont = cont + 1
                NroGiro_comm = SubStr(common:csr_string_aux,cont,6)
                cont = cont + 6
                digito_comm = SubStr(common:csr_string_aux,cont,1)
                cont = cont + 1
                break
            case "W"
                ClaveMTC_comm = SubStr(common:csr_string_aux,cont,12)
                cont = cont + 12
                break
            case "I"
                MoneyTKey_comm = SubStr(common:csr_string_aux,cont,10)
                cont = cont + 10
                break
        end select

        Nombre_comm = SubStr(common:csr_string_aux,cont,17)
        cont = cont + 17
        Apellido_comm = SubStr(common:csr_string_aux,cont,17)
        cont = cont + 17
        EmisorNombre_comm = SubStr(common:csr_string_aux,cont,17)
        cont = cont + 17
        Emisor_Apell_comm = SubStr(common:csr_string_aux,cont,17)
        cont = cont + 17
        
        if (flia_giro_fld != "I") then
	        ImportePagar_comm = SubStr(common:csr_string_aux,cont,12)
	        cont = cont + 12
	        CodMoneda_comm = SubStr(common:csr_string_aux,cont,3)
	        cont = cont + 3
	        EstadoGiro_comm = SubStr(common:csr_string_aux,cont,2)
	        cont = cont + 2
	      else
	        ImportePagar_comm = SubStr(common:csr_string_aux,cont,10)
	        cont = cont + 10
	        CodMoneda_comm = SubStr(common:csr_string_aux,cont,3)
	        cont = cont + 3
	      endif
	
	
	
        fprint common:csr_string_130 "%10.10e %-20.20s %-20.20s" \
                                                    fechaEmi_comm \
                                                    Nombre_comm \
                                                    Apellido_comm
                                                    
    call giros:MISCBusca_Emisores(siaf:codigo_siaf)/*ACP-se agrega por el giro electronico*/
	  if (retval < 0) 
	 	   if (giros:cantidad_coi_comm == 1)
    		    let Serie_comm = Serie_ant 
    	      let NroGiro_comm = NroGiro_ant
    	      let digito_comm = digito_ant 
       end if
     
       clearfield common:csr_string_130
	  else
	   	    let Serie_ant = Serie_comm
    	    let NroGiro_ant = NroGiro_comm
    	    let digito_ant = digito_comm
    end if                                            
                                                    
      IF (common:csr_string_130 != "")                                              
        // 1ra Linea
        if (flia_giro_fld == "P" || flia_giro_fld == "T") then
            fprint common:csr_string_130 "%s %s-%06s-%s %12s  %3s" \
                                                common:csr_string_130 \
                                                Serie_comm \
                                                NroGiro_comm \
                                                digito_comm \
                                                "" \
                                                CodMoneda_comm 
        else
           if (flia_giro_fld != "I") then
            fprint common:csr_string_130 "%s %10s %012s  %3s" \
                                                common:csr_string_130 \
                                                "" \
                                                ClaveMTC_comm \
                                                CodMoneda_comm 
	         else
			// Internacionales
            		fprint common:csr_string_130 "%s %20s  %3s %15s %010s" \
                                             common:csr_string_130 \
                                             "" \
                                             CodMoneda_comm \
                                             "" \
                                             MoneyTKey_comm 
	          endif
        end if
        call csr:f_saaddpl DSC:consulta_multiple common:csr_string_130

        // Segunda Linea
        siaf:importe2 = ImportePagar_comm
	siaf:importe2 =  siaf:importe2 / 100

                          //"      Importe                Estado                Nombre del Emis               Apellido del Emis"
        fprint common:csr_string_130 "  %12.12e     %-2.2s            %-20.20s  %-20.20s" \
                                                    siaf:importe2 \
                                                    EstadoGiro_comm \
                                                    EmisorNombre_comm \
                                                    Emisor_Apell_comm  
  
        
        call csr:f_saaddpl DSC:consulta_multiple common:csr_string_130
        
        if (flia_giro_fld != "I") then
	        giros:cantidad_coi_comm = giros:cantidad_coi_comm + 1
		    endif
		end if
    end while

END SUB

/*******/
