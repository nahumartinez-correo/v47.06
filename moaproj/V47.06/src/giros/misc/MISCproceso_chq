/****o* Pendientes de agrupación/OFB:giros:MISCproceso_chq
* NOMBRE
*   OFB:giros:MISCproceso_chq
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosmisc.h"

SUB giros:MISCproceso_chq(param)

	local indice	like siaf:i
	local NroAux	like Password_comm
	local Digito	like TipoConexion_comm
	
	CDS SELECT FROM dsc:giros:RecepChk_tab BECOMES \
	dsc:giros:RecepChk_ctx WHERE \
	adt_chk_serie == giros:Serie_fld && 		\
	adt_chk_nrogiro <= giros:NroGiro_fld &&		\
	adt_chk_nrofin >= giros:NroGiro_fld   && \
	adt_chk_estado == 2
	
	CDS FINDFIRST dsc:giros:RecepChk_ctx lock
    	LET lib:err_retval = CDSRETVAL

	If (lib:err_retval != 0) THEN
		return (-2)
	end if

	CDS EXTRACT dsc:giros:RecepChk_ctx all
	//obtengo en indice del vector correspondiente al cheque
	indice = giros:NroGiro_fld - adt_chk_nrogiro

	if (param == GM_EMITIDO ) then
		giros:adt_chk_cheque[indice] = "EM"
	else
		giros:adt_chk_cheque[indice] = "AN"
	end if
	giros:adt_chk_usado = giros:adt_chk_usado + 1

	CDS CLEARBUFFER DSC:giros:RecepChk_ctx
	CDS APPEND DSC:giros:RecepChk_ctx FLD:giros:adt_chk_cheque[indice] \
	FLD:giros:adt_chk_usado

	CDS UPDATE DSC:giros:RecepChk_ctx LOCK
	CDS UNLOCK DSC:giros:RecepChk_ctx
	CDS ENDSELECT DSC:giros:RecepChk_ctx

END SUB

/*******/
