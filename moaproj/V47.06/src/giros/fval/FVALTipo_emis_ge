/****o* Pendientes de agrupación/OFB:giros:FVALTipo_emis_ge
* NOMBRE
*   OFB:giros:FVALTipo_emis_ge
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosfval.h"

SUB giros:FVALTipo_emis_ge

  giros:Codigo_fld = giros:Codigo_ge_fld
 if (testflag(admin:mode_flags,imprimir)) then
    	setvaldone Codigo_ge_fld
    	return (0)
 end if

 IF (Codigo_ge_fld.NUMCHARS == 0) THEN
      MSGBOX "Ingrese Tipo de Giro",OFB_OK,"Error"
      NEXTFIELD Codigo_giroelec
      RETURN (-2)
 ELSE

    CALL giros:CDSTipoGiro_load    
    if (retval == -2) then
      MSGBOX "Tipo de Giro incorrecto",OFB_OK,"Error"
      return -2
    end if
  
   CDS SELECT FROM DSC:emis_giroelec_TAB  BECOMES DSC:emis_giroelec_CTX  WHERE  \
	 EmisNomb_giroelec == FLD:EmisNomb_ge_fld && EmisApel_giroelec == FLD:EmisApel_ge_fld 
    	CDS FINDFIRST DSC:emis_giroelec_CTX  LOCK 	
    	let lib:err_retval = cdsretval
    	if (lib:err_retval == -801) then
    		cds endselect DSC:emis_giroelec_CTX
     		return (0)
    	else
    		cds endselect DSC:emis_giroelec_CTX
     	     if (Codigo_giroelec != Codigo_ge_fld)
    		    protfield EmisNomb_ge_fld 
    		    protfield EmisApel_ge_fld
    		    call post:MISCset_sidebar(1,1,0,0)   	
     		   else
    		    unprotfield EmisNomb_ge_fld 
    		    unprotfield EmisApel_ge_fld
    	    	call post:MISCset_sidebar(0,1,0,0)  
    	 	   end if
    	end if  
  END IF
 
END SUB
/*Fin de abm emisores*/

/*******/
