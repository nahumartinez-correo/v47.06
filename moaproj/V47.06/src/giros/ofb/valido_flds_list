/****o* Pendientes de agrupación/OFB:giros:valido_flds_list
* NOMBRE
*   OFB:giros:valido_flds_list
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosofb.h"

SUB giros:valido_flds_list
local loc_vfl_member like siaf:idx
local loc_vfl_amount like siaf:idx
local loc_vfl_obj	 like plataf:tran_obj
local loc_vfl_appl	 like plataf:tran_appl
local loc_vfl_name	 like plataf:tran_name
local loc_vfl_found	 like siaf:idx
local loc_vfl_lstno	 like siaf:idx
local loc_vfl_aux	 like siaf:idx

loc_vfl_lstno = 1 // nro de lista a verificar
do
	// selecciono la lista a verificar
	select (loc_vfl_lstno)
		case 1
			call csr:listcsr GETLIST LST:giros:LISTbenef_flds
			let loc_vfl_amount = retval
			break
		case 2	
			call csr:listcsr GETLIST LST:giros:LISTemis_flds
			let loc_vfl_amount = retval
			break
		case 3
			call csr:listcsr GETLIST LST:giros:LIST70392_bene_flds
			let loc_vfl_amount = retval
			break
		case 4
			call csr:listcsr GETLIST LST:giros:LIST70392_emis_flds
			let loc_vfl_amount = retval
			break
		case else
			return			
	end select
	
	// el siguiente ciclo revisa el contenido de cada elemento de la lista...
	let loc_vfl_member = 0
	while (loc_vfl_member < loc_vfl_amount) 
			call csr:listcsr GETMEMBER loc_vfl_member 
			if (retval > 0) then
				// obtengo los datos del campo de la lista...
				call csr:listcsr GETELEMENT 0 loc_vfl_obj loc_vfl_appl loc_vfl_name common:csr_string
				if (retval >= 0) then
					if (loc_vfl_obj == "FLD") then
						// apunto un campo indirecto al campo de la lista
						call csr:getofbindx loc_vfl_appl loc_vfl_name siaf:INDscratch loc_vfl_obj
						if (siaf:INDscratch != 0) then
							// paso el contenido del campo al csr_string...
							call csr:ind_assign common:csr_string siaf:INDscratch
							if (retval == 0) then
								// verifico el contenido
								// NOTA: si se quiere agregar otra validación sobre el contenido del campo
								//       se debe incluir aca.
								
								// OBS: comento el guión y el punto ("-", ".") porque aparacen en la emisión de los
								// 		giros contrarreembolso, ya que los datos del emisor (Correo Argentino) se 
								//		cargan automáticamente desde las tablas.
								
														
								call csr:str_search common:csr_string "|" loc_vfl_aux 		/* 01 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux  			
								call csr:str_search common:csr_string "<" loc_vfl_aux		/* 02 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string ">" loc_vfl_aux		/* 03 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
							//	call csr:str_search common:csr_string "." loc_vfl_aux		/* 04 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string ";" loc_vfl_aux		/* 05 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
							//	call csr:str_search common:csr_string "-" loc_vfl_aux		/* 06 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "(" loc_vfl_aux		/* 07 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string ")" loc_vfl_aux		/* 08 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "?" loc_vfl_aux		/* 08 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "¿" loc_vfl_aux		/* 10 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "ª" loc_vfl_aux		/* 11 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								
								// OB2: Obvio la validación cuando el campo contiene "** OTRA ACTIVIDAD **" 
								if ((common:csr_string == "** OTRA ACTIVIDAD **") && \
									(loc_vfl_name == "OcupacionEmis_fld" || \
									 loc_vfl_name == "OcupacionBenef_fld")) then
									 	// lo cuento como valido 
									 	loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								else
										call csr:str_search common:csr_string "*" loc_vfl_aux	/* 12 */
										loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								endif
								
								call csr:str_search common:csr_string "·" loc_vfl_aux		/* 13 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "#" loc_vfl_aux		/* 14 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "$" loc_vfl_aux		/* 15 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "%" loc_vfl_aux		/* 16 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "&" loc_vfl_aux		/* 17 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "=" loc_vfl_aux		/* 18 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "+" loc_vfl_aux		/* 19 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "\"" loc_vfl_aux		/* 20 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								call csr:str_search common:csr_string "!" loc_vfl_aux		/* 21 */
								loc_vfl_found = loc_vfl_found + loc_vfl_aux 
								
								let loc_vfl_found = (loc_vfl_found * (-1)) - (21) // Resto 21 xq son 21 validaciones
								if (loc_vfl_found != 0) then
									return (-2)
								endif
							end if
						endif
					endif
				endif
			endif
			loc_vfl_member = loc_vfl_member + 1
	end while
	// verifica fin de las validaciones
	if (loc_vfl_lstno == 4) then
		break
	endif
	loc_vfl_lstno = loc_vfl_lstno + 1
loop

END SUB

/*******/
