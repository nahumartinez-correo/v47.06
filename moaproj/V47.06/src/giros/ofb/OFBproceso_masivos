/****o* Pendientes de agrupación/OFB:giros:OFBproceso_masivos
* NOMBRE
*   OFB:giros:OFBproceso_masivos
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosofb.h"



SUB giros:OFBproceso_masivos(tipo_giro,sesion_nro)

	local varl_tipo_giro    like giros:tipo_giro_fld
	local varl_sesion_gm    like giros:nro_sesion_gm
	local varl_mensaje2     like common:csr_string
	local varl_mensaje      like common:csr_string
	local loc_retval        like lib:err_retval
	local loc_importe       like siaf:importe

	fprint varl_tipo_giro,"%s",tipo_giro
	fprint varl_sesion_gm,"%s",sesion_nro
	clearfield giros:gm_cheque

	call giros:CDSbuscar_trx_gm(varl_tipo_giro,varl_sesion_gm)
	if ( retval == -801)
		return 4
	else
		if (retval != 0 )
			msgbox "Error al obtener los datos para emitir.",OFB_OK,"Atencion"
			return -2
		end if
	end if

	msgbox "Desea emitir los giros?",OFB_YESNO2,"Atencion"
	if ( retval == 7 )
		CDS UNLOCK DSC:CONses_gm
		CDS ENDSELECT DSC:CONses_gm
		return 0
	end if

	DO
		CALL CSR:proc_list(F_CLEAR,LST:LISTproceso_masivos)
		CALL CSR:proc_list(F_CLEAR,LST:LISTemis_flds)
		CALL CSR:proc_list(F_CLEAR,LST:LISTbenef_flds)
	        call csr:cleararray post:cos_opc
	        call csr:cleararray post:ali_opc
	        call csr:cleararray post:texto_opc

		CDS EXTRACT DSC:CONses_gm ALL

		if ( giros:flia_giro_fld == "P" )

			while (giros:gm_cheque != "S" )
				clearfield giros:clave_hdr_giros
				clearfield giros:firma_enviada
				clearfield giros:Firma_comm

				call giros:CDScheques_hab
				if ( retval < 0 )
					msgbox "No hay cheques disponibles",OFB_OK,"Atencion"
					loc_retval = 1
					break
				end if

				call giros:digito_verificador(Serie_fld,NroGiro_fld,digito_fld)	
				fprint varl_mensaje2,"%s%s-%s-%s %s","Ingrese el Cheque Nro: ",\
				giros:Serie_fld,giros:NroGiro_fld,giros:digito_fld," para su impresión"
				msgbox varl_mensaje2,OFB_YESNO,"Atencion"
				if (retval == 7 )
					loc_retval = 2
					break
				end if

				move post:adt_tarif_dest to post:destino
				loc_importe = siaf:importe

				siaf:importe = giros:ImporteNeto + giros:Comision_fld + post:cos_opc
				;Por defecto anulamos el cheque, una vez recibido el viaje le cambiamos el
				;estado e emitido EM. Entonces si pasa cualquier cosa en el medio, el cheque
				;no podrá ser utilizado. *** MDG
				call giros:CDSavanza_cheq("AN")
				;Guardo el número de cheque para el caso de caída del RT. *** MDG
				call post:CDSupd_presuChequeGM("N")
				INIT 76,"docprt WAIT 0"
				printdoc OFB:giros:imprime_cheque_gm,docprt,"Imprimiendo Cheque"
				INIT 76,"docprt WAIT 1"	

				siaf:importe = loc_importe
	
				MSGBOX "Se imprimio correctamente el cheque?",OFB_YESNO,"Comprobación"
				if (retval == 7)
					call giros:OFBenvio_chq_an
					if ( retval < 0 )
						clearfield giros:gm_cheque
						call giros:CDSupdate_trx_gm("I",giros:flia_giro_fld)

						fprint varl_mensaje,"%s : %s-%s-%s","COMUNIQUESE CON CALL CENTER\nSOLICITANDO LA ANULACION DE LA EMISION DEL CHEQUE",giros:Serie_fld,giros:NroGiro_fld,giros:digito_fld
						msgbox varl_mensaje,OFB_OK,"Atencion"
						loc_retval = -2
						break
					end if
					giros:EstadoGiro_fld = "AN"
					clearfield giros:gm_cheque
					clearfield giros:consulta
				else
					giros:gm_cheque = "S"
					giros:consulta = 0
				end if

			end while

			if ( loc_retval == 1 || loc_retval == 2 || loc_retval == -2 )
				break
			end if
		end if

		if  ( ( giros:flia_giro_fld != "P" ) || (giros:flia_giro_fld == "P" && giros:gm_cheque == "S" ))
			call giros:OFBenvio_masivos(giros:flia_giro_fld)
			if ( retval < 0 )
				call giros:CDSupdate_trx_gm("I",giros:flia_giro_fld)
				loc_retval = -2
				break
			end if
			post:SiNo = "S" //Hay al menos un giro emitido?
			giros:EstadoGiro_fld = "EM"
		end if

		call giros:CDSupdate_trx_gm("E",giros:flia_giro_fld)

		if (varl_tipo_giro == "P" )
			clearfield giros:gm_cheque
			call giros:CDSavanza_cheq(giros:EstadoGiro_fld)
			;limpio la información del cheque guardada para el tratamiento de caída del RT. *** MDG
			call post:CDSupd_presuChequeGM("S")
		end if

		call giros:CDSbuscar_prox_gm(varl_tipo_giro,varl_sesion_gm)
		if ( lib:err_retval == -801)
			break
		else
			if (lib:err_retval != 0 )
				msgbox "Error al obtener datos a emitir.",OFB_OK,"Atencion"
				break
			end if
		end if

	loop

	CDS UNLOCK DSC:CONses_gm
	CDS ENDSELECT DSC:CONses_gm


	return loc_retval

END SUB

/*******/

