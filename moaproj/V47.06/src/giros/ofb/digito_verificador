/****o* Pendientes de agrupación/OFB:giros:digito_verificador
* NOMBRE
*   OFB:giros:digito_verificador
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girosofb.h"

SUB giros:digito_verificador (serie , nro , digito) 

	local total like common:local_ascii
	local num1 like common:local_ascii
	local num2 like common:local_ascii
	local num3 like common:local_ascii
	local num4 like common:local_ascii
	local num5 like common:local_ascii
	local num6 like common:local_ascii
	local num7 like common:local_ascii
	local num8 like common:local_ascii

	local xx 	  like common:local_int
	local ceros 	  like common:local_int
	local string	  like common:local_ascii
	local nrog	  like giros:NumGiro_aux
	local value_ascii like giros:NroGiro_fld

	move nro to nrog

	// Serie del Giro en MAYUSCULAS.
	call csr:fld_to_upper(serie)

	move serie to giros:ascii_fld
	/* rellena nro de giro con 0 hasta llegar a seis posiciones */
	if ( nrog.numchars < 6 ) then
		xx = nrog.numchars	
		ceros = (6 - xx)
		do
			fprint nrog, "%s%s","0",nrog
			ceros = ceros -1
			if (ceros == 0) then
				break
			end if
		loop
		refresh nrog
	end if
	
	move nrog to nro
	refresh nro

	// Asignar a ascii_value el valor ascii de la serie del
	// Giro (en MAYUSCULA).

	call csr:Ascii giros:ascii_fld
	value_ascii = retval

	fprint nrog,"%2.2d%6.6d",value_ascii,nrog
	
	num1 = (substr(nrog,0,1) * 9)
	if ( num1.numchars == 2 ) then
		num1 = substr(num1,1,1)
	end if
	num2 = (substr(nrog,1,1) * 7)
	if ( num2.numchars == 2 ) then
			num2 = substr(num2,1,1)
	end if
	num3 = (substr(nrog,2,1) * 1)
	if ( num3.numchars == 2 ) then
			num3 = substr(num3,1,1)
	end if
	num4 = (substr(nrog,3,1) * 3)
	if ( num4.numchars == 2 ) then
			num4 = substr(num4,1,1)
	end if
	num5 = (substr(nrog,4,1) * 9)
	if ( num5.numchars == 2 ) then
			num5 = substr(num5,1,1)
	end if
	num6 = (substr(nrog,5,1) * 7)
	if ( num6.numchars == 2 ) then
			num6 = substr(num6,1,1)
	end if

	num7 = (substr(nrog,6,1) * 1)
	if ( num7.numchars == 2 ) then
			num7 = substr(num7,1,1)
	end if
	
	num8 = (substr(nrog,7,1) * 3)
	if ( num8.numchars == 2 ) then
			num8 = substr(num8,1,1)
	end if

	total = (num1 + num2 + num3 + num4 + num5 + num6 + num7 +num8 )

/*----------------------------------------------------*/

	if ( total.numchars == 2 ) then
		total = substr(total,1,1)		
	end if

	total = (10 - total)

	if ( total.numchars == 2 ) then
		total = substr(total,1,1)
	end if

	digito = total
	REFRESH digito

END SUB

/*******/
