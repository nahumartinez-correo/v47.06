/****o* Pendientes de agrupación/OFB:giros:PRESident_clie_lote
* NOMBRE
*   OFB:giros:PRESident_clie_lote
* DESCRIPCION
*   Rutina Pre Display de la transaccion de Giros Masivos.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   LST:giros:TRANident_clie_lote
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "girospres.h"

SUB giros:PRESident_clie_lote
local varl_mensaje      like common:csr_string
	siaf:nombre_transac.HIGHLITE = 0
    siaf:codigo_siaf = 70610

    siaf:restr_otra_casa     = "N"
    siaf:linea_validacion    = "S"
    siaf:exhibe_pantalla     = "S"
    siaf:imprime_comprobante = "N"
	
	protfield Giros_cargados
	protfield cantidad_chk_emi
	protfield SumaImpGiros
	protfield ImpTotGiros
    setflag flag_orden_gm,PorOrden
    ALTERCONTROLSET tag:op:chk4

	giros:tipo_gm = "P"
	ALTERCONTROLSET tag:op:chk0
	
	//Recupero los datos de la PresuAct
	CALL post:CDSadt_presuact_load

	dupfield post:CliRaz
	swapdup  post:CliRaz
    
    dupfield post:CliRazon
	swapdup  post:CliRazon
	
	dupfield post:CliNombre
	swapdup  post:CliNombre
	
	dupfield post:CliApellido
	swapdup  post:CliApellido
    
    
	//Seteo los datos del cliente (Emisor)
	call giros:MISCobtener_id_cli
	call csr:proc_list(F_REFRESH,LST:LISTemi_gm_flds)
	call post:MISCmensaje_visor("B")
	//seteo algunos campos del emisor que pueden ser de utilidad en la sesion
	if (post:CliRazon.numchars == 0)
	    resetflag giros:pers_jur_flag,persona_juridica
	else
	    setflag giros:pers_jur_flag,persona_juridica
	    giros:RazonSocEmis_fld = post:CliRazon
	end if
	
	giros:NombreEmi_fld = post:CliNombre
	giros:ApellidoEmis_fld = post:CliApellido

	giros:PisoEmis_fld = substr(post:CloPiso,0,2)
	giros:DptoEmis_fld = substr(post:CloPiso,2,2)
	if (TipoDocEmisGm_fld != "80" && TipoDocEmisGm_fld != "99") then
		clearfield NroCuitEmis_fld
	else
		NroCuitEmis_fld = post:CloCuit
	end if
	CatIvaEmis_fld = post:IvaCod
	;En la recuperación de una caida el número de sesión se guarda en el dup area
	;caso contrario el número de sesión es cero.
	;swapdup giros:nro_sesion_gm
	dupfield giros:nro_sesion_gm
	
	//Genero el secuenciador SESGM:numero de sesion 
	IF (post:estado_presu == 2 && giros:nro_sesion_gm == 0)
		//Chequeo en la tabla sesion_gm si existe una sesion pendiente
		//para el Emisor correspondiente. De ser asi aviso al operador si 
		//quiere restaurarla y en caso afirmativo se restaura
		CALL CDSver_SesGm_pend
		IF (retval == 0)
			//si no se encontro sesion pendiente o el operador decide NO restaurarla
			//se obtiene un nuevo secuenciador para la sesion 
			Call post:CDSobtiene_secuen("SESGM")
			giros:nro_sesion_gm = post:adt_codseq_nro
		END IF
		
		//Grabo el nro de sesion masivos en la Presu
		CALL post:CDSupd_presu_sesgm
		If (retval < 0)
			ungetkey RT_ESC
		end if
	ELSE
	    ;Regenero los totales en el caso de caidas
	    call giros:CDScantGir_a_fact(nro_sesion_gm)
		
		call giros:CDSupd_cantCEC
	    dupfield giros:Serie_bck
        dupfield giros:NroGiro_bck
        dupfield giros:digito_bck
	    
	    giros:Serie_fld = giros:Serie_bck
	    giros:NroGiro_fld = giros:NroGiro_bck
	    giros:digito_fld = giros:digito_bck
	    
	    if (giros:NroGiro_fld.numchars != "")
		    
		    fprint varl_mensaje,"%s : %s-%s-%s","COMUNIQUESE CON CALL CENTER\nSOLICITANDO LA VERIFICACION Y/O ANULACION DE LA EMISION DEL CHEQUE",giros:Serie_fld,giros:NroGiro_fld,giros:digito_fld
		    msgbox varl_mensaje,OFB_OK,"Atencion"
		    
		end if
	    
	    clearfield giros:Serie_fld
	    clearfield giros:NroGiro_fld
	    clearfield giros:digito_fld
	    
	END IF


END SUB

/*******/
