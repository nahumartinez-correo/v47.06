/****o* Pendientes de agrupación/OFB:giros:CDSrecibosSelGm
* NOMBRE
*   OFB:giros:CDSrecibosSelGm
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSrecibosSelGm

	offset_0000:

		cds select from dsc:remitTmpTAB becomes DSC:remitTmpCON \
		where op:op_operator_id == op:op_operator_id && \
		adt_girChqtmp_rem != 0

		let siaf:last_key = LASTKEY

		cds multidisplay dsc:remitTmpCON LISTadt_recibos

		if (CDSRETVAL == 0x01FD) THEN
			GOTO offset_0000
		end if

		let lib:err_retval = CDSRETVAL
		if  (lib:err_retval == 0) THEN
			return -2
		end if

		let lib:err_retval = CDSRETVAL
		call lib:MISCcds_find_err
		if (retval != 0) THEN
	  		return -1
		end if

		CDS EXTRACT DSC:remitTmpCON adt_girChqtmp_rem \
		siaf:importe into giros:ImpChqAcreditado \
		estadoChr

		if (estadoChr == "(OK)")
			call MISCborraSiExisteGM
			if (retval !=  0 )
				if (cantidad < 1)
					cantidad = cantidad + 1
					refresh cantidad
					fprint listaRecibosSel,\
					 "%s[%13.13s] --> ACEPTADO: $%7.7e\r\n", listaRecibosSel, adt_girChqtmp_rem,giros:ImpChqAcreditado

					refresh listaRecibosSel
					gir_imp_acre = giros:ImpChqAcreditado
				else
			  		msgbox \
					"Usted ha alcanzado el máximo de Cheques.", OFB_OK ,"Aviso"
				endif
			endif
		else
			msgbox "Usted no puede utilizar este Cheque.", OFB_OK ,"Aviso"
		endif

		cds unlock  DSC:remitTmpCON
		cds endselect DSC:remitTmpCON

END SUB

/*******/
