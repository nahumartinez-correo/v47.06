/****o* Pendientes de agrupación/OFB:giros:CDSrellenaGiros
* NOMBRE
*   OFB:giros:CDSrellenaGiros
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSrellenaGiros()

   /********************************************************************************************************/
   /*                                                                                                      */
   /* [PAW - 03/03/99]      Esta rutina rellena los vectores necesarios para la impresión del recibo       */
   /*                       según la página que se desee imprimir. (en caso de existir más de una)         */
   /*                                                                                                      */
   /* [PAW - 09/03/99]      MODIFICACIÓN: Se desea tener un registro por cada giro emitido de distinto     */
   /*                       tipo y la cantidad e importe totales de los mismos.                            */
   /*                                                                                                      */
   /* Salidas:                                                                                             */
   /* - post:TipoComprobante[], post:CantGiros[], post:ImpComprobante[] llenos.                            */
   /*                                                                                                      */
   /********************************************************************************************************/

	local cantGiros like post:cantidad
	local subTot like giros:ImporteNeto

	call giros:CDSabreGir()
	cantGiros = 0
	subTot = 0
	call csr:proc_list(F_CLEARARRAY, LST:LISTarraysGir)
	if (lib:err_retval == 0) THEN
		CDS EXTRACT DSC:girosTmpCON adt_girostmp_importe into giros:ImporteNeto
	endif
	DO
		IF (lib:err_retval != 0) THEN
			BREAK
		END IF
		cantGiros = cantGiros + 1
		subTot = subTot + giros:ImporteNeto
		CDS FINDNEXT DSC:girosTmpCON NOLOCK
		let lib:err_retval = CDSRETVAL
		if (lib:err_retval == 0) THEN
			CDS EXTRACT DSC:girosTmpCON adt_girostmp_importe into giros:ImporteNeto
		endif
	LOOP
	post:CantGiros[0] = cantGiros
	post:ImpComprobante[0] = subTot
	call giros:CDScierraGir()
END SUB

/*******/
