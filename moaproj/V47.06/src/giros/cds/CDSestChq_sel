/****o* Pendientes de agrupación/OFB:giros:CDSestChq_sel
* NOMBRE
*   OFB:giros:CDSestChq_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSestChq_sel()

   /********************************************************************************************************/
   /*                                                                                                      */
   /* [PAW - 06/02/99]      Esta rutina se encarga de generar el Combo con todos los registros de la       */
   /*                       tabla girosChqTmp. Además extrae los datos del registro seleccionado.          */
   /*                                                                                                      */
   /* Salidas:                                                                                             */
   /* - retval:   Devuelve (-1),(-2) en caso de errores. 												   */
   /*                                                                                                      */
   /********************************************************************************************************/

offset_0000:
    /* MLD selecciono los cheques que no fueron emitidos ni dados de baja */
	CDS SELECT FROM DSC:girosChqTmpTAB BECOMES DSC:girosChqTmpCON \
	    where giros:adt_girChqtmp_rem != 0 && \
	    (giros:adt_girChqtmp_est != CH_EMITIDO && \
	    giros:adt_girChqtmp_est != CH_BAJA && \
	    giros:adt_girChqtmp_est != CH_VENCIDO) && \
	    giros:adt_girChqtmp_fbaja == 0
	    
	let siaf:last_key = LASTKEY

	CDS MULTIDISPLAY DSC:girosChqTmpCON LISTestChq
	IF (CDSRETVAL == 0x01FD) THEN
		GOTO offset_0000
	END IF
	LET lib:err_retval = CDSRETVAL
	IF (lib:err_retval == 0) THEN
		RETURN (-2)
	END IF
	LET lib:err_retval = CDSRETVAL
	CALL lib:MISCcds_find_err
	IF (RETVAL != 0) THEN
	  RETURN (-1)
	END IF
	CDS EXTRACT DSC:girosChqTmpCON adt_girChqtmp_sec, adt_girChqtmp_op 	\
				adt_girChqtmp_banco into post:cod_banco					\
				adt_girChqtmp_sucu into post:sucursal					\
				adt_girChqtmp_plaza into post:plaza						\
				adt_girChqtmp_cheque into post:nro_cheque				\
				adt_girChqtmp_cuenta into post:cuenta					\
				siaf:importe \
				adt_girChqtmp_rem		\
				adt_girChqtmp_est \
				adt_girChqtmp_fecha into post:fecha \
				adt_girChqtmp_moneda into siaf:moneda
				
	CDS unlock  DSC:girosChqTmpCON
	CDS ENDSELECT DSC:girosChqTmpCON
	select (adt_girChqtmp_est)
	    case CH_ACREDITADO
	        /* Lo pongo acreditado */
            let tes:estado_cheque = "S"
	        let est_desc2 = "Acreditado"
	        break
	    CASE CH_BAJA
            //let tes:estado_cheque = CH_BAJA
	        let est_desc2 = "Dado de Baja"
	        break
	    CASE CH_VENCIDO
	        //let tes:estado_cheque = CH_VENCIDO
	        let est_desc2 = "Vencido"
	        break
	    CASE CH_RECEPCIONADO
	        /* Le pongo no acreditado */
	        let tes:estado_cheque = "N"
	        let est_desc2 = "Recepcionado"
	        break
	    CASE CH_RECHAZADO
	        let tes:estado_cheque = "R"
	        let est_desc2 = "Rechazado"
	        break
	end select
	refresh est_desc2
END SUB

/*******/
