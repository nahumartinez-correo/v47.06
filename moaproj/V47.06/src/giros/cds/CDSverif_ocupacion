/****o* Pendientes de agrupación/OFB:giros:CDSverif_ocupacion
* NOMBRE
*   OFB:giros:CDSverif_ocupacion
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSverif_ocupacion(p_Ocupacion,p_EmisOBenef)
	// SBA 20031008.
	// Verifico si la Ocupacion esta en la tabla o es otra actividad,
	// y asigno los valores correspondientes dependiendo si es Emisor o Beneficiario
    CDS SELECT FROM DSC:giros:TABOcupacion BECOMES DSC:giros:CONOcupacion \
    where fld:giros:adt_Ocupacion == p_Ocupacion
    CDS FINDFIRST DSC:CONOcupacion NOLOCK
    let lib:err_retval = cdsretval
    CDS ENDSELECT DSC:CONOcupacion

    select (lib:err_retval)
    	case 0 // La Ocupacion esta en la tabla
    		if (p_EmisOBenef == "E") then
    			fld:giros:OcupacionEmis_fld = p_Ocupacion
    			clearfield giros:OtrosOcupEmis_fld
    			protfield OtrosOcupEmis_fld
    		else
    			fld:giros:OcupacionBenef_fld = p_Ocupacion
    			clearfield giros:OtrosOcupBenef_fld
    			protfield OtrosOcupBenef_fld
    		end if
			break
			    		
    	case -801 // La Ocupacion no esta en la tabla. Es Otra Actividad
    		if (p_EmisOBenef == "E") then
    			fld:giros:OcupacionEmis_fld = "** OTRA ACTIVIDAD **"
    			fld:giros:OtrosOcupEmis_fld = p_Ocupacion
    			protfield giros:OcupacionEmis_fld
    			
    		else
    			fld:giros:OcupacionBenef_fld = "** OTRA ACTIVIDAD **"
    			fld:giros:OtrosOcupBenef_fld = p_Ocupacion
    			protfield giros:OcupacionBenef_fld
    		end if
			break
    end select

	return (0)

END SUB

/*******/
