/****o* Pendientes de agrupación/OFB:giros:CDScreaTablaRemGM
* NOMBRE
*   OFB:giros:CDScreaTablaRemGM
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDScreaTablaRemGM

	/*Esta rutina se encarga de cargar la tabla de remitos, con los 
	cheques  que cumplan las condiciones y que correspondan al cliente 
	previamente seleccionado*/

	local remAct    like adt_girChqtmp_rem
	local totAcre   like siaf:importe2
	local loc_sucur like post:nro_recibo

	loc_sucur = SUBSTR(common:sucursal_activa,2,3)
	marcaSelec = "N"

	cds select from dsc:remitTmpTAB becomes DSC:remitTmpCON \
	where op:op_operator_id == op:op_operator_id

	cds delete dsc:remitTmpCON all

	cds select from dsc:girosChqTmpTAB becomes DSC:girosChqTmpCON \
	where giros:adt_girChqtmp_rem != 0 && \
        giros:adt_girChqtmp_est == "A" && \
	giros:adt_girChqtmp_fbaja == 0 && \
	giros:adt_girChqtmp_tipdoc == giros:TipoDocEmisGm_fld && \
	giros:adt_girChqtmp_cuit == giros:CuitEmisGm_fld 

	cds findfirst dsc:girosChqTmpCON NOLOCK
	let lib:err_retval = CDSRETVAL

	if (lib:err_retval == 0)
		CDS EXTRACT DSC:girosChqTmpCON \
		siaf:importe into siaf:importe2 \
		adt_girChqtmp_rem adt_girChqtmp_est
		estadoChr = "(OK)"
	endif

	remAct = adt_girChqtmp_rem

	while (lib:err_retval == 0)
		while ((lib:err_retval == 0) && (remAct == adt_girChqtmp_rem))
			if (!((estadoChr == "(NO) Recepcionado ") || (estadoChr == "(NO)   Vencido    ")))
		    	Select (adt_girChqtmp_est)
       			Case "E"
	        		estadoChr = "(NO) Recepcionado "
	        		totAcre = 0
        			Break
       			Case "A"
        			totAcre = totAcre + siaf:importe2
        			Break
       			Case "V"
	        		estadoChr = "(NO)   Vencido    "
	        		totAcre = 0
;					totRech = 0
        			Break
    			End Select
			endif

			cds findnext dsc:girosChqTmpCON NOLOCK
			let lib:err_retval = CDSRETVAL

			if (lib:err_retval == 0)
				CDS EXTRACT DSC:girosChqTmpCON \
				siaf:importe into siaf:importe2 \
				adt_girChqtmp_rem adt_girChqtmp_est
			endif

		end while

        	//remAct =  remAct + (common:br_UEN * 100000000) + \
		(loc_sucur * 100000)

		cds clearbuffer DSC:remitTmpCON

		cds append DSC:remitTmpCON op:op_operator_id \
		remAct as adt_girChqtmp_rem \
	   	totAcre as siaf:importe estadoChr marcaSelec

		cds insert DSC:remitTmpCON LOCK
		cds unlock DSC:remitTmpCON

		estadoChr = "(OK)"
		remAct = adt_girChqtmp_rem
		totAcre = 0

	end while

	cds endselect DSC:girosChqTmpCON
	cds endselect DSC:remitTmpCON

END SUB

/*******/
