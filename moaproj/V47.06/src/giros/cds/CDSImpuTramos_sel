/****o* Pendientes de agrupación/OFB:giros:CDSImpuTramos_sel
* NOMBRE
*   OFB:giros:CDSImpuTramos_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSImpuTramos_sel

/*Se agrega el filtrado de tablas. Diego Priore 04/04/2000*/

/*  Muestra el picklist para que el usuario elija un registro EXISTENTE
    Llama a CDSabmImpuprov_load para cargarlo y DEVUELVE -2
    Si hubo algun error (por ejemplo, no encontro registros 
    que coincidan) DEVUELVE -1.
    DEVUELVE 0 cuando encuentra un registro y lo puede mostrar */
    
    LOCAL tmp_giro_tipo LIKE adt_giro_tipo
    LOCAL tmp_impp_prov LIKE adt_impp_prov
    LOCAL tmp_impp_serv LIKE adt_impp_serv
    LOCAL aux LIKE adt_impp_serv 
	LOCAL tmp_impp_desde like adt_impp_desde
	LOCAL tmp_impp_hasta like adt_impp_hasta
	LOCAL tmp_impt_montofijo like adt_impt_montofijo
	LOCAL tmp_impt_por_milaje like adt_impt_por_milaje

offset_0000:
/*  los guardo porque al mostrar la lista se sobreescribe */
    MOVE adt_impp_serv TO tmp_impp_serv
    MOVE adt_giro_tipo TO tmp_giro_tipo
    MOVE adt_impp_prov TO tmp_impp_prov
	MOVE adt_impp_desde TO tmp_impp_desde 
	MOVE adt_impp_hasta TO tmp_impp_hasta
	MOVE adt_impt_montofijo TO tmp_impt_montofijo
	MOVE adt_impt_por_milaje TO tmp_impt_por_milaje
	
	
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars == 0)) THEN
    	CDS SELECT FROM DSC:ImpuTramos_tbl BECOMES DSC:ImpuTramos_ctx
    	CDS MULTIDISPLAY DSC:ImpuTramos_ctx LISTimppcodTram
    END IF
    
    IF ((giros:adt_impp_serv.numchars !=0) && (giros:adt_impp_prov.numchars == 0)) THEN
     	CDS SELECT FROM DSC:ImpuTramos_tbl BECOMES DSC:ImpuTramos_ctx \
     	WHERE (giros:adt_impp_serv == giros:adt_impp_serv)
    	CDS MULTIDISPLAY DSC:ImpuTramos_ctx LISTimppcodTram
    END IF
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars != 0)) THEN
    	CDS SELECT FROM DSC:ImpuTramos_tbl BECOMES DSC:ImpuTramos_ctx \
     	WHERE (giros:adt_impp_prov == giros:adt_impp_prov)
    	CDS MULTIDISPLAY DSC:ImpuTramos_ctx LISTimppcodTram
    END IF
    	
    IF ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars != 0)) THEN
    	CDS SELECT FROM DSC:ImpuTramos_tbl BECOMES DSC:ImpuTramos_ctx \
    	WHERE ((giros:adt_impp_prov == giros:adt_impp_prov) && (giros:adt_impp_serv == giros:adt_impp_serv))
    	CDS MULTIDISPLAY DSC:ImpuTramos_ctx LISTimppcodTram
    END IF 
    
    
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
     /* significa que en el multidisplay no se seleccionó nada ("reset key pressed")
    	En ese caso, hay que volver al estado anterior */
        MOVE tmp_impp_serv TO adt_impp_serv 
		MOVE tmp_giro_tipo TO adt_giro_tipo 
		MOVE tmp_impp_prov TO adt_impp_prov
		MOVE tmp_impp_desde TO adt_impp_desde
		MOVE tmp_impp_hasta TO adt_impp_hasta
		MOVE tmp_impt_montofijo TO adt_impt_montofijo
		MOVE tmp_impt_por_milaje TO adt_impt_por_milaje
		
		CALL CDSImpuTramos_load
	            
       ;SMC uso la rutina c para refrescar los campos.
        CALL csr:proc_list(F_REFRESH,lst:giros:LISTImpuTramos_fld)
    
       ;SMC uso la rutina c para copiar los campos.
  		CALL csr:proc_list(F_COPY,lst:giros:LISTImpuTramos_fld,lst:giros:LISTbck_ImpuTramos)
            
        RETURN (-2)
         
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    
    IF (RETVAL != 0) THEN
    	CALL csr:proc_list(F_CLEAR,lst:giros:LISTImpuTramos_fld)
    	CALL csr:proc_list(F_REFRESH,lst:giros:LISTImpuTramos_fld)
        RETURN (-1)
    END IF
    
    CDS EXTRACT DSC:ImpuTramos_ctx ALL
    ProvSucBenef_fld = giros:adt_impp_pdesc
    adt_impp_prov = giros:adt_impp_prov
	
   
    CDS UNLOCK DSC:ImpuTramos_ctx
   
    CDS ENDSELECT DSC:ImpuTramos_ctx   
	setvaldone adt_impp_prov
	setvaldone adt_impp_serv
	setvaldone adt_giro_tipo
    setvaldone adt_impp_desde
    call FVALcodImpp
    
END SUB

/*******/
