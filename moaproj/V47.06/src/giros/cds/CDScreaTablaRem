/****o* Pendientes de agrupación/OFB:giros:CDScreaTablaRem
* NOMBRE
*   OFB:giros:CDScreaTablaRem
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDScreaTablaRem

   /********************************************************************************************************/
   /*                                                                                                      */
   /* [PAW - 30/03/99]      Esta rutina se encarga de generar la tabla de remitos.                         */
   /*                                                                                                      */
   /* Salidas:                                                                                             */
   /* - remitTamp:          Tabla.                        												   */
   /*                                                                                                      */
   /********************************************************************************************************/

	local remAct like adt_girChqtmp_rem
	local totAcre like siaf:importe2
	local loc_sucur like post:nro_recibo
	local varl_cant_giros like siaf:cantidad_registros 

	loc_sucur = SUBSTR(common:sucursal_activa,2,3)

	marcaSelec = "N"
	CDS SELECT FROM DSC:remitTmpTAB BECOMES DSC:remitTmpCON WHERE op:op_operator_id == op:op_operator_id
	CDS DELETE DSC:remitTmpCON ALL

	CDS SELECT FROM DSC:girosChqTmpTAB BECOMES DSC:girosChqTmpCON \
		WHERE giros:adt_girChqtmp_rem != 0 && \
			  giros:adt_girChqtmp_est == "A" && \
			  giros:adt_girChqtmp_fbaja == 0
	CDS FINDFIRST DSC:girosChqTmpCON NOLOCK
	LET lib:err_retval = CDSRETVAL
	if (lib:err_retval == 0)
		CDS EXTRACT DSC:girosChqTmpCON siaf:importe into siaf:importe2 \
									 adt_girChqtmp_rem adt_girChqtmp_est \
									 adt_girChqtmp_cantg
		estadoChr = "(OK)"
	endif

	remAct = adt_girChqtmp_rem

	while (lib:err_retval == 0)
		while ((lib:err_retval == 0) && (remAct == adt_girChqtmp_rem))
			if (!((estadoChr == "(NO) Recepcionado ") || (estadoChr == "(NO)   Vencido    ")))
		    	Select (adt_girChqtmp_est)
       			Case "E"
	        		estadoChr = "(NO) Recepcionado "
	        		totAcre = 0
        			Break
       			Case "A"
        			totAcre = totAcre + siaf:importe2
					varl_cant_giros = adt_girChqtmp_cantg 
        			Break
       			Case "V"
	        		estadoChr = "(NO)   Vencido    "
	        		totAcre = 0
;					totRech = 0
        			Break
    			End Select
			endif

			CDS FINDNEXT DSC:girosChqTmpCON NOLOCK
			LET lib:err_retval = CDSRETVAL
			if (lib:err_retval == 0)
				CDS EXTRACT DSC:girosChqTmpCON siaf:importe into siaf:importe2 \
											 	adt_girChqtmp_rem adt_girChqtmp_est \
												adt_girChqtmp_cantg
			endif
		end while

        //remAct =  remAct + (common:br_UEN * 100000000) + (loc_sucur * 100000)

		// verifico que el remito no este siendo utilizado por otro operador...
		call CDSchk_inuse_remit(remAct)
		if (retval < 0) then 
			// si no esta siendo utilizado 
			CDS CLEARBUFFER DSC:remitTmpCON
			CDS APPEND DSC:remitTmpCON op:op_operator_id remAct as adt_girChqtmp_rem \
								   totAcre as siaf:importe estadoChr marcaSelec \
								   varl_cant_giros as adt_girChqtmp_cantg

			CDS INSERT DSC:remitTmpCON LOCK
			CDS UNLOCK DSC:remitTmpCON
		endif

		estadoChr = "(OK)"
		remAct = adt_girChqtmp_rem
		totAcre = 0
		varl_cant_giros = 0
	end while
	CDS ENDSELECT DSC:girosChqTmpCON
	CDS ENDSELECT DSC:remitTmpCON
END SUB

/*******/
