/****o* Pendientes de agrupación/OFB:giros:CDSrellenaChq
* NOMBRE
*   OFB:giros:CDSrellenaChq
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSrellenaChq

   /********************************************************************************************************/
   /*                                                                                                      */
   /* [PAW - 03/03/99]      Esta rutina rellena los vectores necesarios para la impresión del recibo       */
   /*                       según la página que se desee imprimir. (en caso de existir más de una)         */
   /*                                                                                                      */
   /* Parámetros:                                                                                          */
   /* - pagina: página que se desea imprimir.                                                              */
   /*                                                                                                      */
   /* Salidas:                                                                                             */
   /* - post:ImporteBanco[], post:ValorPago[], post:BancoPago[], post:NumCuenta[] llenos.                  */
   /*                                                                                                      */
   /********************************************************************************************************/

	local cantCheques like post:cantidad
	call giros:CDSabreChq()
	cantCheques = 0
	call csr:proc_list(F_CLEARARRAY, LST:LISTarraysChq)
		WHILE ((lib:ind_type == 0) && (cantCheques <= 9))

    			CDS EXTRACT DSC:girosChqTmpCON adt_girChqtmp_sec			\
					adt_girChqtmp_banco into post:cod_banco					\
					adt_girChqtmp_cheque into post:nro_cheque				\
					siaf:importe into siaf:importe							\
					adt_girChqtmp_moneda into siaf:moneda

				post:ImporteBanco[cantCheques] = siaf:importe
				post:ValorPago[cantCheques] = siaf:moneda
				post:BancoPago[cantCheques] = post:cod_banco
				post:NumCuenta[cantCheques] = post:nro_cheque

			CDS FINDNEXT DSC:girosChqTmpCON NOLOCK
			let lib:ind_type = CDSRETVAL
			cantCheques = cantCheques + 1
		END WHILE
	call giros:CDScierraChq()
END SUB

/*******/
