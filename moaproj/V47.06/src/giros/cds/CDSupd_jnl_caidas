/****o* Pendientes de agrupación/OFB:giros:CDSupd_jnl_caidas
* NOMBRE
*   OFB:giros:CDSupd_jnl_caidas
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSupd_jnl_caidas(llamada_desde)
    /*Esta rutina se encarga actualizar el jnl_status de la jnl_caidas de acuerdo a su
    correspondiente en el journal.*/
    LOCAL jnl_branch_tmp LIKE tlr:jnl_branch
    LOCAL jnl_operator_tmp LIKE tlr:jnl_operator
    LOCAL jnl_date_tmp LIKE tlr:jnl_date
    LOCAL jnl_time_tmp LIKE tlr:jnl_time
    LOCAL jnl_bus_date_tmp LIKE tlr:jnl_bus_date
    LOCAL jnl_sequence_tmp LIKE tlr:jnl_sequence
    LOCAL jnl_status_tmp LIKE tlr:jnl_status
    LOCAL jnl_status_tmp1 LIKE tlr:jnl_status
	local varl_deadtime_ago like tlr:jnl_time 
	local varl_deadtime like tlr:jnl_time 
    
    //Hago el select de la jnl_caídas
    SELECT (llamada_desde)
    
        CASE "CIERRE_SUC" //Llamada desde el cierre de sucursal
            /*Si estoy en el cierre de la sucursal actualizo todos los 98 y 99*/
            CDS SELECT FROM DSC:jnl_caidas BECOMES DSC:jnl_caidas_ctx WHERE  \
                tlr:jnl_branch == FLD:common:sucursal_activa && \
                (tlr:jnl_status == 98 || tlr:jnl_status == 99) 
            CDS FINDFIRST DSC:jnl_caidas_ctx LOCK 
            BREAK
    
        CASE "RT_BATCH" //Llamada desde el Proceso Batch para recuperacion de caídas
            /*Si estoy en rt batch actualizo todos los 99*/
			// FGB actualizo tambien aquellos registros que fueron tomados por
			// el operador, pero que no fueron liberados desde hace mas de 1/2
			// hora...
			let varl_deadtime = FREE_LOCKED_REG_TIME
			call csr:f_time_subtract(common:system_date,common:time_of_day, \
									 common:system_date,varl_deadtime, \
									 varl_deadtime_ago)

            CDS SELECT FROM DSC:jnl_caidas BECOMES DSC:jnl_caidas_ctx WHERE  \
                tlr:jnl_branch == FLD:common:sucursal_activa && \
                (tlr:jnl_status == 99 || (tlr:jnl_status == 98 && \
				siaf:adt_jnlc_locktime < varl_deadtime_ago))
            CDS FINDFIRST DSC:jnl_caidas_ctx LOCK 
            BREAK
    
        CASE "OPERADOR" //Llamada por el operador en la Tranlogin
            /*si estoy en rt normal actualizo los 98 correspondientes al operador loggeado*/
            CDS SELECT FROM DSC:jnl_caidas BECOMES DSC:jnl_caidas_ctx WHERE  \
                tlr:jnl_branch == FLD:op:op_branch_id && \
                tlr:jnl_operator == FLD:op:op_operator_id && \
                tlr:jnl_status == 98 
            CDS FINDFIRST DSC:jnl_caidas_ctx LOCK         
            BREAK
    
    END SELECT

    lib:err_retval = CDSRETVAL
    WHILE (lib:err_retval == 0)
        //Hago el extract de la jnl_caídas
        CDS EXTRACT DSC:jnl_caidas_ctx \
            FLD:tlr:jnl_branch INTO FLD:jnl_branch_tmp \
            FLD:tlr:jnl_operator INTO FLD:jnl_operator_tmp \
            FLD:tlr:jnl_date INTO FLD:jnl_date_tmp \
            FLD:tlr:jnl_time INTO FLD:jnl_time_tmp \
            FLD:tlr:jnl_bus_date INTO FLD:jnl_bus_date_tmp \
            FLD:tlr:jnl_sequence INTO FLD:jnl_sequence_tmp \
            FLD:tlr:jnl_status INTO FLD:jnl_status_tmp
                     
        /*Hago el select en el journal para hacer match con el reg. de la jnl_caídas*/
        CDS SELECT FROM DSC:tlr:TABjnl BECOMES DSC:tlr:jnl_context WHERE  \
            tlr:jnl_branch == FLD:jnl_branch_tmp && \
            tlr:jnl_operator == FLD:jnl_operator_tmp && \
            tlr:jnl_date == FLD:jnl_date_tmp && \
            tlr:jnl_time == FLD:jnl_time_tmp && \
            tlr:jnl_bus_date == FLD:jnl_bus_date_tmp && \
            tlr:jnl_sequence == FLD:jnl_sequence_tmp 
        CDS FINDFIRST DSC:tlr:jnl_context NOLOCK 
        IF (CDSRETVAL == 0) THEN
            //Extraigo del journal el jnl_status original
            CDS EXTRACT DSC:tlr:jnl_context \
                FLD:tlr:jnl_status INTO FLD:jnl_status_tmp1
            CDS ENDSELECT DSC:tlr:jnl_context 
            CDS FINDAGAIN DSC:jnl_caidas_ctx LOCK 
            CDS APPEND DSC:jnl_caidas_ctx \
                FLD:jnl_status_tmp1 AS FLD:tlr:jnl_status 
            //actualizo en la jnl_caídas el jnl_status de su correspondiente en el journal
            CDS UPDATE DSC:jnl_caidas_ctx LOCK 
        ELSE 
            CDS ENDSELECT DSC:tlr:jnl_context 
        END IF 
        CDS FINDNEXT DSC:jnl_caidas_ctx LOCK 
        lib:err_retval = CDSRETVAL
    END WHILE 
    CDS ENDSELECT DSC:jnl_caidas_ctx 
END SUB

/*******/
