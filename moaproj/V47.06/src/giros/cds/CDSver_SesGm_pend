/****o* Giros Masivos/OFB:giros:CDSver_SesGm_pend
* NOMBRE
*   OFB:giros:CDSver_SesGm_pend
* DESCRIPCION
*   Esta rutina busca en la tabla SesionGm_cabec (sesiones pendientes de giros masivos) si existe alguna
*	sesion que este pendiente de emision (la ultima), es decir si existe al menos un giro 
*	ingresado y pendiente de emitir para el emisor correspondiente. De ser asi avisa al operador
*	y si el operador acepta extrae el dato que la identifica 
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Retorna un valor que define la seleccion del operador, si acepta o no restaurar la sesion:
*	0 = No restaura o no encuentra sesion, 1 = restaura sesion encontrada
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   OFB:giros:PRESident_clie_lote
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSver_SesGm_pend
    lib:err_retval = 0
    CDS SELECT FROM DSC:SesionGm_cab_tlb BECOMES DSC:SesionGM_cab_ctx WHERE \
    	post:op_operator_id == op:op_operator_id && \
    	post:CloTipDoc == post:CloTipDoc && \
    	post:CloCuit == post:CloCuit
    Cds FINDLAST DSC:SesionGM_cab_ctx NOLOCK
    IF (CDSRETVAL == 0)
		//encontro al menos un registro (el ultimo)
		MSGBOX "EXISTE SESION PENDIENTE PARA ESTE EMISOR. DESEA RESTAURARLA?",OFB_YESNO,"ATENCION"
		if (retval == 6) then //Si restaura
			CDS EXTRACT DSC:SesionGM_cab_ctx \
				giros:nro_ses_cabec into nro_sesion_gm \
				giros:fecha_cabec into fecha_gm \
				giros:cant_giros into cantidad_chk_emi \
				giros:SumaImpGiros_I into SumaImpGiros \
				giros:ImpTotGiros_I into ImpTotGiros			
			Let lib:err_retval = 1
		end if
	END IF
	CDS ENDSELECT DSC:SesionGM_cab_ctx
	Return lib:err_retval
END SUB

/*******/
