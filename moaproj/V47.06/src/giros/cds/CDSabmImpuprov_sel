/****o* Pendientes de agrupación/OFB:giros:CDSabmImpuprov_sel
* NOMBRE
*   OFB:giros:CDSabmImpuprov_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "giroscds.h"

SUB giros:CDSabmImpuprov_sel

/*Se agrega el filtrado de tablas. Diego Priore 04/04/2000*/

/*  Muestra el picklist para que el usuario elija un registro EXISTENTE
    Llama a CDSabmImpuprov_load para cargarlo y DEVUELVE -2
    Si hubo algun error (por ejemplo, no encontro registros 
    que coincidan) DEVUELVE -1.
    DEVUELVE 0 cuando encuentra un registro y lo puede mostrar */
    
    LOCAL tmp_giro_tipo LIKE adt_giro_tipo
    LOCAL tmp_impp_prov LIKE adt_impp_prov
    LOCAL tmp_impp_pdesc LIKE adt_impp_pdesc
    LOCAL tmp_impp_serv LIKE adt_impp_serv
    LOCAL aux LIKE adt_impp_serv 
    LOCAL tmp_impp_tipifica like adt_impp_tipifica
    LOCAL tmp_impp_exento like adt_impp_exento
    LOCAL tmp_impp_min_noimp like adt_impp_min_noimp
    LOCAL tmp_impp_tramos like adt_impp_tramos
    LOCAL tmp_impp_montofijo like adt_impp_montofijo
    LOCAL tmp_impp_por_milaje like adt_impp_por_milaje
    LOCAL tmp_impp_condiciona like adt_impp_condiciona
    
    /*Tengo que hacer algo que no es lo más prolijo que existe, pero dada la 
    situación, me veo obligado ...
    Creo campos locales que me indican si la clave de la tabla fue validada
    Gabriel Falciola*/
    LOCAL tmp_val_prov like adt_giro_tipo
    LOCAL tmp_val_serv like adt_giro_tipo
    LOCAL tmp_val_tipo like adt_giro_tipo
    LOCAL tmp_val_tipifica like adt_giro_tipo

offset_0000:
/*  los guardo porque al mostrar la lista se sobreescribe */
    MOVE adt_impp_serv TO tmp_impp_serv
	if (adt_impp_serv.valdone)
		tmp_val_serv = "S"
	end if
    MOVE adt_giro_tipo TO tmp_giro_tipo
    if (adt_giro_tipo.valdone)
    	tmp_val_tipo = "S"
    end if
    MOVE adt_impp_prov TO tmp_impp_prov
    if (adt_impp_prov.valdone)
    	tmp_val_prov = "S"
    end if
    MOVE ProvSucBenef_fld TO tmp_impp_pdesc    
    MOVE adt_impp_tipifica to tmp_impp_tipifica
    if (adt_impp_tipifica.valdone)
    	tmp_val_tipifica = "S"
    end if
    MOVE adt_impp_exento to  tmp_impp_exento
    MOVE adt_impp_min_noimp to tmp_impp_min_noimp
    MOVE adt_impp_tramos to tmp_impp_tramos
    MOVE adt_impp_montofijo to tmp_impp_montofijo
    MOVE adt_impp_por_milaje to tmp_impp_por_milaje
    MOVE adt_impp_condiciona to tmp_impp_condiciona
    
    //Correccion BUG AUT-944  -  NAM
    IF (! ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars == 0))) THEN 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF
    
    IF ((giros:adt_impp_serv.numchars !=0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE (giros:adt_impp_serv == giros:adt_impp_serv)
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE (giros:adt_impp_prov == giros:adt_impp_prov)
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 

    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE (giros:adt_giro_tipo == giros:adt_giro_tipo)
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars != 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE (giros:adt_impp_tipifica == giros:adt_impp_tipifica)
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
        	
    IF ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_impp_prov == giros:adt_impp_prov) && (giros:adt_impp_serv == giros:adt_impp_serv))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 

    IF ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_giro_tipo == giros:adt_giro_tipo) && (giros:adt_impp_serv == giros:adt_impp_serv))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    	
    IF ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars != 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_giro_tipo == giros:adt_giro_tipo) && (giros:adt_impp_tipifica == giros:adt_impp_tipifica))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars == 0) && (giros:adt_impp_tipifica.numchars != 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_impp_prov == giros:adt_impp_prov) && (giros:adt_impp_tipifica == giros:adt_impp_tipifica))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars == 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars != 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_giro_tipo == giros:adt_giro_tipo) && (giros:adt_impp_tipifica == giros:adt_impp_tipifica))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars == 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars == 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_giro_tipo == giros:adt_giro_tipo) && (giros:adt_impp_prov == giros:adt_impp_prov))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    
    IF ((giros:adt_impp_serv.numchars != 0) && (giros:adt_impp_prov.numchars != 0) && (giros:adt_giro_tipo.numchars != 0) && (giros:adt_impp_tipifica.numchars != 0)) THEN 
    	CDS SELECT FROM DSC:Impuprov_tbl BECOMES DSC:Impuprov_ctx \
    	WHERE ((giros:adt_giro_tipo == giros:adt_giro_tipo) && (giros:adt_impp_prov == giros:adt_impp_prov) && (giros:adt_impp_serv == giros:adt_impp_serv) && (giros:adt_impp_tipifica == giros:adt_impp_tipifica))
    	CDS MULTIDISPLAY DSC:Impuprov_ctx LISTimppcod
    END IF 
    	
    IF (CDSRETVAL == 0x01FD) THEN
        GOTO offset_0000
    END IF
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval == 0) THEN
     /* significa que en el multidisplay no se seleccionó nada ("reset key pressed")
    	En ese caso, hay que volver al estado anterior */
        MOVE tmp_impp_serv TO adt_impp_serv 
        if (tmp_val_serv == "S")
        	setvaldone adt_impp_serv 
        end if
		MOVE tmp_giro_tipo TO adt_giro_tipo 
		if (tmp_val_tipo == "S")
			setvaldone adt_giro_tipo 
		end if
		MOVE tmp_impp_prov TO adt_impp_prov
		if (tmp_val_prov == "S")
			setvaldone adt_impp_prov
		end if
		MOVE tmp_impp_pdesc TO ProvSucBenef_fld
    	MOVE tmp_impp_tipifica to adt_impp_tipifica
    	if (tmp_val_tipifica == "S")
    		setvaldone adt_impp_tipifica
    	end if
    	MOVE tmp_impp_exento to  adt_impp_exento
    	MOVE tmp_impp_min_noimp to adt_impp_min_noimp
    	MOVE tmp_impp_tramos to adt_impp_tramos
    	MOVE tmp_impp_montofijo to adt_impp_montofijo
    	MOVE tmp_impp_por_milaje to adt_impp_por_milaje
    	MOVE tmp_impp_condiciona to adt_impp_condiciona
		
		CALL CDSabmImpuprov_load
	            
       ;SMC uso la rutina c para refrescar los campos.
        CALL csr:proc_list(F_REFRESH,lst:giros:LISTImpuProv_fld)
    
       ;SMC uso la rutina c para copiar los campos.
  		CALL csr:proc_list(F_COPY,lst:giros:LISTImpuProv_fld,lst:giros:LISTbck_ImpuProv)
            
        RETURN (-2)
         
    END IF
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    
    IF (RETVAL != 0) THEN
    	CALL csr:proc_list(F_CLEAR,lst:giros:LISTImpuProv_fld)
    	CALL csr:proc_list(F_REFRESH,lst:giros:LISTImpuProv_fld)
        RETURN (-1)
    END IF
    
    CDS EXTRACT DSC:Impuprov_ctx ALL
    ProvSucBenef_fld = giros:adt_impp_pdesc
    adt_impp_prov = giros:adt_impp_prov
	
	/*
   ;SMC uso la rutina c para copiar los campos.
    CALL csr:proc_list(F_COPY,lst:giros:LISTImpuProv_fld,lst:giros:LISTbck_ImpuProv)
  	    
   ;SMC uso la rutina c para refrescar los campos.
    CALL csr:proc_list(F_REFRESH,lst:giros:LISTImpuProv_fld)*/
    
    CDS UNLOCK DSC:Impuprov_ctx
   
    CDS ENDSELECT DSC:Impuprov_ctx  
   	setvaldone adt_impp_prov
	setvaldone adt_impp_serv
	setvaldone adt_giro_tipo
	setvaldone adt_impp_tipifica
    ENDIF
    call FVALtipificacion
END SUB

/*******/
