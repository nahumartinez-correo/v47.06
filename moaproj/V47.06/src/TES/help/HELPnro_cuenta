/****o* Pendientes de agrupación/OFB:tes:HELPnro_cuenta
* NOMBRE
*   OFB:tes:HELPnro_cuenta
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "teshelp.h"

SUB tes:HELPnro_cuenta
    if (tipo_cuenta.numchars == 0 || banco_codigo.numchars == 0)
        cds select from DSC:adt_cta_tbl becomes DSC:adt_cta_ctx \
        where tes:adt_cta_suc == common:sucursal_activa && \
              tes:adt_cta_lugar == lugar_cuenta && \
             (tes:adt_cta_hab == "S" || tes:adt_cta_hab == "s")
    else
        cds select from DSC:adt_cta_tbl becomes DSC:adt_cta_ctx \
        where tes:adt_cta_suc == op:op_branch_id && \
              tes:adt_cta_banco == banco_codigo && \
              tes:adt_cta_tipo == tipo_cuenta && \
              tes:adt_cta_lugar == lugar_cuenta && \
             (tes:adt_cta_hab == "S" || tes:adt_cta_hab == "s")
    end if
    cds multidisplay DSC:adt_cta_ctx LISTctasnro
    if (cdsretval > 0) then
        cds extract adt_cta_ctx all
        move tes:adt_cta_nro to nro_cuenta
        refresh  nro_cuenta
        move tes:adt_cta_tipo to tipo_cuenta
        move tes:adt_cta_banco to banco_codigo
        refresh tipo_cuenta
        refresh banco_codigo
        cds endselect DSC:adt_cta_ctx
        cds select from siaf:adt_banco_table becomes siaf:adt_banco_context \
        where siaf:adt_banco_codigo == banco_codigo
        cds findfirst siaf:adt_banco_context nolock
        let lib:err_retval = CDSRETVAL
        if (lib:err_retval == -801)
            msgbox "BANCO INEXISTENTE",0x00,"ERROR"
        end if
        cds extract dsc:siaf:adt_banco_context siaf:adt_banco_desc
        cds endselect dsc:siaf:adt_banco_context
        move siaf:adt_banco_desc to banco_desc1
        refresh banco_desc1
        refresh siaf:adt_banco_desc
        resetflag drv:mode_flags, picklist_mode
        INIT 33,0
        cds select from DSC:adt_tipo_tbl BECOMES DSC:adt_tipo_ctx \
        where tes:adt_tipo_cod == tipo_cuenta
        cds findfirst DSC:adt_tipo_ctx nolock
        let lib:err_retval = cdsretval
        if (lib:err_retval == -801)
            move "(L) ERROR EN TABLA DE PRODUCTOS" to drv:error_msg
            call  OFB:drv:error_msg
            return (-2)
        else                  
            cds extract DSC:adt_tipo_ctx all  
        end if
    else
        if (lastkey != RT_ESC) then
            clearfield nro_cuenta
            clearfield tipo_cuenta
            clearfield banco_codigo
            refresh nro_cuenta
            refresh tipo_cuenta
            refresh banco_codigo
            clearfield banco_desc1
            clearfield siaf:adt_banco_desc
            refresh banco_desc1
            refresh siaf:adt_banco_desc
            msgbox "NO EXISTE UN NRO. DE CUENTA PARA El TIPO SELECCIONADO",0x00,"AVISO"
            return (-2)
        end if
        cds endselect DSC:adt_cta_ctx
        resetflag drv:mode_flags, picklist_mode
        init 33,0
        return -2
    end if
END SUB

/*******/
