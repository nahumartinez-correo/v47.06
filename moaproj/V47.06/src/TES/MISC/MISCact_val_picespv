/****o* Pendientes de agrupación/OFB:tes:MISCact_val_picespv
* NOMBRE
*   OFB:tes:MISCact_val_picespv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCact_val_picespv
local idx like siaf:i
local encontro like tes:es_tesoro
	encontro = "N"
	idx = PL_GETITEM
	siaf:importe = 0
	do
		call csr:myPickcontrol(dsc:PICPasesDisp,common:csr_string,idx)
		if (retval < 0)
			break
		end if
		if (espv_vsubcod[ncol] == substr(common:csr_string,0,20) && val_importes[ncol] != substr(common:csr_string,42,13) && encontro == "N")
			//Lo elimino del picklist y lo vuelvo a cargar con el importe y/o la cantidad actualizada
            siaf:i = idx - PL_GETITEM
            CALL CSR:myPickdelete(dsc:PICPasesDisp,common:csr_string,siaf:i)
			idx = idx - 1
			
			fprint common:csr_string "%-20s %13.13e %6s %13.13e",\
			espv_vsubcod[ncol],espv_valor[ncol],espv_cantidad[ncol],val_importes[ncol]
			Call csr:f_saaddpl dsc:PICPasesDisp common:csr_string
			siaf:importe = siaf:importe + val_importes[ncol]
			
			encontro = "S"
		end if
		if (encontro == "N" || espv_vsubcod[ncol] != substr(common:csr_string,0,20))
			siaf:importe = siaf:importe + substr(common:csr_string,42,13)
		end if
		idx = idx + 1
	loop
	refresh siaf:importe
	//Ordeno el picklis para que quede igual que antes...(por subespecie)
	CALL csr:PickOp 4 dsc:PICPasesDisp "0,20"
END SUB

/*******/
