/****o* Pendientes de agrupación/OFB:tes:MISCproc_espv
* NOMBRE
*   OFB:tes:MISCproc_espv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCproc_espv
/************************************************************/
/* Esta rutina carga en un vector que simula un picklist    */
/* el cual se va a ir moviendo segun el boton presionado    */
/************************************************************/
local idx like siaf:i
local idx2 like siaf:i
    idx = PasesDisp_idx + PL_GETITEM
    idx2 = 0
    //Recorro el picklist y proceso la informacion de cada item
    do
        call csr:myPickcontrol(dsc:PICPasesDisp,common:csr_string,idx)
		
		espv_vsubcod[idx2] = substr(common:csr_string,0,20)
		espv_valor[idx2] = substr(common:csr_string,21,13)
		espv_cantidad[idx2] = substr(common:csr_string,35,6)
		val_importes[idx2] = substr(common:csr_string,42,13)
		refresh espv_vsubcod[idx2]
		refresh espv_cantidad[idx2]
		refresh val_importes[idx2]

		//Realizo esta operacion solo para la Entrada y no para la Salida. Aproveche para reutilizar esta y otras rutinas
		if (siaf:codigo_siaf == 8860 || siaf:codigo_siaf == 8870) 
			espv_vcod[idx2] = substr(common:csr_string,56,20)
			sequence_val[idx2] = substr(common:csr_string,77,4)
			
			refresh espv_vcod[idx2]
			
        	//Busco si el item se encuentra seleccionado o no y en base a eso lo reflejo en el checkbox
        	call MISCverif_rechazo(idx2)
        	if (retval != 0)
           		Call MISCmarca_rechazo(idx2)
        	else
            	Call MISCdesmarca_rechazo(idx2)
        	end if
        end if
        
        if (idx2 == 9)
        	break
        else
            if ((idx - PL_GETITEM) == PasesDisp_cant - 1)
          		//Se limpian los items que sobran para simular el scroll (si pudiera elegir otro pase)
                //call MISCsobra_pase(idx2)
                break
            else
                idx = idx + 1
                idx2 = idx2 + 1
            end if
        end if
	loop

    //Deshabilito todas las flechas
    if (PasesDisp_cant <= 10)
    	disablecontrol PBespv_abajo
        disablecontrol PBespv_arriba
		call post:MISCflecha_restore
    else
        //Para deshabilitar la flecha para bajar me fijo si llegue hasta el ultimo
        idx = (PasesDisp_cant - 1) + PL_GETITEM
        call csr:myPickcontrol(dsc:PICPasesDisp,common:csr_string,idx)
        if (((siaf:codigo_siaf == 8860 || siaf:codigo_siaf == 8870) && sequence_val[idx2] == substr(common:csr_string,77,4)) || \
           ((siaf:codigo_siaf == 8660 || siaf:codigo_siaf == 8670 || siaf:codigo_siaf == 8530) && espv_vsubcod[idx2] == substr(common:csr_string,0,20))) then	
        	disablecontrol PBespv_abajo
            keydef f32,RT_DOWN
        end if
        //Para deshabilitar la flecha para subir me fijo si estoy parado en el primero
        if (PasesDisp_idx == 0)
        	disablecontrol PBespv_arriba
        end if
    end if
END SUB

/*******/
