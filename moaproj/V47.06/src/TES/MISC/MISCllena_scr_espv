/****o* Pendientes de agrupación/OFB:tes:MISCllena_scr_espv
* NOMBRE
*   OFB:tes:MISCllena_scr_espv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCllena_scr_espv
	
    cds select from TesEspVMov becomes TesEspVMov2 where \
    adt_espv_fecha    == common:system_date && \
    adt_espv_suc      == op:op_branch_id    && \
	adt_espv_orig     == adt_espv_orig      && \
	adt_espv_op_orig  == adt_espv_op_orig   && \
	adt_espv_dest     == op:op_login_id     && \
	adt_espv_seq_pase == adt_espv_seq_pase  && \
	adt_espv_subcod  != TOTAL_TESO		 	&& \
	adt_espv_subcod != "**FORZADO**"  		&& \
	(adt_espv_marca_ing  == "" || adt_espv_marca_ing == "E" || adt_espv_marca_ing == "S")
	
    PasesDisp_cant = 0
    PasesDisp_idx = 0

    CDS FINDFIRST TesEspVMov2 nolock
	lib:err_retval = CDSRETVAL
	IF (lib:err_retval < 0)
		RETURN (-2)
	END IF
	cont1 = 0
	DO
		CDS EXTRACT TesEspVMov2 ALL
		
		if (cont1 < 10) then //Si sobrepasa el vector, solo grabo en el picklist
			espv_vcod[cont1] = adt_espv_cod
			espv_vsubcod[cont1] = adt_espv_subcod
			espv_cantidad[cont1] = adt_espv_cantidad
			val_importes[cont1] = adt_espv_importe
			espv_valor[cont1] = adt_espv_importe / adt_espv_cantidad
			
			acepta_val_aux[cont1] = adt_espv_es_rechazo
			if (adt_espv_marca_ing == "S") //Si es "S", pongo un valor distinto de "N" al vector, para que no me habilite y no me deje rechazar.
				acepta_val_aux[cont1] = "Y"
			end if
			sequence_val[cont1] = adt_espv_seq //Para identificar univocamente cada pase
			
			refresh acepta_val_aux[cont1]
			refresh espv_vcod[cont1]
			refresh espv_vsubcod[cont1]
			refresh espv_cantidad[cont1]
			refresh val_importes[cont1]
		    refresh espv_valor[cont1]
		end if
		
		adt_espv_valor = adt_espv_importe / adt_espv_cantidad
		//Agrego pase al picklist
		fprint common:csr_string "%-20s %13.13e %6s %13.13e %-20s %4s %4s",\
		adt_espv_subcod,adt_espv_valor,adt_espv_cantidad,adt_espv_importe,adt_espv_cod,adt_espv_seq,adt_espv_seq_pase
		
		Call csr:f_saaddpl dsc:PICPasesDisp common:csr_string
		PasesDisp_cant = PasesDisp_cant + 1
				
		CDS FINDNEXT TesEspVMov2 NOLOCK
		lib:err_retval = CDSRETVAL
		IF (lib:err_retval < 0)
			BREAK
		END IF
		cont1 = cont1 + 1
	LOOP
	CDS ENDSELECT TesEspVMov2
    
    Call MISCini_pase_espv

END SUB

/*******/
