/****o* Pendientes de agrupación/OFB:tes:MISCante_pases_pend
* NOMBRE
*   OFB:tes:MISCante_pases_pend
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCante_pases_pend(varl_fecha,varl_moneda)   //tes:MISCbusca_pases_pnd
    local lista_estado like siaf:prod_dsc
    local operador     like op:op_login_id
    local indice       like siaf:i

    call MISCwrite_file(5,"  INFORMACION DE PASES PENDIENTES: ")
    fprint common:csr_string " "
    call MISCwrite_file(5,fld:common:csr_string)
    fprint common:csr_string "-----------------------------------------------------------------------------"
    call MISCwrite_file(5,fld:common:csr_string)
    fprint common:csr_string  \
    "OPER.ORIG.     OPER.DEST.          IMPORTE      ESTADO   TRAN   HORA   SEC."
    call MISCwrite_file(5,fld:common:csr_string)
    fprint common:csr_string "-----------------------------------------------------------------------------"
    call MISCwrite_file(5,fld:common:csr_string)

    /* Aca tengo movimientos pendientes de efvo y cheques  */
    CDS SELECT FROM DSC:tes:AnteTM_tbl BECOMES DSC:tes:AnteTM_ctx WHERE \
    tes:tmov_suc_id == op:op_branch_id && tes:suc_fecha == varl_fecha \
    && tes:tmov_moneda == varl_moneda

    CDS FINDFIRST DSC:tes:AnteTM_ctx NOLOCK
    LET lib:err_retval = CDSRETVAL
    IF (lib:err_retval < 0)
	return (-2)
    end if
    call MISCwrite_file(5,"                   ")
    do
	CDS EXTRACT DSC:tes:AnteTM_ctx ALL

	CDS SELECT op:op_operator_id op:op_login_id FROM  \
	"profiles" BECOMES "prof_ctx2" WHERE op:op_operator_id == FLD:tlr:jnl_operator &&  \
	op:op_branch_id == FLD:op:adt_branch_id
	CDS FINDFIRST "prof_ctx2" NOLOCK
	lib:err_retval = CDSRETVAL
	IF (lib:err_retval == -801) THEN
	   operador = "DESCON."
	ELSE
	  CDS EXTRACT "prof_ctx2" FLD:op:op_login_id INTO FLD:operador
	end if
	CDS ENDSELECT "prof_ctx2"


	fprint common:csr_string "%-14s  %-14s  %13.13s    PEND.   %4.4s %8.8e %4.4s" tmov_login_orig,tmov_login_dest,tmov_total, tmov_codigo_siaf,tmov_hora_orig,tmov_sequence_orig

	call MISCwrite_file(5,fld:common:csr_string)

	/* Sumo los importes para el total consolidado */
        let tes:total_moneda = total_moneda + tmov_total

	/* Busco el siguiente registro */
	CDS FINDNEXT DSC:tes:AnteTM_ctx NOLOCK
	LET lib:err_retval = CDSRETVAL
	IF (lib:err_retval < 0)
	    IF (lib:err_retval == -801)
	       break
	    end if
	    return (-2)
	end if
    loop
    call MISCwrite_file(5,"                   ")
    call MISCwrite_file(5,"                   ")
    call MISCwrite_file(5,"                   ")
END SUB

/*******/
