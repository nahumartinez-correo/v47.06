/****o* Pendientes de agrupación/OFB:tes:MISCimp_cta_saldo
* NOMBRE
*   OFB:tes:MISCimp_cta_saldo
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCimp_cta_saldo(suma1,suma2,suma3)
    local loc_sdo_efvo like sdo_cta_efvo
    local loc_cta like adt_espv_cod
    local tot_por_cta like tes:imp_totales

    tot_por_cta = 0
    clearfield common:csr_string
    refresh common:csr_string
    cds select from dsc:adt_cta_tbl becomes dsc:adt_cta_ctx \
        where adt_cta_suc == fld:common:sucursal_activa && \
              adt_cta_lugar == 1 && \
              adt_cta_hab == "S" && \
              adt_cta_moneda == post:adt_mon_cod
    cds findfirst dsc:adt_cta_ctx lock
    let lib:err_retval = cdsretval
    if (lib:err_retval == -801) then
        fprint common:csr_string "NO EXISTEN CUENTAS BANCARIAS PARA LISTAR"
        call MISCwrite_file1(5,fld:common:csr_string)
    else
        while (lib:err_retval == 0)
               cds extract dsc:adt_cta_ctx all
               call CDSleo_saldo(adt_cta_banco,adt_cta_tipo,adt_cta_nro)
               fprint loc_cta "%20.20s", adt_cta_nro
               loc_cta = substr(loc_cta,12,7)
               if (retval == 1  || retval == -1) then
               	   fprint common:csr_string "%-3.3e-%-3.3s-%-7.7s         0,00          0,00          0,00           0,00",\
               	          adt_cta_banco,adt_cta_tipo,loc_cta
               	   call MISCwrite_file1(5,fld:common:csr_string)
               else
                   tot_por_cta = sdo_cta_efvo + sdo_cta_cheq
                   if (sdo_cta_efvo < 0) then
                       loc_sdo_efvo = (-1) * sdo_cta_efvo
                       if (tot_por_cta >= 0) then
               	           fprint common:csr_string "%-3.3e-%-3.3s-%-7.7s         0,00 %10.10e       0,00(%13.13e) %13.13e",\
               	                  sdo_banco,sdo_tipo_cuenta,loc_cta,sdo_cta_cheq,loc_sdo_efvo,tot_por_cta
               	       else
               	           tot_por_cta = tot_por_cta * (-1)
               	           fprint common:csr_string "%-3.3e-%-3.3s-%-7.7s         0,00 %10.10e       0,00(%13.13e)(%13.13e)",\
               	                  sdo_banco,sdo_tipo_cuenta,loc_cta,sdo_cta_cheq,loc_sdo_efvo,tot_por_cta
               	       end if
                       call MISCwrite_file1(5,fld:common:csr_string)
                       suma3 = suma3 + loc_sdo_efvo
                   else
                       if (tot_por_cta >= 0) then
                       	   fprint common:csr_string "%-3.3e-%-3.3s-%-7.7s%13.13e %10.10e       0,00          0,00 %13.13e",\
                                  sdo_banco,sdo_tipo_cuenta,loc_cta,sdo_cta_efvo,sdo_cta_cheq,tot_por_cta
                       else
                           tot_por_cta = tot_por_cta * (-1)
                           fprint common:csr_string "%-3.3e-%-3.3s-%-7.7s%13.13e %10.10e       0,00          0,00(%13.13e)",\
                                  sdo_banco,sdo_tipo_cuenta,loc_cta,sdo_cta_efvo,sdo_cta_cheq,tot_por_cta
                       end if
                       call MISCwrite_file1(5,fld:common:csr_string)
                       suma1 = suma1 + sdo_cta_efvo
                   end if
                   tot_por_cta = sdo_cta_efvo + sdo_cta_cheq
                   suma2 = suma2 + sdo_cta_cheq

               end if
               cds findnext dsc:adt_cta_ctx lock
               lib:err_retval = cdsretval
        end while
    end if
END SUB

/*******/
