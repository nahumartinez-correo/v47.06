/****o* Pendientes de agrupación/OFB:tes:MISCchk_tmov_cajero
* NOMBRE
*   OFB:tes:MISCchk_tmov_cajero
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCchk_tmov_cajero(tipo_control)
    local hay_lerdos  like siaf:i // flag: otros no hicieron su ingreso
    local falta_ingresar like siaf:i // cuenta la entradas a caja no hechas

   let hay_lerdos = 0 // se comienza pensando que los otros hicieron sus ingr.


	select (tipo_control)
		case "TODOS"
			/* MLD Modifico el control para que no me deje cerrar si tengo 
			un pase como operador origen NO supervisado o como operador 
			destino */
		    CDS SELECT FROM DSC:teso_mov_table BECOMES DSC:teso_mov_context \
		    WHERE tes:tmov_suc_id == op:op_branch_id && \
		      tes:tmov_fecha == common:system_date && \
			 (((tes:tmov_marca_ing  == " " || tes:tmov_marca_ing  == "E") && \
			 (tes:tmov_op_id_dest == op:op_operator_id || tes:tmov_op_id_orig == op:op_operator_id )) || \
			 (tes:tmov_op_id_dest == op:op_operator_id && tes:tmov_marca_ing == "S")) 
			break
		case "DESTINO"
			CDS SELECT FROM DSC:teso_mov_table BECOMES DSC:teso_mov_context \
		    WHERE tes:tmov_suc_id == op:op_branch_id && \
		    tes:tmov_fecha == common:system_date && \
			((tes:tmov_op_id_dest == op:op_operator_id && tes:tmov_marca_ing == "S") || \
			(tes:tmov_op_id_dest == op:op_operator_id && tes:tmov_marca_ing == ""))
			
			break
	end select
			
	CDS FINDFIRST DSC:teso_mov_context NOLOCK
    if (cdsretval == -801) then
		/* si no hay registros => OK! se puede realizar el cierre */
		return (0)
    end if

/* Hay movimientos pendientes */

    /* creo un picklist para mostrar todo lo que queda pendiente */
    call csr:f_sanewpl "pendientes" PIC:tes:movements
    call csr:f_saaddpl "pendientes" "NO INGRESARON OPERACIONES"
    let falta_ingresar = 0
    do
		CDS EXTRACT DSC:teso_mov_context ALL
	
		if (tes:tmov_op_id_orig == op:op_operator_id) then
		    /* soy el operador que origino el movimiento y el
		       operador destino no lo ha ingresado aun */
		    call csr:f_saaddpl "pendientes" tes:tmov_login_dest
		    let hay_lerdos = 1 // hay terceros sin ingresar movim.
		end if
		if (tes:tmov_op_id_dest == op:op_operator_id) then
		    /* soy el operador destino de un movimiento y aun no
		       he hecho el ingreso a caja */
		    let falta_ingresar = falta_ingresar + 1
		end if
	
		CDS FINDNEXT DSC:teso_mov_context NOLOCK
		if (cdsretval < 0) then
		    if (!hay_lerdos) then
			call csr:f_saaddpl "pendientes" "sin pendientes"
		    end if
		    break
		end if
    loop

    call csr:f_saaddpl "pendientes" "------------------------------"
    call csr:f_saaddpl "pendientes" "OPERACIONES SIN INGRESAR"
    fprint common:csr_string "%d operacion/es" falta_ingresar
    call csr:f_saaddpl "pendientes" FLD:common:csr_string

    move "Error en Cierre Caja: Movimientos no Completados"  to \
	common:csr_string
    errmsg common:errmsg_list FLD:common:csr_string
    clearfield common:csr_string
    call csr:f_sadopl "pendientes" FLD:common:csr_string
    return (-2)
END SUB

/*******/
