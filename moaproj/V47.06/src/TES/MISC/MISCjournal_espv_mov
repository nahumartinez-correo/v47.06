/****o* Pendientes de agrupación/OFB:tes:MISCjournal_espv_mov
* NOMBRE
*   OFB:tes:MISCjournal_espv_mov
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCjournal_espv_mov
    local tmp_espv_hora like tes:adt_espv_hora
    local superviso     like tes:rend_marca_cierre
    local nombre_tran   like siaf:nombre_transac

    espv_subcod = TOTAL_TESO

    IF (siaf:continua_transaccion == "S") THEN
	    CALL siaf:SVALnivel_sup_ev
	    if (retval < 0)
	        return (-2)
	    end if
    END IF

    // Guardo si fue supervisada para marcar las otras
    if (testflag(tlr:tran_flags,supovr_granted)) then
	    let superviso = "S"
    else
	    let superviso = "N"
    end if

    cds select from DSC:TesEspVMov BECOMES DSC:TesEspVMov2 where \
    adt_espv_fecha  == common:system_date && \
	adt_espv_suc    == op:op_branch_id    && \
	adt_espv_dest   == op:op_login_id && \
	adt_espv_orig   == adt_espv_orig     && \
	adt_espv_hora   == fld:adt_espv_hora  && \
	adt_espv_cod    == espv_cod           && \
   (adt_espv_subcod == espv_subcod || adt_espv_subcod == "**FORZADO**")
	;(adt_espv_marca_ing == " " || adt_espv_marca_ing == "E")


    cds findfirst DSC:TesEspVMov2 nolock
    let lib:err_retval = cdsretval

    if (lib:err_retval == 0) then
	    cds extract DSC:TesEspVMov2 all
	    tmp_espv_hora   = adt_espv_hora
	    tmov_login_orig = adt_espv_orig
	    siaf:importe    = adt_espv_importe
	    siaf:cantidad   = adt_espv_cantidad
	    tes:es_tesoro   = "S"
	    /*
        let siaf:moneda = 0
        let post:medio_pago_desc = tes:espv_cod
        */
        /* Guardo la secuencia del primero para luego actualizar el resto */
        aux_sequence_mov = adt_espv_seq

	    cds endselect DSC:TesEspVMov2

        /* Se pidió que el header de los pases grabe el importe total
        y la cantidad correspondiente en cero. 17/05/99 - Andrea */
        siaf:importe = 0
        refresh siaf:importe
        siaf:cantidad = 0
        refresh siaf:cantidad

	    FLD:drv:INDjnl_rtn = OFB:tes:JNLentrada_ev
	    ungetkey 0x190
	    call siaf:MISClleno_modalidad

        if (adt_espv_marca_ing == "E") then
            call tes:MISCpongo_sec(tes:adt_espv_seq)
	    end if

	    if (siaf:continua_transaccion == "N" && \
	        (siaf:codigo_siaf == 8860 || siaf:codigo_siaf == 8870))
	        tes:adt_espv_marca_ing = "E"
	    end if

	    call tlr:JNLtran

	    siaf:codigo_siaf = siaf:codigo_siaf + 6
	    select (siaf:codigo_siaf)
		    case 8866
		        let siaf:nombre_transac = "ENTRADA ESP. DE CAJA"
		        move "TESAVC" to tlr:tran_mnemonic
		        break
		    case 8876
		        let siaf:nombre_transac = "ENTRADA ESP. DE TESORO"
		        move "TESAVT" to tlr:tran_mnemonic
		        break
	    end select
	    nombre_tran = siaf:nombre_transac

	    if (siaf:continua_transaccion == "N") then
            fprint siaf:nombre_transac, "RECH %s ", siaf:nombre_transac
	    end if

	    let drv:INDscr = SCR:tes:SCRNmov_ev_ent

	    cds select from DSC:TesEspVMov BECOMES DSC:TesEspVMov2 where \
	    adt_espv_fecha     == common:system_date && \
	    adt_espv_suc       == op:op_branch_id    && \
	    adt_espv_dest      == op:op_login_id && \
	    adt_espv_orig      == adt_espv_orig     && \
	    adt_espv_cod       == tes:espv_cod       && \
       (adt_espv_subcod    != TOTAL_TESO && adt_espv_subcod != "**FORZADO**") && \
	    adt_espv_hora      == tmp_espv_hora && \
       (adt_espv_marca_ing == " " || adt_espv_marca_ing == "E")

	    cds findfirst DSC:TesEspVMov2 nolock
	    let lib:err_retval = cdsretval


	    call csr:f_sadroppl dsc:Especie
	    call csr:f_sanewpl dsc:Especie pic:Especie

	    let post:importe = 0

	    do
	        if (lib:err_retval != 0) then
		        cds unlock DSC:TesEspVMov2
		        cds endselect DSC:TesEspVMov2
		        break
	        end if

	        cds extract DSC:TesEspVMov2 all
	        cds unlock DSC:TesEspVMov2

	        tmov_login_orig = adt_espv_orig
	        siaf:importe    = adt_espv_importe
	        siaf:cantidad   = adt_espv_cantidad
	        espv_cod        = adt_espv_cod
	        espv_subcod     = adt_espv_subcod
	        tes:es_tesoro   = "S"

	        fprint common:csr_string "%-20s %-20s    %13.13s \n", \
                   adt_evaux_codigo,adt_evaux_subcod,adt_evaux_importe
	        call csr:f_saaddpl dsc:Especie common:csr_string
	        let post:importe = post:importe + siaf:importe

	        FLD:drv:INDjnl_rtn = OFB:tes:JNLentrada_ev
	        ungetkey 0x190
	        call siaf:MISClleno_modalidad

	        if (superviso == "S") then
	            // si la primera fue supervisada , marco todas
		        setflag tlr:tran_flags,supovr_granted
	        endif

	        if (adt_espv_marca_ing == "E") // && rechazo == "S") then
	    	    siaf:nombre_transac = nombre_tran
                call tes:MISCpongo_sec(tes:adt_espv_seq)
	        end if
	        if (siaf:continua_transaccion == "N")  //FLOR
	            tes:adt_espv_marca_ing = "E"
	        end if

	        call tlr:JNLtran

	        cds findnext DSC:TesEspVMov2 nolock
	        let lib:err_retval = cdsretval
	    loop
	    CLEARFIELD drv:INDjnl_rtn

	    // Actualizo  la  marca de completo una vez que termino conn todo
        let adt_espv_seq = aux_sequence_mov
        if (tlr:context_retval == 0)
        CALL tes:CDScabe_EspVcomp("C")
        end if

	    //si el pase es rechazado NO emitir ticket
	    if (siaf:continua_transaccion == "S")
	        let drv:INDspc_rtn[2] = ofb:TRANprint_salida_ev
	    end if
    end if
END SUB

/*******/
