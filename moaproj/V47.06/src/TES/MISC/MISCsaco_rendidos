/****o* Pendientes de agrupación/OFB:tes:MISCsaco_rendidos
* NOMBRE
*   OFB:tes:MISCsaco_rendidos
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesMISC.h"

SUB tes:MISCsaco_rendidos(prm_cant)
    local varl_idx like siaf:i // contador para el array
    local varl_aux like siaf:i // contador auxiliar en eliminacion de elem.
    let varl_idx = 1
    DO
        if (varl_idx > prm_cant) then
            // verifique todos los operadores
            break
        end if
        // reviso la marca de rendicion de un operador
        let op:adt_operator_id = tes:texto_aux[varl_idx]
        CDS SELECT FROM DSC:tes:rend_caj_table \
	BECOMES DSC:tes:rend_caj_context \
        WHERE tes:rend_op_id == op:adt_operator_id && \
              tes:rend_suc_id == op:op_branch_id
        if (cdsretval == 0) then
            CDS FINDFIRST DSC:tes:rend_caj_context NOLOCK
            if (cdsretval == 0) then
                call csr:cleararray tes:rend_marca_vec
                CDS EXTRACT DSC:tes:rend_caj_context \
                        array tes:rend_marca_vec

                        /*
			tes:rend_marca_vec[0] tes:rend_marca_vec[1] \
			tes:rend_marca_vec[2] tes:rend_marca_vec[3] \
			tes:rend_marca_vec[4] tes:rend_marca_vec[5] \
			tes:rend_marca_vec[6]
			*/
                if (tes:rend_marca_vec[siaf:moneda] == "X" || tes:rend_marca_vec[siaf:moneda] == "D") then
                    //  el operador ya realizo la rendicion de la moneda
                    //  del pase en cuestion
                    let varl_aux = varl_idx
                    do
                        if (varl_aux > prm_cant) then
                            break
                        end if
			move texto_aux[varl_aux + 1] to texto_aux[varl_aux]
                        ;let texto_aux[varl_aux] = texto_aux[varl_aux + 1]
                        let varl_aux = varl_aux + 1
                    loop
                    let prm_cant = prm_cant - 1 // ahora hay 1 elem. menos
                else
		    let varl_idx = varl_idx + 1
                end if
            end if
        end if
    LOOP
    return (prm_cant) // retorno la cantidad de operadores restantes
END SUB

/*******/
