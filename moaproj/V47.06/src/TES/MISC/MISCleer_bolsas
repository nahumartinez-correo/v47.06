/****o* Pendientes de agrupación/OFB:tes:MISCleer_bolsas
* NOMBRE
*   OFB:tes:MISCleer_bolsas
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   TES:FVALsalida_buzon,TES:PBbolsa_abajo,TES:PBbolsa_arriba
* DOCUMENTACION
*   https://jirats.atos.net.ar/jira/browse/AUT-2354
* SOURCE
*/
#include "tesMISC.h"
#include "descuento.h"
#include "keys.h"

SUB tes:MISCleer_bolsas(valor)

	local idx  	          like post:indice_pos
	local idx2 	          like post:indice_pos
	local varl_tipo_bolsa like tes:adt_depbuzon_tipo
	local l_bolsa_desc    like common:csr_string
	local l_bolsa_display like common:csr_string
	
	/************************************************************
	Se leen las bolsas de DepBuzon correspondientes a la caja 
	seleccionada y se envian a un picklist dinamico. Esto se hace
	solo cuando se selecciona el nro de caja buzon.
	*************************************************************/
	if (valor == "S") then
		call tes:CDSbolsas_buzon
		if (retval < 0) then
			msgbox "No hay bolsas en la caja.", 0x00, "ATENCION"
			return -2
		endif	
	endif

  idx = post:items_desc_idx + PL_GETITEM
  idx2 = 0

  do
		call csr:myPickcontrol(dsc:tes:bolsas_caja,common:csr_string,idx)
		tes:bolsa_tipo[idx2] = substr(common:csr_string,0,1)
		tes:bolsa_vec[idx2] = substr(common:csr_string,1,8)
		if (tes:bolsa_tipo[idx2] != "E") then
			/*tes:val_moneda[idx2] = substr(common:csr_string,9,2)
			tes:bolsa_desc[idx2] = substr(common:csr_string,11,30)
			tes:val_importes[idx2] = substr(common:csr_string,41,13)*/
			tes:bolsa_desc[idx2] = substr(common:csr_string,9,30)
			tes:val_importes[idx2] = substr(common:csr_string,39,13)
		else
			tes:bolsa_desc[idx2] = substr(common:csr_string,9,40)
			tes:val_importes[idx2] = substr(common:csr_string,49,13)
		endif
	
    refresh tes:bolsa_tipo[idx2]
    refresh tes:bolsa_vec[idx2]
    refresh tes:bolsa_desc[idx2]
    refresh tes:val_importes[idx2]
    unprotfield tes:val_importes[idx2]

		if (idx2 == 9)
			break
		else
			if ((idx - PL_GETITEM) == post:items_desc_cant - 1)
				/*call MISCresto_item_bolsa(idx2)
				refresh tes:bolsa_tipo[idx2]
				refresh tes:bolsa_vec[idx2]
				refresh tes:bolsa_desc[idx2]
				refresh tes:val_importes[idx2]*/
				break
			else
				idx  = idx  + 1
				idx2 = idx2 + 1
			end if
		end if
  loop
  
  //Deshabilito todas las flechas	
  if (post:items_desc_cant <= MAX_BOLSAS )
		disablecontrol PBbolsa_abajo
		disablecontrol PBbolsa_arriba
		call post:MISCflecha_restore
  else
		//Para deshabilitar la flecha para bajar me fijo si llegue hasta el ultimo
		idx = (post:items_desc_cant - 1) + PL_GETITEM
		call csr:myPickcontrol(dsc:tes:bolsas_caja,common:csr_string,idx)
		//PS 9692
		l_bolsa_desc = substr(common:csr_string,0,39)
		fprint l_bolsa_display "%-1.1s%-8.8s%-30.30s",tes:bolsa_tipo[idx2],tes:bolsa_vec[idx2],tes:bolsa_desc[idx2]
		if ( l_bolsa_desc == l_bolsa_display )
			disablecontrol PBbolsa_abajo
			call post:MISCflecha_restore
			keydef KEY_DOWN_AT
		else
			enablecontrol PBbolsa_abajo
			call post:MISCflecha_restore
			keydef KEY_DOWN_AT,tes:PBbolsa_abajo
		end if
		
		if ( post:items_desc_idx  == 0)
			disablecontrol PBbolsa_arriba
			call post:MISCflecha_restore
			keydef KEY_UP_AT
		else
			enablecontrol PBbolsa_arriba
			call post:MISCflecha_restore
			keydef KEY_UP_AT,tes:PBbolsa_arriba
		end if
	end if
END SUB

/*******/
