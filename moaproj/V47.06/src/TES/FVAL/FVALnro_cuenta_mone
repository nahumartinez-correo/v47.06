/****o* Pendientes de agrupación/OFB:tes:FVALnro_cuenta_mone
* NOMBRE
*   OFB:tes:FVALnro_cuenta_mone
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesFVAL.h"

SUB tes:FVALnro_cuenta_mone

    if (!TESTFLAG(tlr:tran_flags,correction))
     
        if (nro_cuenta.numchars == 0) then
            call HELPnro_cuenta_mone
            if (retval < 0 ) then
                protfield boleta_deposito
                protfield post:nro_cheque
                return (-2)
            end if
        else         
            cds select from DSC:adt_cta_tbl BECOMES DSC:adt_cta_ctx \
                where tes:adt_cta_suc == op:op_branch_id && \
                      tes:adt_cta_banco == banco_codigo && \
                      tes:adt_cta_tipo == tipo_cuenta && \
                      tes:adt_cta_nro == nro_cuenta && \
                     (tes:adt_cta_hab == "S" || tes:adt_cta_hab == "s") && \
                     (tes:adt_cta_moneda == post:adt_mp_mon)
            cds findfirst DSC:adt_cta_ctx nolock
            let lib:err_retval = cdsretval
            if (lib:err_retval == -801)
                msgbox "NUMERO DE CUENTA INEXISTENTE",0x00,"ERROR"
                call HELPnro_cuenta_mone
                if (retval < 0 ) then
                    protfield boleta_deposito      
                    protfield post:nro_cheque  
                    return (-2)
                end if
            else
                cds extract DSC:adt_cta_ctx all
                nro_cuenta = tes:adt_cta_nro
                limite_cuenta = adt_cta_limite
            end if
        end if
                
        refresh nro_cuenta
        refresh adt_cta_limite
        protfield banco_codigo
        protfield tipo_cuenta
        protfield nro_cuenta
        unprotfield boleta_deposito
        unprotfield post:nro_cheque
        unprotfield tipo_comp
 	    drv:button = 0
        call drv:but_disable
 	    drv:button = 1
        call drv:but_disable
 	    drv:button = 2
        call drv:but_disable            
        
        
     /* Lockeo la tabla CtasBancarias para que otro usuario no realice operaciones */
        call CDSctasbanc_lock
        if (retval < 0) then       
            unprotfield banco_codigo
            unprotfield tipo_cuenta
            unprotfield nro_cuenta
       	    drv:button = 0
            call drv:but_enable            
       	    drv:button = 1
            call drv:but_enable            
       	    drv:button = 2
            call drv:but_enable                        
            protfield boleta_deposito
            protfield post:nro_cheque
            protfield tipo_comp            
            return (-2)                  
        end if
     /* Flag para saber que  debo desbloquear la tabla de CtasBanco */
        let flag_buzon = "X"
        tes:moneda_dep = tes:adt_tipo_mone        
    end if
END SUB

/*******/
