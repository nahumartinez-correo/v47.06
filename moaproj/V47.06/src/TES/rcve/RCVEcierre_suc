/****o* Pendientes de agrupación/OFB:tes:RCVEcierre_suc
* NOMBRE
*   OFB:tes:RCVEcierre_suc
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesrcve.h"

SUB tes:RCVEcierre_suc
   Call post:RCVEsecuenDefault
   If ( giros:CodRespuesta_comm  != "00" ) 
        Call giros:MISCidentifico_error(giros:CodRespuesta_comm)
        msgbox common:csr_string_130,OFB_OK,"Error"
        let hcomm:tran_status = HOST_REJECTED    
        LET MSG = MSGEND  			
   End If    
      
   IF ( hcomm:tran_status == HOST_ACCEPTED ) THEN
		; Los scripts se ejecutan al enviar un mensaje al host2, pero
		; para poder recibir una respuesta se necesita libre el evento recibe
		; tomado en este punto por la comunicación con el host1
		; para solucionar este inconveniente asignamos la ejecución de los scrpts
		; al campo indirecto drv:INDspc_rtn[4] para que estos se ejecuten más adelante
		; donde el evento recibe se encuentra disponible *** MDG
		;CALL tes:MISCtermino_cierre
   		drv:INDspc_rtn[4] = ofb:tes:MISCtermino_cierre
   ELSE   	   
   	   clearfield drv:INDspc_rtn[3] ; No realiza LINKtes_efvo_ini 
   	   clearfield drv:INDspc_rtn[4] ; No realiza MISClist_cierre_suc (impresion)
   	   
   	   /* CGW: Limpia tes:dt_app_aux */
       if (tes:dt_app_aux == 4) || (tes:dt_app_aux == 5) then
           clearfield tes:dt_app_aux
       end if
       
   	   cds unlock dsc:DiaSuc_context
       cds endselect dsc:DiaSuc_context   	   
   END IF	
   /* limpio tlr:jnl_status, ya que este no queda inicializado */
   clearfield tlr:jnl_status
END SUB

/*******/
