/****o* Pendientes de agrupación/OFB:tes:PBchq2_agregar
* NOMBRE
*   OFB:tes:PBchq2_agregar
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesPB.h"

SUB tes:PBchq2_agregar
    /* Agrega registros a la tabla AuxCheq */
    if (siaf:cod_banco.numchars == 0 || siaf:cheqcuenta.numchars == 0 || \
       siaf:nro_cheque.numchars == 0 || tes:clearing.numchars == 0) then
       ;|| siaf:importe.numchars == 0 ) then
	   errmsg lst:common:errmsg_list,"Falta ingresar algún campo"
	   drv:button = drv:last_button
       call drv:but_up_enable
	   return (-1)
    else
       select (siaf:codigo_siaf)
            case 7560
            case 7640
        
                IF (!(admin:adt_br_branch.PROTECTED))
                     CALL CSR:set_currentfield admin:adt_br_branch
                     CALL FVAL_TesoreriaDest
                     IF (RETVAL < 0)
                        drv:button = drv:last_button
                        call drv:but_up_enable
                        RETURN -1
                     END IF
                     PROTFIELD admin:adt_br_branch
                     drv:button = 11
                     call drv:but_disable
                END IF
                break
          
       end select      
       
                
       if (siaf:cod_banco.numchars > 0) then
          cds select from siaf:adt_banco_table becomes siaf:adt_banco_context \
          where siaf:adt_banco_codigo == siaf:cod_banco
          cds findfirst siaf:adt_banco_context nolock
          LET lib:err_retval = CDSRETVAL
          cds endselect siaf:adt_banco_context

          if (lib:err_retval == -801)
            msgbox "BANCO DEL CHEQUE INEXISTENTE",0x00,"ERROR"
            drv:button = drv:last_button
            call drv:but_up_enable
            return (-1)
          end if
       end if

       if (tes:clearing > 0 || tes:clearing.numchars > 0)
          let adt_clearing_cod = clearing
          call CDSclearing_load2
          if (retval < 0)
                errmsg lst:common:errmsg_list, \
        		"Clearing Inexistente"
               	drv:button = drv:last_button
                call drv:but_up_enable
                return (-1)
          end if
       end if

	/* No se permite cheque diferido con fecha de vencimiento > al dia de la fecha */
        //recupero la fecha de vencimiento
	let tes:teso_cheq_banco   = siaf:cod_banco
    	let tes:teso_cheq_nro     = siaf:nro_cheque

	call tes:CDStesoro_cheq_load
	if (siaf:moneda == 02 && tes:teso_cheq_fvto > common:system_date) then
		errmsg lst:common:errmsg_list "Cheque con Fecha de Vto mayor a la del día de la fecha."
		drv:button = drv:last_button
                call drv:but_up_enable
        	return (-1)
	endif
       
    end if
    
    move siaf:moneda     to tes:adt_cheqaux_moneda
    move op:op_branch_id to adt_cheqaux_suc
    
    let tes:teso_cheq_suc     = op:op_branch_id
    let tes:teso_cheq_banco   = siaf:cod_banco
    let tes:teso_cheq_cuenta  = siaf:cheqcuenta
    let tes:teso_cheq_nro     = siaf:nro_cheque
    let tes:teso_cheq_importe = post:importe_origen
    let tes:teso_cheq_moneda  = siaf:moneda
    if (drv:dt_app == 4) then          
         let teso_cheq_estado = "T"
         let teso_cheq_id = op:op_tesoro_id
         call CDStesoro_cheq_load
         if (retval < 0) then
             errmsg lst:common:errmsg_list, "Cheque No Pertence al Tesoro"
             call drv:but_up_enable
             call drv:but_disable
             return (-1)
         end if
        let siaf:importe = tes:teso_cheq_importe
        refresh siaf:importe
    	let adt_cheqaux_tesoro = "S"
        let adt_cheqaux_op = op:op_tesoro_id
    else
         let teso_cheq_estado = "O"
         let teso_cheq_id = op:op_operator_id
         call CDStesoro_cheq_load
         if (retval < 0) then
             errmsg lst:common:errmsg_list, "Cheque No Pertence a la Caja"
             call drv:but_up_enable
             call drv:but_disable
             return (-1)
         end if
        
        let post:importe_origen = tes:teso_cheq_importe
        refresh post:importe_origen
        let adt_cheqaux_tesoro = "N"
	let adt_cheqaux_op = op:op_operator_id
    endif
    
	call post:CDSbusco_jnl_cheque(siaf:moneda,siaf:cod_banco,siaf:cheqcuenta,siaf:nro_cheque,UNPOSTED)
	select (retval)
		case -1
      		drv:button = drv:last_button			
            call drv:but_up_enable
			return (-2)
			break
		case -2
			errmsg lst:common:errmsg_list "El cheque aun no ha sido registrado. Aguarde unos instantes y vuelva a intentar"
			drv:button = drv:last_button						
            call drv:but_up_enable
			return (-2)
			break
	end select	    
    /* No se permite sacar un cheque pendiente de reemplazo */
    if (tes:teso_cheq_recep == "S") then
    	errmsg lst:common:errmsg_list "Cheque Pendiente de Reemplazo"
      	drv:button = drv:last_button
        call drv:but_up_enable    	
       return (-2)
    end if
    
    let adt_cheqaux_banco    = siaf:cod_banco
    let adt_cheqaux_cuenta   = siaf:cheqcuenta
    let adt_cheqaux_nro      = siaf:nro_cheque
    let adt_cheqaux_clearing = tes:clearing // tes:teso_cheq_clearing
    call CDSchq2_load
    if (retval == 0) then    
	    errmsg lst:common:errmsg_list, "Cheque Ya Ingresado"
	    drv:button = drv:last_button
        call drv:but_up_enable
	    return (-2)
    endif
    let adt_cheqaux_importe = post:importe_origen
    call CDSchq2_save
    CALL MISCdisplay_chq2
    CALL CSR:proc_list(F_CLEAR,LST:LISTcheque)
    CALL CSR:proc_list(F_REFRESH,LST:LISTcheque)

    NEXTFIELD siaf:cod_banco
    drv:button = drv:last_button
    call drv:but_up_enable
    if (drv:dt_app == 4) then
        call drv:but_disable
    end if
    ;call drv:but_disable
END SUB

/*******/
