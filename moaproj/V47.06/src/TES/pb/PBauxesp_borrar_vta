/****o* Especies Valorizadas/OFB:tes:PBauxesp_borrar_vta
* NOMBRE
*   OFB:tes:PBauxesp_borrar_vta
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   LST:tes:BUTventa_ev
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tespb.h"

SUB tes:PBauxesp_borrar_vta
    local tmp_sin_stock like adt_evaux_tesoro
    local tmp_cantidad like adt_evaux_cantidad
    local tmp_importe like adt_evaux_importe
	local nropresu like post:PreDNroTrn
	; Con las restricciones de especies, esto de abajo no va mas...
    /*CSZ - En el caso de pagar con cheque diferido No se permiten seleccionar
    especies que no admitan dicho medio de pago*/
/*    CALL MISCchequeo_esp_up
    IF (RETVAL < 0)
        drv:button = drv:last_button
        call drv:but_up_enable
      	RETURN (-2)
	END IF*/

    tmp_sin_stock = "N"
    tmp_cantidad = 0
    tmp_importe = 0

    if (adt_evaux_subcod.numchars == 0 || adt_evaux_cantidad == 0 || \
	    adt_evaux_importe == 0 ) then
	    errmsg lst:common:errmsg_list,"Falta ingresar algún campo"
	    drv:button = drv:last_button
        call drv:but_up_enable
	    return (-1)
    end if

    call MISCespv_ctrl_stock
    if (retval < 0) then
    	tmp_sin_stock = "S"
    end if

    drv:button = drv:last_button
    call drv:but_down_disable

    // Por tesoro
    if (drv:dt_app == 4) then
    	let adt_evaux_tesoro = "S"
        let adt_evaux_op = op:op_tesoro_id
    else
        let adt_evaux_tesoro = "N"
	    let adt_evaux_op = op:op_operator_id
    endif
    let adt_evaux_suc = op:op_branch_id
    let adt_evaux_codigo = espv_cod
    nropresu = 0
    CALL CDSauxesp_load_vta(nropresu)
    call CDSauxesp_del_vta(tmp_cantidad, tmp_importe)
  	if (post:cli_tipo != 1 && \
  		post:enCombo != "S") then
	    //cgw:si no es un producto de un combo, calcula importes.
    	if (tmp_sin_stock == "N")
            let siaf:importe = siaf:importe - adt_evaux_importe
            let post:imp_promo_epvs = post:imp_promo_epvs - post:fld_promo_imp
        	let importe_evaux = siaf:importe - post:imp_promo_epvs
            //Tratamiento Cliente Medio
			if (post:cli_tipo == CLIMED && tes:adt_espv_bonifCM == "S") then
				//acumulo el importe de las transacciones que permiten bonificar al cliente medio
				let tes:SimporteCM = tes:SimporteCM  - adt_evaux_importe
				/*acumulo el importe de las especies bonificadas
				if (adt_evaux_descCM > 0) then
					let tes:PimporteCM = tes:PimporteCM - adt_evaux_importe
				end if*/
				post:Dcto_CliMed = post:Dcto_CliMed - post:Dcto_CliMedAux //ojo
				post:Imp_DctoCliMed = post:Imp_DctoCliMed - ((adt_evaux_importe * post:Dcto_CliMedAux) / 100)
			endif
        else
            let siaf:importe = siaf:importe - tmp_importe
        end if

        refresh importe_evaux
        // FGB muestro mensaje en el visor
        call post:MISCmensaje_visor("D")
    end if
    if (tmp_sin_stock == "N") then
        let siaf:cantidad = siaf:cantidad - adt_evaux_cantidad
    else
        let siaf:cantidad = siaf:cantidad - tmp_cantidad
    end if

    call ABMauxesp_clear
    call ABMauxesp_refresh
    clearfield cheques_ingresados

    drv:button = 2
    call drv:but_enable
    drv:button = 3
    call drv:but_enable
    unprotfield adt_evaux_subcod
    drv:button = 4
    call drv:but_disable
    drv:button = 5
    call drv:but_up_enable
    call drv:but_disable
    clearfield cheques_ingresados
    refresh tes:cheques_ingresados
    NEXTFIELD adt_evaux_subcod
    ;setvaldone adt_evaux_subcod
    resetvaldone adt_evaux_subcod
END SUB

/*******/
