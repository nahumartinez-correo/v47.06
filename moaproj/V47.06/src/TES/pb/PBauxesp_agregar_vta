/****o* Especies Valorizadas/OFB:tes:PBauxesp_agregar_vta
* NOMBRE
*   OFB:tes:PBauxesp_agregar_vta
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*  OFB:post:MISCcombo_tx_dataval, LST:tes:BUTdep_ev_buzon, LST:tes:BUTventa_ev
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tespb.h"

SUB tes:PBauxesp_agregar_vta
    local nropresu like post:PreDNroTrn
    local loc_importe like siaf:importe
    local loc_importe_evaux like tes:importe_evaux
    local loc_imp_promo_epvs like post:imp_promo_epvs                
    local loc_mensaje like common:csr_string
    
    /* Agrega registros a la tabla AuxEspV */
    if (((adt_evaux_subcod.numchars == 0 || adt_evaux_cantidad.numchars == 0 || \
	      adt_evaux_importe == 0) && post:cli_tipo != 1) || ((adt_evaux_subcod.numchars == 0 || \
	      adt_evaux_cantidad.numchars == 0) && post:cli_tipo == 1)) then
	      errmsg lst:common:errmsg_list,"Falta ingresar algún campo"
	      drv:button = drv:last_button
          call drv:but_up_enable
	      return (-1)
    endif
    
    call tes:MISCdejaAgregarEspV
    if (retval < 0) then
        errmsg lst:common:errmsg_list,"No hay registros que coincidan"
        clearfield espv_cod
        clearfield adt_evaux_subcod
        clearfield adt_evaux_cantidad
        clearfield adt_evaux_importe
        refresh espv_cod
        refresh adt_evaux_subcod
        refresh adt_evaux_cantidad
        refresh adt_evaux_importe
        drv:button = drv:last_button
        call drv:but_up_enable
	    return (-1)
    endif    
    
	; Con las restricciones de especies, esto de abajo no va mas...
    /*CSZ - En el caso de pagar con cheque diferido No se permiten seleccionar
    especies que no admitan dicho medio de pago*/
/*    CALL MISCchequeo_esp_up
    IF (RETVAL < 0)
        drv:button = drv:last_button
        call drv:but_up_enable
      	RETURN (-2)
	END IF*/

    /*MFM - Tratamiento Cliente Medio*/
    IF (post:cli_tipo == CLIMED) THEN
		//chequeo que el producto esté habilitado para la venta y bonificacion a CM
		CALL post:MISCVerifCM
		if (retval < 0)
			drv:button = drv:last_button
        	call drv:but_up_enable
			return (-1)
		end if
	END IF

    call FVALsubesp_mov_pb
    if (retval < 0) then
        drv:button = drv:last_button
        call drv:but_up_enable
        return (-2)
    end if
    call FVALcant_venta_ev_pb
    if (retval < 0) then
        drv:button = drv:last_button
        call drv:but_up_enable
        return (-2)
    end if
    call FVALimporte_ev_pb
    if (retval < 0) then
        drv:button = drv:last_button
        call drv:but_up_enable
        return (-2)
    end if
    call MISCespv_ctrl_stock
    if (retval < 0) then
        drv:button = drv:last_button
        call drv:but_up_enable
        return (-2)
    end if

    // Por tesoro
    if (drv:dt_app == 4) then
    	let adt_evaux_tesoro = "S"
        let adt_evaux_op = op:op_tesoro_id
    else
        let adt_evaux_tesoro = "N"
	    let adt_evaux_op = op:op_operator_id
    endif
    let adt_evaux_suc = op:op_branch_id
    let adt_evaux_codigo = espv_cod
    if (post:estado_presu == 1 || post:estado_presu == 2 || post:estado_presu == 3) then
       /* hasta no salir de este modo el PreDNroTrn se graba en cero en la AuxEspV */
        nropresu = 0
        CALL CDSauxesp_load_vta(nropresu)
    else
        CALL CDSauxesp_load_vta(post:PreDNroTrn)
    end if
   // call CDSauxesp_load_vta
    if (retval == 0) then
	    errmsg lst:common:errmsg_list, "Denominación Ya Ingresada"
	    drv:button = drv:last_button
        call drv:but_up_enable
	    return (-2)
    endif
  	if (post:cli_tipo != 1 && \
  		post:enCombo != "S") then
	    //cgw:si no es un producto de un combo, calcula importes.
	    
	    //cgw:reservo importes antes de actualizarse por si se debe volver atras por superar minimos.
	    loc_importe = siaf:importe
	    loc_imp_promo_epvs = post:imp_promo_epvs
	    loc_importe_evaux = tes:importe_evaux
	    
        let siaf:importe = siaf:importe + adt_evaux_importe
        let post:imp_promo_epvs = post:imp_promo_epvs + post:fld_promo_imp
        let importe_evaux = siaf:importe - post:imp_promo_epvs
        
        IF (post:Modo == "R" && siaf:importe > post:adt_dgralsuc_impesp) THEN
            fprint loc_mensaje "%s\n", \
                   "Se ha superado el importe maximo de Especies Valorizadas para "
            fprint loc_mensaje "%s%s", \
        	       loc_mensaje,"Consumidor Final en Teclas Rapidas. Debe iniciar una sesion."
        	msgbox loc_mensaje,OFB_OK,"Aviso"
        	//recupero importes antes de actualizacion
        	siaf:importe = loc_importe
        	post:imp_promo_epvs = loc_imp_promo_epvs
        	tes:importe_evaux = loc_importe_evaux
        	
	        drv:button = drv:last_button
            call drv:but_up_enable
	        return (-2)
        END IF
        
		//Tratamiento Cliente Medio
		if (post:cli_tipo == CLIMED && tes:adt_espv_bonifCM == "S") then
			//acumulo el importe de las especies que permiten bonificar al cliente medio
			let tes:SimporteCM = tes:SimporteCM + adt_evaux_importe
			/*acumulo el importe de las especies bonificadas
			if (adt_evaux_descCM > 0) then
				let tes:PimporteCM = tes:PimporteCM + adt_evaux_importe
			end if*/
			let post:Dcto_CliMed = post:Dcto_CliMed + adt_evaux_descCM //ojo
			post:Imp_DctoCliMed = post:Imp_DctoCliMed + ((adt_evaux_importe * adt_evaux_descCM) / 100)
		endif

        // FGB muestro mensaje en el visor
        call post:MISCmensaje_visor("D")

    else
//      adt_evaux_importe = 0
        siaf:importe = 0
        importe_evaux = 0
        post:imp_promo_epvs = 0
    end if

    if (post:estado_presu == 3) then
        adt_evaux_prestran = 0
        refresh adt_evaux_prestran
    end if
    adt_evaux_envio = "N"
    call CDSauxesp_save_vta
    let siaf:cantidad = siaf:cantidad + adt_evaux_cantidad
    refresh siaf:importe
    refresh importe_evaux
    refresh post:imp_promo_epvs
    CALL MISCdisplay_especies
    call ABMauxesp_clear
    call ABMauxesp_refresh
    NEXTFIELD adt_evaux_subcod
    drv:button = drv:last_button
    call drv:but_up_enable
    ;setvaldone adt_evaux_subcod
    resetvaldone adt_evaux_subcod
END SUB

/*******/
