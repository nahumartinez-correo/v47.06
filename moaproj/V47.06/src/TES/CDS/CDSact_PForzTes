/****o* Pendientes de agrupación/OFB:tes:CDSact_PForzTes
* NOMBRE
*   OFB:tes:CDSact_PForzTes
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSact_PForzTes
    pfmov_fecha          = common:system_date
    pfmov_login_dest     = tes:tes_login_dest
    pfmov_op_id_orig     = tes:tes_operator_id_orig
    pfmov_sequence_inter = 0
    ;pfmov_hora_inter     = common:time_of_day
    pfmov_suc_id         = common:sucursal_activa //op:op_branch_id
    pfmov_login_inter    = tes:tes_login_inter
    pfmov_op_id_inter    = tes:tes_op_inter

    call csr:cleararray(pfmov_marca_mone)
	
    CDS SELECT from DSC:tes:PForzTes_tbl becomes DSC:tes:PForzTes_ctx WHERE \
    pfmov_suc_id         == pfmov_suc_id         && \
    pfmov_login_dest     == pfmov_login_dest     && \
    pfmov_op_id_orig     == pfmov_op_id_orig     && \
    pfmov_sequence_inter == pfmov_sequence_inter && \
    pfmov_hora_inter     == pfmov_hora_inter && \
    pfmov_fecha == common:system_date


    CDS FINDFIRST DSC:tes:PForzTes_ctx lock
    lib:err_retval = CDSRETVAL
    if (lib:err_retval == 0)
        cds extract dsc:PForzTes_ctx pfmov_importes

        let pfmov_importes[siaf:moneda] = tes_imp_mon[siaf:moneda]
        CDS CLEARBUFFER DSC:tes:PForzTes_ctx

        CDS APPEND DSC:tes:PForzTes_ctx \
        array pfmov_importes

        cds update DSC:tes:PForzTes_ctx lock
    end if
    CDS UNLOCK DSC:tes:PForzTes_ctx
    CDS ENDSELECT DSC:tes:PForzTes_ctx
END SUB

/*******/
