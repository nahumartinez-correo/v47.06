/****o* Pendientes de agrupación/OFB:tes:CDSpase_load
* NOMBRE
*   OFB:tes:CDSpase_load
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSpase_load
    cds select from dsc:AuxCheq_tbl becomes dsc:AuxCheq_ctx \
    where adt_cheqaux_suc == fld:adt_cheqaux_suc && \
          adt_cheqaux_op == fld:adt_cheqaux_op && \
          adt_cheqaux_cuenta == fld:adt_cheqaux_cuenta
	cds findfirst DSC:AuxCheq_ctx nolock
    let lib:err_retval = cdsretval
	/*Creo el picklist que voy a mostrar*/
    CALL csr:f_sadroppl dsc:pases
    CALL csr:f_sanewpl dsc:pases pic:pic_pase
	Do
	    if (lib:err_retval != 0) then
			break
	    end if
	    cds extract dsc:AuxCheq_ctx all
	    let cont1 = 0
	    Do
	    	if (cont1 > 13)
	    		break
	    	end if
	    	if (mp_codigo[cont1].numchars == 0)
	    		break
	    	end if
	    	if (importes_pase[cont1] > 0)
				fprint common:csr_string,"%-25.25s      %-12.12e",mp_texto[cont1],importes_pase[cont1]
				CALL csr:f_saaddpl dsc:pases common:csr_string	    		
	    	end if
	    	cont1 = cont1 + 1
		Loop
		cds findnext DSC:AuxCheq_ctx nolock
    	let lib:err_retval = cdsretval
	Loop
	cds endselect dsc:AuxCheq_ctx
    clearfield common:csr_string
    CALL csr:f_sadopl dsc:pases common:csr_string
    lib:err_retval = retval
    CALL csr:f_sadroppl dsc:pases
END SUB

/*******/
