/****o* Pendientes de agrupación/OFB:tes:CDSSave_cfranq_mov
* NOMBRE
*   OFB:tes:CDSSave_cfranq_mov
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSSave_cfranq_mov
	LOCAL hubo_asignacion like siaf:i
	LOCAL loc_jnl_rtn   LIKE drv:INDjnl_rtn
	LOCAL loc_tran_name LIKE tlr:jnl_tran_name
	LOCAL loc_mnemonic  LIKE tlr:tran_mnemonic
	LOCAL loc_nom_tran  LIKE siaf:nombre_transac
	LOCAL mone          LIKE siaf:cant
	LOCAL loc_scr       LIKE drv:INDscr
	local loc_cur_tran  LIKE drv:INDcur_tran

	loc_jnl_rtn   = drv:INDjnl_rtn
	loc_tran_name = tlr:jnl_tran_name
	loc_mnemonic  = tlr:tran_mnemonic
	loc_nom_tran  = siaf:nombre_transac
	loc_scr       = drv:INDscr 
	loc_cur_tran  = drv:INDcur_tran   

	hubo_asignacion = 0
	siaf:codigo_siaf = 6850
   
	call siaf:PRESfecha_hora

    
	/* Busco en la tabla control_franq si ese operador tiene un Fallo pendiente
	de Recepcion */
	//cgw: se selecciona solamente las asignaciones sin marca de lockeo
	/*Agrego sort para forzar que ordene por la clave primaria - Gabriel Falciola*/
	CDS SELECT FROM DSC:post:control_franq_tbl BECOMES DSC:post:control_franq_ctx WHERE  \
	post:franq_operador == FLD:op:op_operator_id && \
	post:franq_marca_fallo == "A" && \
	post:franq_lock == "" sort "primary"
	    
	cds findfirst dsc:post:control_franq_ctx lock
	let lib:err_retval = cdsretval
	do
		if (lib:err_retval < 0)
			break
		end if
		
		hubo_asignacion = 1

		
		cds extract dsc:post:control_franq_ctx all
        
		post:importe_origen = post:franq_cont_fin - post:franq_cont_inic
		siaf:importe = post:importe_origen
        
	        let siaf:moneda = 00
		let post:medio_pago_desc = "EFECTIVO PESOS"
	        let tes:es_tesoro = "S"
	        let siaf:continua_transaccion = "S"
		
		let drv:INDscr = SCR:siaf:SCRN6850
		let drv:INDcur_tran = LST:siaf:TRAN6850
		let siaf:tiene_reverso = "S"

		/* Busco el motivo para la Recepcion de Ajuste de Fallo */	    
		call MISCllena_scr_fallo

		// Lo vuelvo a asignar porque el PB de la popup lo borra
		post:importe_origen = post:franq_cont_fin - post:franq_cont_inic
		siaf:importe = post:importe_origen
	    
		drv:INDjnl_rtn = ofb:siaf:JNLrecep_aj_franqueo
		if (drv:dt_app != 4)
			drv:INDspc_rtn[0] = LST:siaf:TOTS6850
			tlr:INDtots_append = LST:siaf:TOTS6850
		end if

		CDS CLEARBUFFER DSC:post:control_franq_ctx
		post:franq_marca_fallo = "R" //marca recepcion de ajuste
		post:franq_fecha_recep = common:system_date // Fecha de Recepcion de Ajuste
		
		CDS APPEND DSC:post:control_franq_ctx post:franq_marca_fallo \
			post:franq_fecha_recep
		CDS UPDATE DSC:post:control_franq_ctx LOCK
		CDS UNLOCK DSC:post:control_franq_ctx

		UNGETKEY 0x191
		call tlr:JNLtran
		
		cds findnext dsc:post:control_franq_ctx lock
		let lib:err_retval = cdsretval
	loop
	cds endselect dsc:post:control_franq_ctx
	
	// Hay que actualizar la tabla de rendiciones
	// Limpiar la marca de existencia de Fallo en la rend_caj
	call post:CDSLimpioFalloRend
	
	drv:INDjnl_rtn      = loc_jnl_rtn
	tlr:jnl_tran_name   = loc_tran_name
	tlr:tran_mnemonic   = loc_mnemonic
	siaf:nombre_transac = loc_nom_tran
	drv:INDscr          = loc_scr
	drv:INDcur_tran     = loc_cur_tran   

END SUB

/*******/
