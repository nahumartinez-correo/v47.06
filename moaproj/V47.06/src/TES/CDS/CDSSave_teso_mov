/****o* Pendientes de agrupación/OFB:tes:CDSSave_teso_mov
* NOMBRE
*   OFB:tes:CDSSave_teso_mov
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSSave_teso_mov
	LOCAL loc_jnl_rtn   LIKE drv:INDjnl_rtn
    LOCAL loc_tran_name LIKE tlr:jnl_tran_name
    LOCAL loc_mnemonic  LIKE tlr:tran_mnemonic
    LOCAL loc_nom_tran  LIKE siaf:nombre_transac
    LOCAL mone          LIKE siaf:cant
    LOCAL loc_scr       LIKE drv:INDscr

    loc_jnl_rtn   = drv:INDjnl_rtn
    loc_tran_name = tlr:jnl_tran_name
    loc_mnemonic  = tlr:tran_mnemonic
    loc_nom_tran  = siaf:nombre_transac
    loc_scr       = drv:INDscr    

 
    if (drv:dt_app == 4)
        siaf:codigo_siaf = 8830
    else
        siaf:codigo_siaf = 8820
    end if
   
    call siaf:PRESfecha_hora

    
    if (drv:dt_app == 4)
     	/* Reingreso también los pases pendientes supervisados que recibió el tesorero, 
     	porque supuestamente ya estuvo aceptado */
    	CDS select from dsc:teso_mov_table becomes dsc:teso_mov_context where \
    	tes:tmov_suc_id == common:sucursal_activa && \
    	tes:tmov_fecha != common:system_date && \
		tes:tmov_pase_tesoro == "S" && \
    	((tes:tmov_op_id_orig == op:op_operator_id  && \
    	(tes:tmov_marca_ing == "" || tes:tmov_marca_ing == "E")) || \
    	((tes:tmov_login_dest == op:op_login_id && tes:tmov_marca_ing == "S")))
    	
    else
        if (op:op_tesoro == "S")
    	    // Si soy tesorero, reingreso todos los pases hechos desde el tesoro
        	CDS select from dsc:teso_mov_table becomes dsc:teso_mov_context where \
        	tes:tmov_suc_id == common:sucursal_activa && \
        	tes:tmov_fecha != common:system_date && \
        	tes:tmov_pase_tesoro == "N" && \
        	((tes:tmov_op_id_orig == op:op_operator_id  && \
        	(tes:tmov_marca_ing == "" || tes:tmov_marca_ing == "E")) || \
        	(tes:tmov_login_dest == op:op_login_id && tes:tmov_marca_ing == "S"))
        else
    	    // Si no soy tesorero, reingreso todos los pases hechos o no desde caja
        	CDS select from dsc:teso_mov_table becomes dsc:teso_mov_context where \
        	tes:tmov_suc_id == common:sucursal_activa && \
        	tes:tmov_fecha != common:system_date && \
        	((tes:tmov_op_id_orig == op:op_operator_id  && \
        	(tes:tmov_marca_ing == "" || tes:tmov_marca_ing == "E")) || \
        	(tes:tmov_login_dest == op:op_login_id && tes:tmov_marca_ing == "S"))        	
        end if
    end if        	
	    
	    
	cds findfirst dsc:teso_mov_context lock
	let lib:err_retval = cdsretval
	do
		if (lib:err_retval < 0)
			break
		end if
		cds extract dsc:teso_mov_context all
        
        post:importe_origen = tmov_total        
        
        let post:adt_mp_cod = tes:tmov_moneda
        let siaf:moneda = tes:tmov_moneda
        let tes:es_tesoro = "S"
        let siaf:continua_transaccion = "S"
        call post:CDSadt_MedPago_load
        let post:medio_pago_desc = post:adt_mp_desc
        call post:MISCconvierto_coti(post:importe_origen)
		
	    let drv:INDscr = SCR:tes:SCRNentrada_jnl
	    let siaf:tiene_reverso = "N"
	    
	    let tes:den_moneda = siaf:moneda
	    call CDSden_mon_load
	    call MISCllena_scr
	    
	    drv:INDjnl_rtn = ofb:JNLentrada
        if (drv:dt_app != 4)
            drv:INDspc_rtn[0] = LST:siaf:TOTS8820
            tlr:INDtots_append = LST:siaf:TOTS8820
        end if

		UNGETKEY 0x191
		call tlr:JNLtran
		
		/*
		cds findagain dsc:teso_mov_context lock
		tes:tmov_marca_ing = "I"
		cds append dsc:teso_mov_context tes:tmov_marca_ing
		cds update dsc:teso_mov_context lock
		*/
		cds findnext dsc:teso_mov_context lock
		let lib:err_retval = cdsretval
	loop
	cds endselect dsc:teso_mov_context
	drv:INDjnl_rtn      = loc_jnl_rtn
    tlr:jnl_tran_name   = loc_tran_name
    tlr:tran_mnemonic   = loc_mnemonic
    siaf:nombre_transac = loc_nom_tran
    drv:INDscr          = loc_scr

END SUB

/*******/
