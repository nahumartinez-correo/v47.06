/****o* Pendientes de agrupación/OFB:tes:CDSgrabo_inicial_cta
* NOMBRE
*   OFB:tes:CDSgrabo_inicial_cta
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSgrabo_inicial_cta(bco,tipo,nro)
	local inicial like mov_importe

	mov_br_id = common:sucursal_activa
	mov_banco = bco
	mov_tipo_cuenta = tipo
	mov_nro_cuenta = nro

	CDS select from dsc:MovimCta_tbl becomes dsc:MovimCta_ctx where \
	tes:mov_br_id       == mov_br_id           && \
	tes:mov_banco       == mov_banco           && \
	tes:mov_tipo_cuenta == tes:mov_tipo_cuenta && \
	tes:mov_nro_cuenta  == mov_nro_cuenta      && \
	tes:mov_codigo_siaf == 6000

	cds findlast dsc:MovimCta_ctx nolock
	if (cdsretval == 0)
	   cds extract dsc:MovimCta_ctx all
	   let inicial = mov_importe

	   /*Tomo los movimientos no reversados para reconstruir el saldo */
       CDS select from dsc:MovimCta_tbl becomes dsc:MovimCta_ctx where \
	   tes:mov_br_id       == mov_br_id           && \
	   tes:mov_banco       == mov_banco           && \
	   tes:mov_tipo_cuenta == tes:mov_tipo_cuenta && \
	   tes:mov_nro_cuenta  == tes:mov_nro_cuenta  && \
	   tes:mov_bus_date    == tes:mov_bus_date    && \
	   tes:mov_codigo_siaf != 6000                && \
	   tes:mov_marca_rev   != "R"

	   cds findfirst dsc:MovimCta_ctx nolock

	   let lib:err_retval = cdsretval
	   DO
	      IF (lib:err_retval < 0)
	  	      break
	      end if
	      cds extract dsc:MovimCta_ctx all
	      select (mov_tipo_mov)
		        case CREDITO
			        inicial = mov_importe +	inicial
			        break
		        case DEBITO
			        inicial = inicial - mov_importe
			        break
	      end select
	      cds findnext dsc:MovimCta_ctx nolock
	      let lib:err_retval = cdsretval
       loop
    else
       mov_bus_date = common:system_date
       inicial = 0
    end if	
	cds endselect dsc:MovimCta_ctx
    
    call CDScheques_por_acred(mov_banco,mov_tipo_cuenta,mov_nro_cuenta)
	do
       if (mov_bus_date > common:system_date)
           break
       end if
       call CDSinicial_cta(inicial,sdo_cta_cheq)
	   call csr:date_add(mov_bus_date,1,"d",mov_bus_date)
	loop
	let sdo_cta_efvo = inicial
	//call CDScheques_por_acred(mov_banco,mov_tipo_cuenta,mov_nro_cuenta)
	call CDSupdate_saldo(mov_banco,mov_tipo_cuenta,mov_nro_cuenta,"I")
END SUB

/*******/
