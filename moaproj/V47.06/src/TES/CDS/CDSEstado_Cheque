/****o* Pendientes de agrupación/OFB:tes:CDSEstado_Cheque
* NOMBRE
*   OFB:tes:CDSEstado_Cheque
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSEstado_Cheque(estado)
	local estado_aux like tes:teso_cheq_estado
	
    let siaf:codigo_aux = siaf:codigo_siaf + 6
    estado_aux = estado
    
	//Busco en el Journal los pases correspondientes a la cabecera que se quiere reversar
	CDS SELECT from dsc:tes:jnl2_table becomes dsc:tes:Journal_anul_Ctx WHERE \
	tlr:jnl_branch      == common:sucursal_activa && \
    siaf:codigo_siaf    == siaf:codigo_aux        && \
    tlr:jnl_bus_date    == common:system_date     && \
    tlr:jnl_operator    == op:op_operator_id      && \
	tlr:jnl_sequence_corr == ""                   && \
	tlr:jnl_time == 	tlr:jnl_time 			  && \
    siaf:tiene_reverso == "S"                     && \
    tlr:jnl_status != 100
    
	cds findfirst dsc:tes:Journal_anul_Ctx nolock
    let lib:err_retval = cdsretval
    DO
       	if (lib:err_retval < 0) then
        	break
       	end if
    	cds extract dsc:tes:Journal_anul_Ctx siaf:cod_banco   \
		siaf:cheqcuenta  \
		siaf:nro_cheque \
		siaf:moneda
		//Por cada uno obtengo los datos de la CheqMov y busco el estado en la TesoCheq
		
    	cds select from dsc:TesoCheq_tbl becomes dsc:TesoCheq_ctx where \
       	teso_cheq_suc    == fld:op:op_branch_id   && \
       	teso_cheq_moneda == fld:siaf:moneda       && \
       	teso_cheq_banco  == fld:siaf:cod_banco    && \
       	teso_cheq_cuenta == fld:siaf:cheqcuenta   && \
       	teso_cheq_nro    == fld:siaf:nro_cheque   && \
       	teso_cheq_estado == estado_aux
 	   	CDS FINDFIRST DSC:tes:TesoCheq_ctx nolock
	   	if (cdsretval < 0) then
	    	cds endselect dsc:TesoCheq_ctx
	    	cds endselect dsc:tes:Journal_anul_Ctx
	      	return (-1)
	   	end if
	   	cds endselect dsc:TesoCheq_ctx
	   	cds findnext dsc:tes:Journal_anul_Ctx nolock
	   	let lib:err_retval = cdsretval
	LOOP
	cds endselect dsc:TesoCheq_ctx
	cds endselect dsc:tes:Journal_anul_Ctx
END SUB

/*******/
