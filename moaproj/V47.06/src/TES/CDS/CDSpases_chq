/****o* Pendientes de agrupación/OFB:tes:CDSpases_chq
* NOMBRE
*   OFB:tes:CDSpases_chq
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSpases_chq
local lcuenta_codint like siaf:cheqcuenta

    cds select from dsc:AuxCheq_tbl becomes dsc:AuxCheq_ctx \
    where adt_cheqaux_suc == fld:adt_cheqaux_suc && \
          adt_cheqaux_op == fld:adt_cheqaux_op && \
          adt_cheqaux_cuenta == fld:adt_cheqaux_cuenta && \
          login_dest == fld:login_dest
	cds findfirst DSC:AuxCheq_ctx nolock
    let lib:err_retval = cdsretval
	/*Creo el picklist que voy a mostrar*/
    CALL csr:f_sadroppl dsc:pases
    CALL csr:f_sanewpl dsc:pases pic:pic_pase_chq
	Do
	    if (lib:err_retval != 0) then
			break
	    end if
	    cds extract dsc:AuxCheq_ctx all
		//Si esta aca es porque algun aceptado tiene que tener...
		//Pongo el titulo del MP y despues cada pase aceptado.
		post:adt_mp_cod = adt_cheqaux_moneda
        call post:CDSadt_MedPago_load
		common:csr_string = " "
		CALL csr:f_saaddpl dsc:pases_chq common:csr_string		
	    let cont1 = 0
	    Do
	    	if (cont1 > 9)
	    		break
	    	end if
	    	if (acepta_val[cont1] == "S")
				if (post:adt_mp_admban == "S") then /* Administración Bancaria */
					lcuenta_codint = cheqcuenta[cont1]
            	else
            		lcuenta_codint = codigo_interno[cont1]
        		end if				
				fprint common:csr_string,"%-2.2s %-30.30s %-3.3s   %-20.20s %-20.20s %-12.12e",adt_cheqaux_moneda,post:adt_mp_desc,cod_banco[cont1],lcuenta_codint,nro_cupcheq[cont1],val_importes[cont1]
				CALL csr:f_saaddpl dsc:pases common:csr_string	    		
	    	end if
	    	cont1 = cont1 + 1
		Loop
		cds findnext DSC:AuxCheq_ctx nolock
    	let lib:err_retval = cdsretval
	Loop
	cds endselect dsc:AuxCheq_ctx
	common:csr_string = " "
	CALL csr:f_saaddpl dsc:pases common:csr_string
    clearfield common:csr_string
    CALL csr:f_sadopl dsc:pases common:csr_string
    lib:err_retval = retval
    CALL csr:f_sadroppl dsc:pases
END SUB

/*******/
