/****o* Pendientes de agrupación/OFB:tes:CDSespv_mov_pase
* NOMBRE
*   OFB:tes:CDSespv_mov_pase
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSespv_mov_pase
local i like cont1
local sequence like chmov_sequence_pase
local op_orig like tes:adt_espv_op_orig

    // Muestro los que quedaron incompletos
    cds select from TesEspVMov becomes TesEspVMov2 where \
    adt_espv_fecha  == common:system_date && \
    adt_espv_suc    == op:op_branch_id    && \
    adt_espv_dest   == op:op_login_id     && \
   (adt_espv_subcod == TOTAL_TESO  || adt_espv_subcod == "**FORZADO**") && \
    adt_espv_comp   == " "

    cds findfirst TesEspVMov2 nolock
    let lib:err_retval = cdsretval
    if (lib:err_retval == -801) /*No hay registros*/
       FYIMSG CLEAR
       ERRMSG LST:common:errmsg_list,tes:ERRno_mov
       cds endselect TesEspVMov2    /*dsc operador*/
       return (-2)
    end if
    if (lib:err_retval == -803) /*Registro lockeado*/
       FYIMSG CLEAR
       ERRMSG LST:common:errmsg_list,ovr:ERRrec_locked
       cds endselect TesEspVMov2
       return (-2)
    end if
	
	/*Creo un picklist auxiliar, para ordenarlo*/
	CALL csr:f_sadroppl dsc:analitico
	CALL csr:f_sanewpl dsc:analitico pic:analitico
	DO
		CDS EXTRACT TesEspVMov2 ALL
		; PS9431 COMPRUEBO QUE EL PASE ESTE EN SU TOTALIDAD CASO CONTRARIO
		; NO LO MUESTRO *** MDG
		CALL tes:CDSvalPaseCompEspVs
		IF (RETVAL == 0) THEN
			post:SiNo = "N"
			if (adt_espv_marca_ing == "E")
			   post:SiNo = "S"
			end if
			FPRINT common:csr_string,"%-4s%-6s%-5s%-14s%-10s%-2s",\
			adt_espv_seq_pase,adt_espv_hora,adt_espv_op_orig,adt_espv_orig,adt_desc_status,FLD:post:SiNo
    		CALL csr:f_saaddpl dsc:analitico common:csr_string
        END IF
		CDS FINDNEXT TesEspVMov2 NOLOCK
		lib:err_retval = CDSRETVAL
		IF (lib:err_retval != 0)
			BREAK
		END IF
	LOOP
    cds endselect TesEspVMov2
   	 	
    /*Ordeno el picklist, seun sequence de pase (chmov_sequence_pase)*/
    CALL csr:PickOp 4 dsc:analitico "0,4" "10,5"
	
	/*Creo el picklist que voy a mostrar*/
    sequence = ""
    op_orig = ""
    CALL csr:f_sadroppl dsc:pases
    CALL csr:f_sanewpl dsc:pases pic:pic_pases_ent

	/*Recorro el picklist ordenado y cargo el otro*/
	let idx = 0
	let i_idx = PL_GETITEM + idx
	call csr:myPickcontrol dsc:analitico common:csr_string i_idx            
	Do
		if (retval < 0)
	    	break
	    end if
		
		IF ((sequence != substr(common:csr_string,0,4)) || (sequence == substr(common:csr_string,0,4) && op_orig != substr(common:csr_string,10,5)))
			//"SECUENCIA   HORA       NRO OP   LOGIN            ESTADO     REENVIADO"
			FPRINT siaf:nota_1,"%-4s       %-6s   %-5s   %-14s   %-10s    %-2s",\
			substr(common:csr_string,0,4),substr(common:csr_string,4,6),substr(common:csr_string,10,5),substr(common:csr_string,15,14),substr(common:csr_string,29,10),substr(common:csr_string,39,2)
	    	CALL csr:f_saaddpl dsc:pases siaf:nota_1
    	END IF
		
	
		sequence = substr(common:csr_string,0,4)
		op_orig = substr (common:csr_string,10,5)
		
		let idx = idx + 1
	    let i_idx = PL_GETITEM + idx
	    call csr:myPickcontrol dsc:analitico common:csr_string i_idx            
	Loop
	CALL csr:f_sadroppl dsc:analitico
	
	clearfield common:csr_string
    CALL csr:f_sadopl dsc:pases common:csr_string
    lib:err_retval = retval
    CALL csr:f_sadroppl dsc:pases
    if (lib:err_retval < 0)   ///No selecciono nada
       clearfield adt_espv_orig
       clearfield adt_espv_orig
       refresh adt_espv_orig
       clearfield adt_espv_seq_pase
       FYIMSG CLEAR
       ERRMSG LST:common:errmsg_list,tes:ERRno_op_select
       return (-2)
    end if
	adt_espv_op_orig = substr(common:csr_string,20,5)
	adt_espv_orig = substr(common:csr_string,28,14)
	adt_espv_seq_pase = substr(common:csr_string,0,4)
	call csr:trimfield(adt_espv_orig)

END SUB

/*******/
