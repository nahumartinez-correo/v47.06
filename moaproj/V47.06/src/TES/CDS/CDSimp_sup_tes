/****o* Pendientes de agrupación/OFB:tes:CDSimp_sup_tes
* NOMBRE
*   OFB:tes:CDSimp_sup_tes
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

/* Verifica que el importe ingresado en la rendicion (siaf:importe) no
   supere el importe de la tabla tesoro. Transacciones: salida de tesoro y
   salida de tesoro externo.*/

SUB tes:CDSimp_sup_tes
    CDS SELECT from DSC:tes:tesoro_table BECOMES DSC:tes:tesoro_context \
        WHERE   tes:tes_moneda == siaf:moneda && \
                tes_suc_id == op:op_branch_id && \
                tes_tes_id == op:op_tesoro_id
    CDS FINDFIRST DSC:tes:tesoro_context NOLOCK
    IF (cdsretval == -801) then
       CDS ENDSELECT DSC:tes:tesoro_context
       return (-2)
    END IF
    CDS EXTRACT DSC:tes:tesoro_context ALL

    /* Si la moneda es del tipo tarjeta verifico con el total del tesoro*/
    /* Si tarjetas funciona bien se podría tratar  a todas igual */

    /***
    cont1 = 0
    tes:imp_aux = 0
    DO
      IF (cont1 < 14) THEN
         tes:imp_aux = tes:imp_aux + tes_importes[cont1]
         cont1 = cont1 + 1
      else
         break
      END IF
    LOOP
    ***/
    ;tes:imp_aux = post:importe_origen
    
    /* Si la moneda es global con codigo interno
    no se depliegan las demoninaciones */
  	
    ;if (post:adt_mp_adm == "G" && post:adt_mp_monet == "N") then
    imp_aux = tes:tes_total
    ;end if
    IF (post:importe_origen > tes:imp_aux)
       CDS ENDSELECT DSC:tes:tesoro_context
       return (-2)
    End if
    CDS ENDSELECT DSC:tes:tesoro_context
END SUB

/*******/
