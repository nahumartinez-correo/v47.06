/****o* Pendientes de agrupación/OFB:tes:CDSverif_impcomp
* NOMBRE
*   OFB:tes:CDSverif_impcomp
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSverif_impcomp(tes,nro)
    local importe_comp like siaf:importe

    let adt_cheqaux_tesoro = tes
    let adt_cheqaux_op = nro
 /* Esta rutina calcula el total de comprobantes cargados en la tabla */
    let importe_comp = 0
    cds select tes:adt_cheqaux_importe from dsc:AuxCheq_tbl becomes dsc:AuxCheq_ctx \
        where  tes:adt_cheqaux_suc == op:op_branch_id && \
               tes:adt_cheqaux_tesoro == adt_cheqaux_tesoro && \
	       tes:adt_cheqaux_op == adt_cheqaux_op && \
	       tes:adt_cheqaux_moneda == siaf:moneda

    cds findfirst dsc:AuxCheq_ctx lock
    let lib:err_retval = cdsretval
    if (lib:err_retval == -801 ) then
	cds unlock dsc:AuxCheq_ctx
	cds endselect dsc:AuxCheq_ctx
	return (-1)
    end if
	
    do
	   if (lib:err_retval < 0) then
	       break
	   end if
	   cds extract dsc:AuxCheq_ctx all
	   let importe_comp = importe_comp + tes:adt_cheqaux_importe
	   cds findnext dsc:AuxCheq_ctx lock
	   let lib:err_retval = cdsretval
    loop
    cds unlock dsc:AuxCheq_ctx
    cds endselect dsc:AuxCheq_ctx
    let siaf:importe = importe_comp
    return (0)
END SUB

/*******/
