/****o* Pendientes de agrupación/OFB:tes:CDSver_rend_cero
* NOMBRE
*   OFB:tes:CDSver_rend_cero
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSver_rend_cero(sucursal,operador)
    LOCAL provincia LIKE admin:adt_br_siaf
    local importe like siaf:importe

    provincia = SUBSTR(sucursal,0,1)
 

    CDS SELECT from DSC:tes:rend_caj_table becomes DSC:tes:rend_caj_context \
    WHERE tes:rend_suc_id == sucursal && \
    tes:rend_op_id == operador
    CDS FINDFIRST DSC:tes:rend_caj_context LOCK
    if (cdsretval < 0)
        return (-1)
    end if
    cds extract dsc:tes:rend_caj_context all
    cds endselect dsc:tes:rend_caj_context

    // Tengo que ver las restricciones, para que declare unicamente
    // los medios de pago que debe.
 
    //post:tipo_rest = TODOS

    //call post:MISCarmo_pick_tes("pic:PICmedios")

    //Call post:MISCrest_teso(sucursal,8510,"pic:PICmedios","N","N",0)
    // Recorro el picklist con los medios de pago habilitados
    /*
    let idx = 0
	let i_idx = PL_GETITEM + 0
    
	call csr:myPickcontrol dsc:post:pic_medios common:csr_string i_idx
    do
        If (retval < 0) THEN
	        break
	    End if
	    post:adt_mp_cod = substr(common:csr_string,0,2)
      
    	If (rend_marca_vec[post:adt_mp_cod] != "X" || rend_importe_vec[post:adt_mp_cod] != 0) THEN
	    	return (-2)
        end if
        let idx = idx + 1
        let i_idx = PL_GETITEM + idx
        call csr:myPickcontrol dsc:post:pic_medios common:csr_string i_idx
    loop
    */
    
    idx = 0
    do
        if (idx > IDX_MONEDA)
            break
        end if
        // Si el medio de pago fue declarado, si o si debe ser en cero.
        if (rend_marca_vec[idx] == "X" && rend_importe_vec[idx] != 0)
            return (-2)
        end if    
        let idx = idx + 1
    loop
    return (0)
END SUB

/*******/
