/****o* Pendientes de agrupación/OFB:tes:CDSSave_espv_mov
* NOMBRE
*   OFB:tes:CDSSave_espv_mov
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSSave_espv_mov
	LOCAL loc_jnl_rtn   LIKE drv:INDjnl_rtn
    LOCAL loc_tran_name LIKE tlr:jnl_tran_name
    LOCAL loc_mnemonic  LIKE tlr:tran_mnemonic
    LOCAL loc_nom_tran  LIKE siaf:nombre_transac
    LOCAL mone          LIKE siaf:cant
    LOCAL loc_scr       LIKE drv:INDscr

    loc_jnl_rtn   = drv:INDjnl_rtn
    loc_tran_name = tlr:jnl_tran_name
    loc_mnemonic  = tlr:tran_mnemonic
    loc_nom_tran  = siaf:nombre_transac
    loc_scr       = drv:INDscr    

 
    if (drv:dt_app == 4)
        siaf:codigo_siaf = 8876
    else
        siaf:codigo_siaf = 8866
    end if
   
    call siaf:PRESfecha_hora

    
    if (drv:dt_app == 4)
    	CDS select from dsc:TesEspVMov_tbl becomes dsc:TesEspVMov_ctx where \
    	tes:adt_espv_suc == common:sucursal_activa && \
    	tes:adt_espv_fecha != common:system_date && \
    	tes:adt_espv_op_orig == op:op_operator_id  && \
    	(tes:adt_espv_marca_ing == "" || tes:adt_espv_marca_ing == "E") && \
    	(tes:adt_espv_pase_tesoro == "S")
    	
    else
        if (op:op_tesoro == "S")
    	    // Si soy tesorero, reingreso todos los pases hechos desde el tesoro
        	CDS select from dsc:TesEspVMov_tbl becomes dsc:TesEspVMov_ctx where \
        	tes:adt_espv_suc == common:sucursal_activa && \
        	tes:adt_espv_fecha != common:system_date && \
        	tes:adt_espv_op_orig == op:op_operator_id  && \
        	(tes:adt_espv_marca_ing == "" || tes:adt_espv_marca_ing == "E") && \
        	(tes:adt_espv_pase_tesoro == "N")
        else
    	    // Si no soy tesorero, reingreso todos los pases hechos o no desde caja
        	CDS select from dsc:TesEspVMov_tbl becomes dsc:TesEspVMov_ctx where \
        	tes:adt_espv_suc == common:sucursal_activa && \
        	tes:adt_espv_fecha != common:system_date && \
        	tes:adt_espv_op_orig == op:op_operator_id  && \
        	(tes:adt_espv_marca_ing == "" || tes:adt_espv_marca_ing == "E")
        end if
    end if        	
	    
	    
	cds findfirst dsc:TesEspVMov_ctx nolock
	let lib:err_retval = cdsretval
	do
		if (lib:err_retval < 0)
			break
		end if
		cds extract dsc:TesEspVMov_ctx all
        
        tes:espv_cod = tes:adt_espv_cod
        tes:espv_subcod = tes:adt_espv_subcod
        siaf:cantidad = tes:adt_espv_cantidad
        clearfield siaf:moneda
        siaf:importe = tes:adt_espv_importe
        let siaf:continua_transaccion = "S"
		
	    let drv:INDscr = SCR:tes:SCRNentrada_ev
	    let siaf:tiene_reverso = "N"
	    let tes:es_tesoro = "S"
	    drv:INDjnl_rtn = ofb:JNLentrada_ev
        if (tes:adt_espv_subcod != "** TOTAL **")
		    UNGETKEY 0x191
		    call tlr:JNLtran
		else
		    cds findagain dsc:TesEspVMov_ctx lock
		    let tes:adt_espv_marca_ing = "I"
		    cds append dsc:TesEspVMov_ctx tes:adt_espv_marca_ing
		    cds update dsc:TesEspVMov_ctx lock
		    cds unlock dsc:TesEspVMov_ctx
		end if    
		
		cds findnext dsc:TesEspVMov_ctx nolock
		let lib:err_retval = cdsretval
	loop
	cds endselect dsc:TesEspVMov_ctx
	drv:INDjnl_rtn      = loc_jnl_rtn
    tlr:jnl_tran_name   = loc_tran_name
    tlr:tran_mnemonic   = loc_mnemonic
    siaf:nombre_transac = loc_nom_tran
    drv:INDscr          = loc_scr

END SUB

/*******/
