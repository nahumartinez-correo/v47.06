/****o* Pendientes de agrupación/OFB:tes:CDSupd_saldo_inic
* NOMBRE
*   OFB:tes:CDSupd_saldo_inic
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSupd_saldo_inic(bco,tipo_cta,nro_cta,fvalor,imp,tipo_mov)
    local mov_imp like tes:mov_importe
    local mov_inic like tes:mov_importe
    mov_br_id = common:sucursal_activa
    mov_banco = bco
    mov_tipo_cuenta = tipo_cta
    mov_nro_cuenta = nro_cta
    mov_bus_date = fvalor

    /*selecciono todos los movimientos iniciales
    desde la fecha valor */
    cds select from dsc:MovimCta_tbl becomes dsc:MovimCta_ctx where \
    mov_br_id == mov_br_id && \
    mov_banco == mov_banco && \
    mov_tipo_cuenta == mov_tipo_cuenta && \
    mov_nro_cuenta == mov_nro_cuenta && \
    mov_bus_date > mov_bus_date && \
    mov_codigo_siaf == 6000

    cds findfirst dsc:MovimCta_ctx lock
    let lib:err_retval = cdsretval
    do
    	if (lib:err_retval < 0)
    		break
    	end if
	cds extract dsc:MovimCta_ctx mov_importe into mov_imp
	select (tipo_mov)
		case CREDITO
			mov_inic = mov_imp + imp
			break
		case DEBITO
			mov_inic = mov_imp - imp
			break
	end select
	cds findagain dsc:MovimCta_ctx	lock
  	cds clearbuffer dsc:MovimCta_ctx
        cds append dsc:MovimCta_ctx mov_inic as mov_importe
        cds update dsc:MovimCta_ctx lock
    	cds findnext dsc:MovimCta_ctx lock
    	let lib:err_retval = cdsretval
    loop
    cds unlock dsc:MovimCta_ctx
    cds endselect dsc:MovimCta_ctx
END SUB

/*******/
