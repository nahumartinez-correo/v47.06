/****o* Pendientes de agrupación/OFB:tes:CDSauxesp_del_vta
* NOMBRE
*   OFB:tes:CDSauxesp_del_vta
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDSauxesp_del_vta(cant,imp)
    CDS SELECT FROM DSC:AuxEspV_tbl BECOMES DSC:AuxEspV_ctx \
        WHERE adt_evaux_suc == FLD:adt_evaux_suc && \
              adt_evaux_op == FLD:adt_evaux_op && \
              adt_evaux_tesoro == fld:adt_evaux_tesoro && \
              adt_evaux_codigo == fld:adt_evaux_codigo && \
              adt_evaux_subcod == fld:adt_evaux_subcod && \
              adt_evaux_es_venta == "S"

    CDS FINDFIRST DSC:AuxEspV_ctx LOCK
    LET lib:err_retval = CDSRETVAL
    CALL lib:MISCcds_find_err
    IF (RETVAL != 0) THEN
	RETURN (-1)
    END IF
    CDS EXTRACT DSC:AuxEspV_ctx adt_evaux_cantidad into cant adt_evaux_importe into imp \
    post:ImpServUP post:AliServUP adt_espv_formfiscal
	post:PreDForFis = adt_espv_formfiscal

	if (post:PreDForFis.numchars == 0)
		post:EstadoFormu = SIN_FORM
	else
		post:EstadoFormu = CON_FORM
	end if
   	/*Actualizo importes para Ventas UP - Gabriel Falciola*/
	call post:CDSAcumImpUP(post:ImpServUP,0,siaf:adt_tran_fliatran,post:AliServUP,siaf:adt_tran_afec_efvo,post:PresNro)

    CDS DELETE DSC:AuxEspV_ctx
    CDS UNLOCK DSC:AuxEspV_ctx

    call post:CDSdel_bonifAsociada(post:PreDNroTrn, adt_evaux_codigo, adt_evaux_subcod)

    RETURN (0)
END SUB

/*******/
