/****o* Pendientes de agrupación/OFB:tes:CDStipo_sel
* NOMBRE
*   OFB:tes:CDStipo_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesCDS.h"

SUB tes:CDStipo_sel
    local adt_tipo_cod_tmp   like tes:adt_tipo_cod
    local adt_tipo_tipo_tmp  like tes:adt_tipo_tipo
    local adt_tipo_mone_tmp  like tes:adt_tipo_mone
    local adt_tipo_lugar_tmp like tes:adt_tipo_lugar
    local adt_tipo_saldo_tmp like tes:adt_tipo_saldo
    local adt_tipo_desc_tmp like tes:adt_tipo_desc
    local adt_tipo_medio_tmp like tes:adt_tipo_medio               
offset_0000:
    move adt_tipo_cod      to adt_tipo_cod_tmp
    move adt_tcta_cod      to adt_tipo_tipo_tmp
    move adt_tipo_mone     to adt_tipo_mone_tmp
    move adt_tipo_lugar    to adt_tipo_lugar_tmp
    move adt_tipo_saldo    to adt_tipo_saldo_tmp
    move adt_tipo_desc     to adt_tipo_desc_tmp
    move adt_tipo_medio    to adt_tipo_medio_tmp
    cds select from dsc:adt_tipo_tbl becomes dsc:adt_tipo_ctx
    cds multidisplay DSC:adt_tipo_ctx LISTtipo
    if (cdsretval == 0x01fd) then
        goto offset_0000
    end if
    let lib:err_retval = cdsretval
    if (lib:err_retval == 0) then
        move adt_tipo_cod_tmp        to adt_tipo_cod
        move adt_tipo_tipo_tmp       to adt_tipo_tipo
        move adt_tipo_mone_tmp       to adt_tipo_mone
        move adt_tipo_lugar_tmp      to adt_tipo_lugar
        move adt_tipo_saldo_tmp      to adt_tipo_saldo
        move adt_tipo_desc_tmp       to adt_tipo_desc
        move adt_tipo_medio_tmp      to adt_tipo_medio
        call CDSadt_tipo_load
        return (-2)
    end if
    let lib:err_retval = cdsretval
    call lib:MISCcds_find_err
    if (retval != 0) then
        return (-1)
    end if
    cds extract dsc:adt_tipo_ctx all
    cds unlock dsc:adt_tipo_ctx
    call csr:proc_list(F_COPY,lst:tes:LISTtipo_flds,lst:tes:LISTbck_tipo)

END SUB

/*******/
