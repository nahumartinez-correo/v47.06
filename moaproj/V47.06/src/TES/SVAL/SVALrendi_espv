/****o* Pendientes de agrupación/OFB:tes:SVALrendi_espv
* NOMBRE
*   OFB:tes:SVALrendi_espv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesSVAL.h"

SUB tes:SVALrendi_espv
    local superviso   like tes:rend_marca_cierre 
    local codesp_ant like tes:adt_evaux_codigo
    
    if (!testflag(tlr:tran_flags,correction)) then
    	cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx \
    	    where adt_evaux_suc    == op:op_branch_id && \
                  adt_evaux_op     == op:op_operator_id && \
                  adt_evaux_tesoro == "N" 
                  ;adt_evaux_codigo == adt_espv_cod
        cds findfirst DSC:AuxEspV_ctx NOLOCK
        let lib:err_retval = CDSRETVAL
        if (lib:err_retval < 0) then
            let common:csr_string = "No existen Subespecies cargadas"            
            errmsg common:errmsg_list,FLD:common:csr_string
            cds endselect DSC:AuxEspV_ctx
            return (-2)
        end if
        cds endselect DSC:AuxEspV_ctx
    end if  
        
    if (!testflag(tlr:tran_flags,correction)) then
		call CDStotales_espv /* controla contra la TesEspV si coincide con totales o no */
		if (retval < 0) then
			/*
			drv:button = 0 
			call drv:but_up_enable
			*/
			nextfield adt_evaux_subcod
			return (-2)
		end if         
		call siaf:SVALnivel_sup
		if (retval < 0) then
			return (-2)
		end if 
         
		// Guardo si fue supervisada para marcar las otras
		if (testflag(tlr:tran_flags,supovr_granted)) then
			let superviso = "S"
		else
			let superviso = "N"
		endif    
		/* Se llama a este OFB que guarda la graba la marca de rendicion
		y el importe rendido */
		/*
		IF (adt_espv_rend == "D")
		  call CDSactuali_rend_espv("D")
		else
		  call CDSactuali_rend_espv("X") 
		end if  
		CALL CDSact_rend_sup       
		*/
		/*
		let adt_evaux_importe  = 0
		let adt_evaux_cantidad = 0
		let espv_subcod        = TOTAL_TESO
		
		FLD:drv:INDjnl_rtn = OFB:tes:JNLajuste_recaud_ev
		ungetkey 0x190
		call siaf:MISClleno_modalidad
		let drv:INDscr = SCR:tes:SCRNmov_ev
		call tlr:JNLtran
		*/
		;aux_sequence_mov = tlr:jnl_sequence                        
	
		let siaf:codigo_siaf = 8536         
		let siaf:nombre_transac = "RENDICION ESPECIES VALORIZADAS"
		move "TERENEV" to tlr:tran_mnemonic
		
		let drv:INDscr = SCR:tes:SCRNmov_ev
		cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
		adt_evaux_suc    == op:op_branch_id 			  && \
		adt_evaux_op     == op:op_operator_id 			  && \
		adt_evaux_tesoro == "N"
       ;adt_evaux_codigo == adt_espv_cod

		cds findfirst DSC:AuxEspV_ctx LOCK
		let lib:err_retval = CDSRETVAL  
        
		call csr:f_sadroppl dsc:Especie
		call csr:f_sanewpl dsc:Especie pic:Especie
        
		let post:importe = 0 	    
		codesp_ant = ""
		do
			if (lib:err_retval != 0) then
				break
			end if
	         
			cds extract DSC:AuxEspV_ctx ALL
			move tes:adt_evaux_subcod  to adt_espv_subcod
			move tes:adt_evaux_subcod  to espv_subcod
			move tes:adt_evaux_importe to siaf:importe
			move adt_evaux_cantidad    to siaf:cantidad
			move adt_evaux_codigo to espv_cod
			move tes:adt_evaux_codigo to adt_espv_cod
			let tes:es_tesoro = "S"
		 
		 	
			FLD:drv:INDjnl_rtn = OFB:tes:JNLajuste_recaud_ev
			ungetkey 0x190
			call siaf:MISClleno_modalidad
			;call CDSactuali_rend_espv(espv_cod,espv_subcod,siaf:importe,"X")
			if (retval < 0) then
				return (-2)
			end if
			if (superviso == "S") then
				// si la primera fue supervisada , marco todas
				setflag tlr:tran_flags,supovr_granted
			endif
			call tlr:JNLtran
	
			fprint common:csr_string "%-20s %-20s    %13.13s \n", \
                   adt_evaux_codigo,adt_evaux_subcod,adt_evaux_importe
			call csr:f_saaddpl dsc:Especie common:csr_string
			let post:importe = post:importe + siaf:importe 
		 		 	         
			cds delete dsc:AuxEspV_ctx		 
			cds findnext DSC:AuxEspV_ctx LOCK
			let lib:err_retval = CDSRETVAL
		loop
		/* No hace falta llamarlo 
		call CDSrend_marcas_save */
	
		CLEARFIELD drv:INDjnl_rtn
		let drv:INDspc_rtn[2] = ofb:TRANprint_salida_ev
		call post:MISCactivar_buts
		if (tes:en_cierre == "S") then


			//Solicitud 50088 - Evento 4:
			//Luego de la consulta de Motivos el proximo paso en el cierre de caja
			//es la  rendicion de especies. 

	    	call tes:MISCchk_rend_espv
	    	if (retval < 0) then
	    		tes:en_cierre = "N"
	    		/* Lo fuerzo a que el proximo paso sea la rendición */
	    		call tes:CDSupdate_rend("S",RENDICION_ESPECIES)

    			return (-1)
    		end if


			/* Recibe el estado Actual*/
			INIT 33,0
			call tes:CDSProximo_Estado(RENDICION_ESPECIES)
		end if
	ELSE
		/*
		if (siaf:codigo_siaf == 8530) then
		  Quito las marcas de rendicion 
		  call CDSactuali_rend_espv(" ")
		  call siaf:SVALnivel_sup
		  if (retval < 0) then
		     return (-2)
		  end if 	
		  CALL MISCreverso_sesion
		if (retval < 0) then
		 return (-2)
		end if
		
		//call CDSrend_borra_rend limpia la marca de rendicion (adt_espv_rend) 
		end if	   
		*/
    END IF
    unprotfield espv_cod
    unprotfield siaf:importe
END SUB

/*******/
