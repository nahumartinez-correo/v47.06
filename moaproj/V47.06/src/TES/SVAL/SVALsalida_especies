/****o* Pendientes de agrupación/OFB:tes:SVALsalida_especies
* NOMBRE
*   OFB:tes:SVALsalida_especies
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesSVAL.h"

SUB tes:SVALsalida_especies
    local hora_aux like tes:adt_espv_hora
    local superviso like tes:rend_marca_cierre 
    local tmp_importe like siaf:importe
    local tmp_cantidad like siaf:cantidad
    
    if (testflag(tlr:tran_flags,correction))
	    call tes:CDSTesEspVMov_lock	
     /* Esta lockeado */
        if (retval < 0)
            return (-2)
        end if 
        cds extract TesEspVMov adt_espv_marca_ing adt_espv_es_rechazo
    end if
    
	
	IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
	    
	    if (siaf:importe == 0) then
		errmsg lst:common:errmsg_list,\
			   "No hay ningún Movimiento cargado"
		return (-1)
	    end if
	    
	    popup tes:SCRNconfirma
	    if (siaf:continua_transaccion == "N" || lastkey == RT_ESC) then
		return (-2)
	    end if
	    
	    CALL siaf:SVALnivel_sup_ev
            if (retval < 0)
                return (-2)
            end if
            // Guardo si fue supervisada para marcar las otras
            if (testflag(tlr:tran_flags,supovr_granted)) then
	        let superviso = "S"
            else
	        let superviso = "N"
            endif
	    
    	    let adt_evaux_importe = 0
    	    let adt_evaux_cantidad = 0
    	    let espv_subcod = TOTAL_TESO

         /* Se pidió que el header de los pases grabe el importe total
            y la cantidad correspondiente en cero. 17/05/99 - Andrea */  
            tmp_importe = siaf:importe
            tmp_cantidad = siaf:cantidad
            refresh tmp_importe
            refresh tmp_cantidad
    	    siaf:importe = 0
    	    siaf:cantidad = 0
            refresh siaf:importe
            refresh siaf:cantidad
	    
	        adt_espv_cantidad = tmp_cantidad
            	    
    	    FLD:drv:INDjnl_rtn = OFB:tes:JNLsalida_ev
    	    ungetkey 0x190
    	    call siaf:MISClleno_modalidad
    	    let drv:INDscr = SCR:tes:SCRNmov_ev
    	    call tlr:JNLtran
	    
    	    aux_sequence_mov = tlr:jnl_sequence
	    
    	    siaf:importe = tmp_importe
            siaf:cantidad = tmp_cantidad
            refresh siaf:importe
            refresh siaf:cantidad
    	    call CDSgraba_TesEspVMov(TOTAL_TESO,siaf:importe,siaf:cantidad)
    	    // le sumo 6 al codigo de transacción porque cada uno de los pases
    	    // tiene ese código de transacción
    	    let siaf:codigo_siaf = siaf:codigo_siaf + 6
    	    select (siaf:codigo_siaf)
		    case 8666
			 let siaf:nombre_transac = "SALIDA ESP. A CAJA"
			 move "TESAVC" to tlr:tran_mnemonic
			 break
		    case 8676
			 let siaf:nombre_transac = "SALIDA ESP. A TESORO"
			 move "TESAVT" to tlr:tran_mnemonic
			 break
	    end select
	else
	   // verificar que no fue rechazada, en ese caso no se puede reversar
        call MISCmsg_salida(adt_espv_marca_ing)
        if (retval < 0)
            return (-2)
	    end if
	END IF
	
	IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
	    let drv:INDscr = SCR:tes:SCRNmov_ev
	    if (drv:dt_app == 4) then
		cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx \
		    where tes:adt_evaux_suc == op:op_branch_id && \
			  adt_evaux_op == op:op_tesoro_id && \
			  adt_evaux_tesoro == "S" && \
			  adt_evaux_codigo == adt_espv_cod && \
			  adt_evaux_es_venta == "N"
	    else
		cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx \
		    where tes:adt_evaux_suc == op:op_branch_id && \
			  adt_evaux_op == op:op_operator_id && \
			  adt_evaux_tesoro == "N" && \
			  adt_evaux_codigo == adt_espv_cod && \
			  adt_evaux_es_venta == "N"
	    end if
	    cds findfirst DSC:AuxEspV_ctx LOCK
	    let lib:err_retval = CDSRETVAL  
		    
	    call csr:f_sadroppl dsc:Especie
	    call csr:f_sanewpl dsc:Especie pic:Especie
	    
	    let post:importe = 0 
	    
	    do
		 if (lib:err_retval != 0) then
		     break
		 end if
		 
		 cds extract DSC:AuxEspV_ctx ALL
		 move tes:adt_evaux_codigo to adt_espv_cod
		 move tes:adt_evaux_subcod to adt_espv_subcod
		 move tes:adt_evaux_subcod to espv_subcod
		 move tes:adt_evaux_importe to siaf:importe
		 move adt_evaux_cantidad to siaf:cantidad		
		 let tes:es_tesoro = "S"
		 
		 adt_espv_cantidad = adt_evaux_cantidad
		 
		 FLD:drv:INDjnl_rtn = OFB:tes:JNLsalida_ev
		 ungetkey 0x190
		 call siaf:MISClleno_modalidad
		 
		 if (superviso == "S") then
		     // si la primera fue supervisada , marco todas
	    	     setflag tlr:tran_flags,supovr_granted
	         endif
	         
		 call tlr:JNLtran
		 
		 call CDSgraba_TesEspVMov(espv_subcod,siaf:importe,siaf:cantidad)
		 
		 fprint common:csr_string "%-20s %-20s    %13.13s \n", \
                adt_evaux_codigo,adt_evaux_subcod,adt_evaux_importe
		 call csr:f_saaddpl dsc:Especie common:csr_string
		 let post:importe = post:importe + siaf:importe 
		 
		 cds delete dsc:AuxEspV_ctx
		 cds unlock DSC:AuxEspV_ctx
		 cds findnext DSC:AuxEspV_ctx LOCK
		 let lib:err_retval = CDSRETVAL
	    loop
	    CLEARFIELD drv:INDjnl_rtn
	    call MISCsend_msg_dest(tes:login_dest,\
		"LE HA HECHO UN PASE DE ESPECIES VALORIZADAS")
	    cds endselect DSC:AuxEspV_ctx
	    
	    CLEARFIELD drv:INDjnl_rtn
	    let drv:INDspc_rtn[2] = ofb:TRANprint_salida_ev
	    
	    call post:MISCactivar_buts
	ELSE
	   CALL siaf:SVALnivel_sup_ev
       if (retval < 0)
            return (-2)
       end if       
       if (siaf:codigo_siaf == 8660 || siaf:codigo_siaf == 8670) then
		    CALL MISCreverso_sesion
		    if (retval < 0) then
		        return (-2)
		    end if
	   end if
       cds unlock TesEspVMov
       cds endselect dsc:TesEspVMov
    end if
END SUB

/*******/
