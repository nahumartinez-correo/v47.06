/****o* Pendientes de agrupación/OFB:tes:SVALentrada
* NOMBRE
*   OFB:tes:SVALentrada
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesSVAL.h"

SUB tes:SVALentrada
local superviso like tes:rend_marca_cierre
local ind like tes:cont1
local sec_rech like tmov_sequence_pase
local l_nom_tran like siaf:nombre_transac
local marca_ing like tes:tmov_marca_ing

    if (tes:tmov_login_orig.numchars == 0 || tes:tmov_login_orig == "")
    	let common:csr_string = "FALTA INGRESAR EL OPERADOR ORIGEN"
    	errmsg common:errmsg_list,fld:common:csr_string
    	return (-2)
	end if   	
    
    if (testflag(tlr:tran_flags,correction))
	    call tes:CDSteso_mov_lock	    	
     	/* Esta lockeado */
        if (retval < 0)
            return (-2)
        end if
        cds extract dsc:teso_mov_context tmov_marca_ing into marca_ing tmov_es_rechazo
    end if 

    if (!testflag(tlr:tran_flags,correction))
		popup tes:SCRNconfirma  
		if (siaf:continua_transaccion == "N" || lastkey == RT_ESC) then
	    	return (-2)
		end if
	end if
	/* Copio al array para verificar medios de pago multilpe */
	call tes:MISCvuelco_mp
    call siaf:SVALnivel_sup
    if (retval < 0)
       return (-2)
    end if
	 // Guardo si fue supervisada para marcar las otras
    if (testflag(tlr:tran_flags,supovr_granted)) then
		let superviso = "S"
    else
		let superviso = "N"
    end if
    
    if (!(testflag(tlr:tran_flags,correction))) THEN		
		//Me fijo si alguno no tiene la marca de aceptado.
		cont1 = 0
		DO
			IF (cont1 > 13)
				BREAK
			END IF
			if (mp_texto_ent[cont1].numchars == 0)
				break
			end if
			IF (acepta_ent_mp[cont1] == "N")
				// Si se quiere rechazar
				// verifico que el operador origen del pase no haya cerrado su caja
				call tes:CDSchk_open_caj(tes:tmov_suc_id,tes:tmov_op_id_orig)
				if (retval < 1 && (tes:tmov_codigo_siaf == 8620 || tes:tmov_codigo_siaf == 8630)) then
				 	// la caja esta cerrada o no se pudo leer el registro de rend.
				    let common:csr_string = "(L) IMPOSIBLE RECHAZAR EL PASE. OPERADOR ORIGEN CERRO CAJA"
				    errmsg common:errmsg_list,fld:common:csr_string
				    return (-2)
				end if
			END IF
			cont1 = cont1 + 1
		LOOP

		CDS SELECT FROM DSC:tes:teso_mov_table BECOMES DSC:tes:teso_mov_context \
    	WHERE tmov_suc_id == op:op_branch_id && \
    	tmov_fecha == common:system_date && tmov_login_dest == op:op_login_id && \
    	tmov_op_id_orig == tmov_op_id_orig && tmov_login_orig == tmov_login_orig && \
    	tmov_sequence_pase == tmov_sequence_pase && \
    	(tmov_marca_ing == " "  || tmov_marca_ing == "E" || tmov_marca_ing == "S")
    	CDS FINDFIRST DSC:tes:teso_mov_context LOCK
		lib:err_retval = CDSRETVAL
		
		l_nom_tran = siaf:nombre_transac
		ind = 0
		sec_rech = 0 //Para asignarle una nueva sequence comun para todos los rechazados.
		DO
			IF (lib:err_retval < 0)
				BREAK
			END IF
			CDS EXTRACT DSC:tes:teso_mov_context ALL

			if (tmov_marca_ing != "A") //Pregunto por si en el medio me anularon algun movimiento...
			    tes:es_tesoro = "S"
			    tes:viaja_nro_tesoro = "N"
				siaf:continua_transaccion = "S"
				tes:es_reenvio = "N"	
				siaf:nombre_transac = l_nom_tran
	
				if (drv:dt_app == 4)			
		    	    clearfield tlr:INDtots_append
		    	    clearfield drv:INDspc_rtn[0]
		    	else
		    		tlr:INDtots_append = lst:siaf:TOTS8820
		    		drv:INDspc_rtn[0] = lst:siaf:TOTS8820
				end if	    		
				
				if (tes:tmov_es_rechazo == "S")
					call tes:MISCpongo_sec(tes:tmov_sequence_orig)
	        	end if
	        	
	        	if (acepta_ent_mp[ind] == "N") //pase rechazado
		    	 			    	  
		    	 	if (sec_rech == 0)
		    	 		/*Pregunto si es primero porque aca tenia un problema. Cuando entra a la CDSenv_rech_tesomov
		    	 		que esta mas abajo, graba un registro y si el mismo tiene los mismos valores en los campos que
		    	 		fueron utilizados para el select anterios, me cambia el contexto y no funciona nada. Entonces 
		    	 		le sumo 1 al tmov_sequence_pase para que quede distinto y funcione correctamente.*/
		    	 		if (ind == 0)
		    	 			tmov_sequence_pase = tmov_sequence_orig + 1
		    	 		else
		    	 			tmov_sequence_pase = tmov_sequence_orig
		    	 		end if
		    	 		sec_rech = tmov_sequence_pase
		    	 	else
		    	 		tmov_sequence_pase = sec_rech
		    	 	end if
		    	 		
		    	 	siaf:continua_transaccion = "N"
		    	 	
		    	  	//enviar un mensaje al operador origen
		    	    call MISCsend_msg_dest(tes:tmov_login_orig,"RECHAZO SU PASE DE EFECTIVO")
		    
		    	    call tes:CDSstatus_teso_mov("R")  //marca el pase como rechazado
		    	  
		    	  	//reenviar el pase
		    	   	call tes:CDSenv_rech_tesomov 
		    	    
	    	    	siaf:nombre_transac = l_nom_tran
	    	    	fprint siaf:nombre_transac, "RECH %s ", siaf:nombre_transac
		    
		    	 	/* Para que no totalice */
		    	    clearfield tlr:INDtots_append
		    	    clearfield drv:INDspc_rtn[0]
		    	 	    	 	
		    	    tes:es_reenvio = "S"
	        	end if
	
		        if (tes:tmov_hcomm_status == 1)   /*sin enviar*/
				    resetflag hcomm:state_flags,on_line
		        end if
	
				post:adt_mp_cod = tmov_moneda
		      	call post:CDSadt_MedPago_load
				siaf:moneda = tmov_moneda
				siaf:desc_moneda = post:adt_mp_desc
				post:medio_pago_desc = siaf:desc_moneda
				siaf:importe = tmov_total
				post:importe_origen = siaf:importe
				
		        let drv:INDscr = scr:tes:SCRNentrada_jnl
		        call siaf:MISClleno_modalidad
		    	call post:MISCconvierto_coti(post:importe_origen)
		    	            
	            if (superviso == "S") then
		     		// si la primera fue supervisada , marco todas
		        	setflag tlr:tran_flags,supovr_granted
	    	    end if
	            ungetkey RT_SEND
	            call tlr:JNLtran
			
			end if
			
			CDS UNLOCK dsc:teso_mov_context
			CDS FINDNEXT DSC:tes:teso_mov_context LOCK
			lib:err_retval = CDSRETVAL
			ind = ind + 1
		LOOP
		
		clearfield drv:INDjnl_rtn
		clearfield drv:INDspc_rtn[2]
        CDS UNLOCK dsc:teso_mov_context
		CDS ENDSELECT DSC:tes:teso_mov_context
        call post:MISCactivar_buts
		    
    else  // IF (reversa)
    
        call tes:MISCmsg_entrada(marca_ing,tmov_es_rechazo)
        if (retval < 0)
            return (-2)
        end if
     	// verifico que el operador origen del pase no haya cerrado su caja
		call tes:CDSchk_open_caj(tes:tmov_suc_id,tes:tmov_op_id_orig)
		if (retval < 1 && tes:tmov_codigo_siaf == 8620) then
	 		// la caja esta cerrada o no se pudo leer el registro de rend.
	    	let common:csr_string = "(L) IMPOSIBLE REVERSAR. OPERADOR ORIGEN CERRO CAJA"
	    	errmsg common:errmsg_list,fld:common:csr_string
	    	return (-2)
		end if

	 	// cuando reverso el pase le aviso al operador origen
        call MISCsend_msg_dest(tes:tmov_login_orig,"REVERSO SU PASE DE EFECTIVO")
    end if 
    return (0)
END SUB

/*******/
