/****o* Pendientes de agrupación/OFB:tes:SVALdep_ev_buzon
* NOMBRE
*   OFB:tes:SVALdep_ev_buzon
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesSVAL.h"

SUB tes:SVALdep_ev_buzon
    local tmp_importe like siaf:importe
    local tmp_cantidad like siaf:cantidad
     
        
    if (drv:dt_app == 4) then
	    cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
	    tes:adt_evaux_suc  == op:op_branch_id && \
	    adt_evaux_op       == op:op_tesoro_id && \
		adt_evaux_tesoro   == "S"             && \
		adt_evaux_es_venta == "N"
    else
	    cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
	    tes:adt_evaux_suc  == op:op_branch_id   && \
	    adt_evaux_op       == op:op_operator_id && \
		adt_evaux_tesoro   == "N"               && \
		adt_evaux_es_venta == "N"
    end if
    cds findfirst DSC:AuxEspV_ctx LOCK
    let lib:err_retval = CDSRETVAL  
    if (lib:err_retval !=0 ) then
        move "(L) NO EXISTEN DEPOSITOS INGRESADOS" to drv:error_msg
        call OFB:drv:error_msg
        drv:button = 4
        call drv:but_disable
        drv:button = 5
        call drv:but_disable
        return (-2)
    end if
    let siaf:importe = adt_evaux_importe
    let espv_subcod = adt_evaux_subcod

    /*    
    IF (siaf:importe == 0) THEN
        move "(L) IMPORTE TOTAL NO PUEDE SER 0" to drv:error_msg
        call  OFB:drv:error_msg
        return (-2)
    END IF 
    */
    popup tes:SCRNconfirma
    if (siaf:continua_transaccion == "N" || lastkey == RT_ESC) then
        return (-2)
    END IF
    clearfield siaf:continua_transaccion
    popup tes:SCRNseguro
    if (siaf:continua_transaccion == "N" || lastkey == RT_ESC) then
        return (-2)
    END IF
    /*
    let siaf:moneda = 0
    let post:medio_pago_desc  = espv_cod
    */
        
    let adt_evaux_importe = 0
    let adt_evaux_cantidad = 0
    ;let espv_subcod = TOTAL_TESO
	clearfield espv_subcod
    clearfield espv_cod
    clearfield adt_espv_cod
    clearfield adt_espv_subcod
    /* 
    Se pidió que el header de los pases grabe el importe total
    y la cantidad correspondiente en cero. 17/05/99 - Andrea 
    */
    tmp_importe = siaf:importe
    tmp_cantidad = siaf:cantidad
    refresh tmp_importe
    refresh tmp_cantidad
    siaf:importe = 0
    siaf:cantidad = 0
    refresh siaf:importe
    refresh siaf:cantidad  
	    
    aux_sequence_mov = tlr:jnl_sequence
	    
    siaf:importe = tmp_importe
    siaf:cantidad = tmp_cantidad
    refresh siaf:importe
    refresh siaf:cantidad
	
    IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
        ;let drv:INDscr = SCR:tes:SCRNmov_ev
        if (drv:dt_app == 4) then
	        cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
	        tes:adt_evaux_suc  == op:op_branch_id && \
		 	adt_evaux_op       == op:op_tesoro_id && \
			adt_evaux_tesoro   == "S"             && \
		    adt_evaux_es_venta == "N"
	    else
	        cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
	        tes:adt_evaux_suc  == op:op_branch_id   && \
			adt_evaux_op       == op:op_operator_id && \
			adt_evaux_tesoro   == "N"               && \
		    adt_evaux_es_venta == "N"
	    end if
	    cds findfirst DSC:AuxEspV_ctx LOCK
	    let lib:err_retval = CDSRETVAL  
		    
	    call csr:f_sadroppl dsc:Especie
	    call csr:f_sanewpl dsc:Especie pic:Especie
	   
	    let post:importe = 0 
	   
	    do
	        if (lib:err_retval != 0) then
		        break
	        end if
		 
	        cds extract DSC:AuxEspV_ctx ALL
	        move tes:adt_evaux_codigo to espv_cod
	        move tes:adt_evaux_codigo to adt_espv_cod
	        move tes:adt_evaux_subcod  to adt_espv_subcod
	        move tes:adt_evaux_subcod  to espv_subcod
	        move tes:adt_evaux_importe to siaf:importe
	        move adt_evaux_cantidad    to siaf:cantidad	
            let tes:es_tesoro = "S"
		 
	        FLD:drv:INDjnl_rtn = OFB:tes:JNLdep_ev_buzon
	        ungetkey 0x190
	        call siaf:MISClleno_modalidad
	
	        call tlr:JNLtran
	    
	        move adt_evaux_importe to post:importe_origen	

	        CALL CDSgrabo_deposito(op:op_branch_id,buzon,"E",bolsa,0,espv_cod,espv_subcod)
    	 
            fprint common:csr_string "%-20.20s %-20.20s %4.4s %12.12s", \
                   adt_evaux_codigo,adt_evaux_subcod,adt_evaux_cantidad,adt_evaux_importe    	 
	        
	        
	        ;fprint common:csr_string "%s         %s  %15s",espv_subcod,adt_evaux_cantidad,siaf:importe
            call csr:f_saaddpl dsc:Especie common:csr_string
            
            let post:importe = post:importe + siaf:importe 
		 
	        cds delete dsc:AuxEspV_ctx
	        cds unlock DSC:AuxEspV_ctx
            cds findnext DSC:AuxEspV_ctx LOCK
	        let lib:err_retval = CDSRETVAL
	    loop
	
	    CLEARFIELD drv:INDjnl_rtn	
	    cds endselect DSC:AuxEspV_ctx	    
	    CLEARFIELD drv:INDjnl_rtn
	    let drv:INDspc_rtn[2] = ofb:TRAN_Prt_Dep_EV
    END IF   
    ;if (flag_buzon ==  "X") then 
        CDS UNLOCK DSC:CajaBuzon_ctx
        CDS endselect dsc:CajaBuzon_ctx
    ;end if
    call post:MISCactivar_buts
    return (retval)
END SUB

/*******/
