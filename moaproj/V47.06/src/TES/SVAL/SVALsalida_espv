/****o* Pendientes de agrupación/OFB:tes:SVALsalida_espv
* NOMBRE
*   OFB:tes:SVALsalida_espv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "tesSVAL.h"

SUB tes:SVALsalida_espv
local lteso like tes:adt_cheqaux_tesoro
local idx like siaf:i
local superviso like tes:rend_marca_cierre 
local lstring like common:csr_string

    if (!testflag(tlr:tran_flags,correction))
       	//Limpio la pantalla
		call MISClimpia_pase_espv
	end if    

    Call MISCctrl_sval_espv
    if (retval < 0)
        call MISClimpia_pase_espv
        return (-2)
	end if    
	
 	// Guardo si fue supervisada para marcar las otras
    if (testflag(tlr:tran_flags,supovr_granted)) then
		let superviso = "S"
    else
		let superviso = "N"
    end if
	    	    
    IF (!TESTFLAG(tlr:tran_flags,correction)) THEN
            	    
		if (drv:dt_app == 4) then
			lteso = "S"
		else
			lteso = "N"
		end if
		cds select FROM DSC:AuxEspV_tbl becomes DSC:AuxEspV_ctx where \
		tes:adt_evaux_suc      == op:op_branch_id    && \
		tes:adt_evaux_op       == op:op_operator_id  && \
		tes:adt_evaux_tesoro   == lteso              && \
		tes:adt_evaux_importe  != 0	                 && \
		tes:adt_evaux_es_venta == "N"

	    cds findfirst DSC:AuxEspV_ctx LOCK
	    let lib:err_retval = CDSRETVAL  
		/*Creo un picklist auxiliar, para ordenarlo*/
		CALL csr:f_sadroppl dsc:analitico
		CALL csr:f_sanewpl dsc:analitico pic:analitico
	    do
			if (lib:err_retval != 0) then
		    	break
		 	end if
		 	cds extract DSC:AuxEspV_ctx ALL

			FPRINT common:csr_string,"%-20s     %-14s %-20s %-6s %-13.13e",\
			adt_evaux_codigo,login_dest,adt_evaux_subcod,adt_evaux_cantidad,adt_evaux_importe
	    	CALL csr:f_saaddpl dsc:analitico common:csr_string

			cds findnext DSC:AuxEspV_ctx LOCK
		 	let lib:err_retval = CDSRETVAL
	    loop
		/*Ordeno el picklist, por operador y denominacion*/
	    CALL csr:PickOp 4 dsc:analitico "25,14" "0,20"

		//Creo el picklist para impresion
	    call csr:f_sadroppl dsc:Especie
	    call csr:f_sanewpl dsc:Especie pic:Especie

		clearfield adt_espv_seq_pase
		clearfield adt_evaux_codigo
		clearfield login_dest
	    post:importe = 0 
		idx = PL_GETITEM
		do
			call csr:myPickcontrol(dsc:analitico,lstring,idx)
			if (retval < 0)
			    if (login_dest.numchars != 0) //NO es la primera vez -> ya tuve que haber grabado una cabecera con sus respectivos pases
					/*Solicitud 50088 - Evento 6: Cuando el se hacen pases a si mismo
					no debe mandarse un mensaje*/ 
			    	if (op:op_login_id != login_dest)
			    		call MISCsend_msg_dest(tes:login_dest,"LE HA HECHO UN PASE DE ESPECIES VALORIZADAS")			    
			    	end if
			    	CLEARFIELD drv:INDjnl_rtn
			    	Call TRANprt_salida_ev
				end if
				break
			end if
			
			//Si cambia la especie o el operador...grabo cabecera
			if (adt_evaux_codigo != substr(lstring,0,20) || login_dest != substr(lstring,25,14))
				if (login_dest.numchars != 0 && login_dest != substr(lstring,25,14)) 
					//NO es la primera vez -> ya tuve que haber grabado una cabecera con sus respectivos pases
					//Solo se hace cuando cambia el operador
					/*Solicitud 50088 - Evento 6: Cuando el se hacen pases a si mismo
					no debe mandarse un mensaje*/ 			    	
			    	if (op:op_login_id != login_dest)
			    		call MISCsend_msg_dest(tes:login_dest,"LE HA HECHO UN PASE DE ESPECIES VALORIZADAS")			    
			    	end if
			    	CLEARFIELD drv:INDjnl_rtn
			    	Call TRANprt_salida_ev

					//Creo el picklist para impresion
				    call csr:f_sadroppl dsc:Especie
				    call csr:f_sanewpl dsc:Especie pic:Especie

					//Limpio la secuencia de pase para que los proximos se grabe con otra secuencia...como pase nuevo !
					clearfield adt_espv_seq_pase
				end if
				espv_cod = substr(lstring,0,20)
		    	adt_evaux_codigo = substr(lstring,0,20)
		    	login_dest = substr(lstring,25,14)
		    	Call CDSingreso_manual

				if (superviso == "S") then //si la primera fue supervisada , marco todas
				    setflag tlr:tran_flags,supovr_granted
				endif
				//Grabo Cabecera
				Call MISCcabe_sal_espv
				
				// le sumo 6 al codigo de transacción porque cada uno de los pases
				let siaf:codigo_siaf = siaf:codigo_siaf + 6
		    end if    

			if (superviso == "S") then //si la primera fue supervisada , marco todas
			    setflag tlr:tran_flags,supovr_granted
			endif
			espv_cod = substr(lstring,0,20)
	    	adt_evaux_codigo = substr(lstring,0,20)
	    	login_dest = substr(lstring,25,14)
	    	Call CDSingreso_manual
		    adt_evaux_subcod = substr(lstring,40,20)
		    adt_evaux_cantidad = substr(lstring,61,6)
		    adt_evaux_importe = substr(lstring,68,13)
		    //Grabo pase
			Call MISCpase_sal_espv		    
		    
			idx = idx + 1
		loop
		    
        //cgw:Se borra los registros que no son de venta en la tabla AuxEspV para la sucursal y operador.
        CALL tes:CDSAuxEspV_clear(op:op_branch_id,lteso,op:op_operator_id)
     	
     	call post:MISCactivar_buts    
	else
    	// (reversa)
		if (siaf:codigo_siaf == 8660 || siaf:codigo_siaf == 8670) then
			CALL MISCreverso_sesion
		    if (retval < 0) then
		        return (-2)
		    end if
		end if
    end if

    call post:MISCflecha_restore
END SUB

/*******/
