/****o* Pendientes de agrupación/OFB:drv:reset_stack
* NOMBRE
*   OFB:drv:reset_stack
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "MainDrv_sub.h"

SUB drv:reset_stack
	// ------------------------------------------------------
	// Restore all the fields saved in the save_stack routine
	// ------------------------------------------------------

#if CORREO_DEBUG == CORREO_ON
	;if (plataf:current_state == CONFIRMATION) then
	local loc_debug_str like common:csr_string 
	fprint loc_debug_str "Entrando a... drv:reset_stack (app:%d - stack_cnt = %s)" drv:dt_app,drv:stack_cnt
	call post:MISClogMenues(loc_debug_str)
	;endif
#endif

	LET drv:INDfld = LST:drv:TRAN_desktop
	call post:MISCdumpCampos
	CALL  CSR:dt_tran DT_TRAN_RESTART drv:INDfld
	call post:MISClogCampos
	LET drv:INDcur_list = drv:INDstack_funct[dt_app][stack_cnt]
	LET drv:cnt_tmp = drv:stack_side_list[dt_app][stack_cnt]
	LET drv:INDside_bar_list = drv:INDstack_funct[dt_app][cnt_tmp]

	MOVE stack_col_done[dt_app][stack_cnt] TO collect_done

	IF (drv:INDstack_side_scr[dt_app][stack_cnt] != 0 && \
		drv:INDstack_side_scr[dt_app][stack_cnt] != INDcur_sb_scr)
		CALL  CSR:proc_list F_COPY LST:drv:LISTside_bar LST:drv:LISTside_bar_dis
		CALL  CSR:proc_list F_COPY LST:drv:LISTside_bar_but LST:drv:LISTside_bar_cbut
		LET INDcur_sb_scr = FLD:drv:INDstack_side_scr[dt_app][stack_cnt]
		if ( !testflag(drv:mode_flags,ret_to_na) && !testflag(drv:mode_flags,ret_to_tlr) && \
						  !testflag(drv:mode_flags,ret_to_loan))
		        JOINSCREEN FLD:INDcur_sb_scr,CURRENTFIELD
			CALL  OFB:drv:reset_side_state
		end if
	END IF
	IF (drv:INDstack_side_scr[dt_app][stack_cnt] != 0)
		CALL  OFB:drv:reset_side_state
	END IF
	LET cnt_tmp = stack_cnt

#if CORREO_DEBUG == CORREO_ON
    fprint loc_debug_str "drv:reset_stack - stack_start_tran (cnt_tmp: %s)" drv:cnt_tmp
	call post:MISClogMenues(loc_debug_str)
#endif

	DO
		IF (stack_start_tran[dt_app][cnt_tmp] == "Y")
			LET drv:INDfld = drv:INDstack_funct[dt_app][cnt_tmp]
			call post:MISCdumpCampos
			CALL  CSR:dt_tran DT_TRAN_RESTART drv:INDfld
			call post:MISClogCampos
			BREAK
		END IF
		IF (cnt_tmp == 0)
			BREAK
		END IF

#if CORREO_DEBUG == CORREO_ON
    fprint loc_debug_str "drv:reset_stack - stack_start_tran (cnt_tmp: %s)" drv:cnt_tmp
	call post:MISClogMenues(loc_debug_str)
#endif

		LET cnt_tmp = cnt_tmp - 1
	LOOP
    LET FLD:drv:tab_active = FLD:drv:stack_tab_no[dt_app][drv:stack_cnt]
    LET FLD:drv:starting_tab = FLD:drv:stack_start_tab[dt_app][drv:stack_cnt]
	LET drv:screen_active = stack_act[dt_app][stack_cnt]
	// -----------------------------------------
	// Restore the SubScreen Mode flag if needed
	// -----------------------------------------
	LET drv:subscreen[drv:dt_app] = stack_sub[dt_app][stack_cnt]
	CALL drv:restore_tabs
	IF (drv:INDsave_run[drv:dt_app] != 0) THEN
		 IF (drv:tab_active >= 0) THEN
			 LET FLD:drv:INDscr = FLD:drv:tab_screen[tab_active]
			 IF (drv:INDscr != 0)
				CUTSCREEN FLD:drv:INDscr,CURRENTFIELD
			 END IF
		 END IF
		 CALL drv:enable_tab
		 CALL FLD:drv:INDsave_run[drv:dt_app]
		 CLEARFIELD drv:INDsave_run[drv:dt_app]
		 LET drv:tab_active = drv:next_tab
		 LET drv:screen_active = drv:next_screen
		 LET drv:reload_screen = drv:next_screen
		 drv:next_screen = -1
		 drv:next_tab = -1
		 call drv:save_tabs_noc
	END IF
END SUB

/*******/
