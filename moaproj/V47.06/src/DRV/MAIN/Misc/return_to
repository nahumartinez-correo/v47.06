/****o* Pendientes de agrupación/OFB:drv:return_to
* NOMBRE
*   OFB:drv:return_to
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "MainMisc.h"

    SUB drv:return_to
    LET return_to_stack = -1
    IF (new_app == -1)
        LET stack_cnt_tmp = stack_cnt
        DO
            IF (stack_cnt >= 0)
                IF (FLD:drv:INDreturn_to == FLD:drv:INDstack_funct[dt_app][stack_cnt])
                    LET drv:INDrun_funct = drv:INDstack_funct[dt_app][stack_cnt]
                    LET drv:funct_rest = 1
                    LET return_to_stack = stack_cnt
                    LET stack_cnt = stack_cnt_tmp
                    IF (drv:INDscreen[screen_active] != 0)
                        LET FLD:drv:INDscr = FLD:drv:INDscreen[screen_active]
                        CUTSCREEN FLD:drv:INDscr,CURRENTFIELD
                    END IF
                    IF (drv:INDside_bar_scr != 0)
                        CUTSCREEN FLD:drv:INDside_bar_scr,CURRENTFIELD
                        CLEARFIELD INDcur_sb_scr
                    END IF
                    RETURN (0)
                END IF
            ELSE
                LET stack_cnt = stack_cnt_tmp
                LET drv:INDrun_funct = drv:INDstack_funct[dt_app][stack_cnt]
                RETURN (-1)
            END IF
            LET stack_cnt = stack_cnt - 1
        LOOP
    ELSE
        LET stack_cnt_tmp = stack_cnt
        DO
            IF (stack_cnt >= 0)
                IF (FLD:drv:INDreturn_to == FLD:drv:INDstack_funct[new_app][stack_cnt])
                    LET drv:INDrun_funct = drv:INDstack_funct[new_app][stack_cnt]
                    LET drv:funct_rest = 1
                    LET return_to_stack = stack_cnt
                    LET stack_cnt = stack_cnt_tmp
                    RETURN (0)
                END IF
            ELSE
                LET drv:INDrun_funct = drv:INDstack_funct[dt_app][stack_cnt]
                LET stack_cnt = stack_cnt_tmp
                RETURN (-1)
            END IF
            LET stack_cnt = stack_cnt - 1
        LOOP
    END IF
    END SUB

/*******/
