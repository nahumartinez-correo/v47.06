/****o* Pendientes de agrupación/OFB:drv:menu_escape
* NOMBRE
*   OFB:drv:menu_escape
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "MainDrv_mnu.h"

SUB drv:menu_escape

let menu_level[dt_app] = menu_level[dt_app] - 1
if (menu_level[dt_app] >= 0)
	CALL  menu_pop_stack
END IF
SELECT (menu_level[dt_app])
	case -1
		cutscreen menu_buttons0,nocursor
		cutscreen menu_base0,nocursor
		clearfield menu_level[dt_app]
		clearfield menu_select_code[dt_app]
		clearfield menu_rebuild_reqd[dt_app]
		return 0
	case 0
		/*  this is the base menu screen so the
		    menu button (if it exists) will be
		    disabled
		*/
		let drv:button = BUT_TOP_MENU
		CALL  drv:but_status
		if (drv:hidden == 0)
			CALL  but_disable
		END IF
		cutscreen menu_buttons1,nocursor
		cutscreen menu_base1,nocursor
		joinscreen menu_buttons0,nocursor
		break
	case 1
		cutscreen menu_buttons2,nocursor
		cutscreen menu_base2,nocursor
		joinscreen menu_buttons1,nocursor
		break
	case 2
		cutscreen menu_buttons3,nocursor
		cutscreen menu_base3,nocursor
		joinscreen menu_buttons2,nocursor
		break
	case 3
		cutscreen menu_buttons4,nocursor
		cutscreen menu_base4,nocursor
		joinscreen menu_buttons3,nocursor
		break
	CASE ELSE
		move "menu error" to drv:error_msg
		CALL  drv:error_msg
		return 0
END SELECT
let ms_cnt = menu_select_code[dt_app].numchars - 1
move substr(menu_select_code[dt_app],0,ms_cnt) to menu_select_code[dt_app]
return -1
END SUB

/*******/
