/****o* Pendientes de agrupación/OFB:drv:driver_menu
* NOMBRE
*   OFB:drv:driver_menu
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "MainDrv_mnu.h"

// Esta tecla sera utilizada para cambiar la modalidad de
// busqueda de las transacciones (por T&T, Descrip, o boton)
#define MNU_MODE_KEY	F27		
#define BUT_ACTION		RT_TAB

SUB drv:driver_menu
//	LET drv:INDbutton_list = LST:drv:LISTtag_menu
//	CALL  OFB:drv:but_enable_list
	LET last_button = -1
    ;SMC si el operador fue inhibido, no debe operar mas
    call op:MISCCheqInhabilNow

    ;SMC si es Administrador de Tablas, Limpio Las Flags de los Botones
    if (op:op_tables_auth == "X") then
       RESETFLAG admin:mode_flags,imprimir
       RESETFLAG admin:mode_flags,delete
       RESETFLAG admin:mode_flags,update
    endif
	//violento clearfield de este maldito campo
	CALL post:CDSclear_rechDif	
    // FGB agrego mensaje en el visor
    call post:MISCmensaje_visor("A")

	//Reingeniería
	//genero el picklist que va a guardar las tx incluidas en el presupuesto actual
	CALL post:MISCgrilla_sesion

	;PAW: se agrego una inhibición del ESC en teclas rapidas, y por seguridad
	;se la vuelve a habilitar.
	call csr:f_orskunlk
    
    DO
      IF (NEXTKEY == RT_HOME) THEN
        GETKEY
      ELSE
        BREAK
      END IF
    LOOP

	// FGB (reingenieria): Inicializo los campos del buscador...
	keydef PUSH
	keydef MNU_MODE_KEY,OFB:plataf:MISCmenu_mode
	clearfield plataf:chosen_lsttrn
	clearfield plataf:chosen_codtrn
	clearfield plataf:barcode_search
	clearfield plataf:descrip_search
	refresh plataf:barcode_search
	refresh plataf:descrip_search
	//Se limpia la lista que contiene los campos que se cargan cuando se busca por codigo de barra
	//SIEMPRE QUE SE AGREGUE UN CAMPO QUE ALMACENE EL CODIGO DE BARRA, DEBE AGREGARSE EN ESTA LISTA !
	//Ver rutinas plataf:MISCpick_desc y plataf:MISCpick_barcode
	CALL CSR:proc_list(170,LST:plataf:LISTbarcode_flds)
	CALL CSR:proc_list(190,LST:plataf:LISTbarcode_flds)

    DO
		// dibuja el modo de busqueda correspondiente...
		if (testflag(plataf:menu_mode_flags,redrawed)) then
			call plataf:MISCmenu_redrawed
		endif

		CLEARFIELD drv:INDrun_funct
		LET last_key = -1
		LET drv:collect = 1
		let drv:last_button = -1
		resetflag mode_flags,menu_return


		if (drv:dt_app == 2 || drv:dt_app == 3) then
			if (testflag(plataf:menu_mode_flags,barcode) || \
				testflag(plataf:menu_mode_flags,descrip)) then
					COLLECT 
					if (plataf:chosen_codtrn.NUMCHARS > 0 && plataf:chosen_lsttrn != 0) then
						call plataf:set_tran_found
					endif
			else
				// FGB (reingenieria): cuando el operador elige usar los botones o cuando
				// no se encuentra dentro del perfil de caja o mercha.
				GETKEY
			endif
		else
			// si no estoy en caja o en mercha, siempre utilizo el menu de botones...
			GETKEY
		endif
		LET drv:collect = 0
		IF (last_key != -1)
			LET LASTKEY = last_key
		END IF
		IF (LASTKEY >= 0x1030 && LASTKEY <= 0x1039) /* num pad */
			LET LASTKEY = LASTKEY - 0x1000
		END IF
		SELECT (LASTKEY)
			CASE '0'
				LET button = CB9
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb9
				ELSE
					BEEP
				END IF
			BREAK
			CASE '1'
				LET button = CB0
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb0
				ELSE
					BEEP
				END IF
			BREAK
			CASE '2'
				LET button = CB1
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb1
				ELSE
					BEEP
				END IF
			BREAK
			CASE '3'
				LET button = CB2
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb2
				ELSE
					BEEP
				END IF
			BREAK
			CASE '4'
				LET button = CB3
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb3
				ELSE
					BEEP
				END IF
			BREAK
			CASE '5'
				LET button = CB4
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb4
				ELSE
					BEEP
				END IF
			BREAK
			CASE '6'
				LET button = CB5
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb5
				ELSE
					BEEP
				END IF
			BREAK
			CASE '7'
				LET button = CB6
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb6
				ELSE
					BEEP
				END IF
			BREAK
			CASE '8'
				LET button = CB7
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb7
				ELSE
					BEEP
				END IF
			BREAK
			CASE '9'
				LET button = CB8
				CALL  drv:but_status
				IF (disabled == 0)
					CALL  OFB:PBcb8
				ELSE
					BEEP
				END IF
			BREAK
			CASE 0x9CF
				CALL  OFB:drv:PBkey_but_wa
			BREAK
			CASE 0x9D1
				CALL  OFB:drv:PBkey_but_sb
			BREAK
			case RT_PAGEUP
				let drv:INDrun_funct = ofb:drv:PBesc
				//  break intentionally left out
			CASE RT_ESC
				/*  if we are calling another function
				    we need to take the menu's down first
				*/
				let INDfld_tmp = ofb:drv:PBesc
				if ( (INDrun_funct != 0 && \
					INDrun_funct != INDfld_tmp) || \
					testflag(drv:mode_flags,exit_app))
					CALL  menu_push_stack
					CALL  menu_undisplay
					setflag mode_flags,menu_return
				END IF
				if (INDrun_funct == INDfld_tmp)
					setflag mode_flags,menu_return
				end if
				LET drv:last_key = RT_ESC
				GOTO end_loop
			BREAK
			CASE DC_FUNC1
			CASE DC_FUNC2
			CASE DC_FUNC3
			CASE DC_FUNC4
			CASE DC_FUNC5
                        /* we will ignore the space bar */
                        CASE ' '
			BREAK
			CASE ELSE
				IF (TESTFLAG(drv:mode_flags,exit_app))
					GOTO end_loop
				END IF
				BEEP
			BREAK
		END SELECT
		/* if we are calling another menu we will just handle it
	 	   here.  The driver has enough to do already!
		   I know that CB0 is equated to 0 but this will still work
		   if someone changes that equate.
		*/
		let drv:last_button = drv:last_button - CB0
		if (drv:last_button >= 0 && drv:last_button <= 9)
			/* we selected something from the menu */
			if (menu_action[drv:last_button] == "M")
				fprint menu_select_code[dt_app], "%s%d", \
					menu_select_code[dt_app], last_button
				CALL  drv:menu_push_stack
				let drv:menu_level[drv:dt_app] = drv:menu_level[drv:dt_app] + 1
				LET drv:INDbut_list[drv:screen_active] = INDbut[last_button]
				CALL  drv:driver_menu_load
				let INDrun_funct = 0
			END IF
		END IF
		let last_button = last_button + CB0
		/*  this probably won't happen to often but just in
		    case, we will take care of getting rid of the
		    menus
		*/
		let INDfld_tmp = ofb:drv:PBesc
		IF (drv:INDrun_funct != 0 )
			if ( drv:INDrun_funct != INDfld_tmp )
				CALL  drv:menu_push_stack
				CALL  drv:menu_undisplay
			else
				setflag mode_flags,menu_return
			END IF

			BREAK

		END IF

	LOOP

end_loop:

	// FGB - Reing: restauro el mapeo del teclado...
	keydef POP

	// FGB 16.11.2004: dado que a los cajeros les gusta jugar con las teclas... hay que 
	// poner parches para que esto no traiga problemas.
	if (NEXTKEY >= RT_F1 && NEXTKEY <= RT_F12) then
		ungetkey DC_FUNC1
	endif
	
	while (NEXTKEY)
		GETKEY
	end while 

	keydef MNU_MODE_KEY,BUT_ACTION

	IF (last_button != -1)
		IF (last_button != N_UP)
			IF (last_button >= CB0 && \
			    last_button <= CB19)
				LET INDrun_funct = INDbut[last_button]
			END IF
		END IF
	END IF
END SUB


/*******/
