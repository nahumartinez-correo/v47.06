/****o* Pendientes de agrupación/OFB:hcomm:SRQ_op_status
* NOMBRE
*   OFB:hcomm:SRQ_op_status
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "MOA2MOAMOA.OFB.h"

/*  NAME: hcomm:SRQ_snd_op_status                                             */
/*                                                                        */
/*   Message format: - 3 byte service request code (ASCII 105)            */
/*                   -  (operator id)                                     */
/*  Returns:                                                              */
/*     0 - operator signed on                                             */
/*     -1 - operator not signed on                                        */
/*                                                                        */
	SUB hcomm:SRQ_op_status
	if (hcomm:host_moa.numchars != 0)
		comm setresource hcomm:host_moa init_send
		if (commhdr(CSH_SESSION_STATUS) != CS_CSDN)
			/*  Concat the resource name onto node name - */
			clearfield hcomm:host_dest_resrc
			fprint hcomm:host_dest_resrc,"$%s:pplus", op:adt_node_id

			/* Now Build the message to send */
			comm put OP_STATUS msg
			let hcomm:host_len = op:adt_login_id.length
			comm put op:adt_login_id msg length hcomm:host_len
			clearfield hcomm:host_srv_resp
			resetflag hcomm:event_flags,primary
			resetflag hcomm:event_flags,op_status_on
			resetflag hcomm:event_flags,op_status_off
			comm senddata hcomm:host_dest_resrc
			do
				if (testflag(hcomm:event_flags,op_status_on))
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					resetflag hcomm:event_flags,op_status_on
					return -1
				END IF
				if (testflag(hcomm:event_flags,op_status_off))
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					resetflag hcomm:event_flags,op_status_off
					return 0
				END IF

				comm waitformsg DEFAULT_WAIT_TIME

				if (testflag(hcomm:event_flags,op_status_on))
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					resetflag hcomm:event_flags,op_status_on
					return -1
				END IF
				if (testflag(hcomm:event_flags,op_status_off))
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					resetflag hcomm:event_flags,op_status_off
					return 0
				END IF
				if (commretval == RESET_OUT)
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					return 0
				END IF
				if (commretval == TIMED_OUT)
					resetflag hcomm:event_flags,primary
					resetflag hcomm:event_flags,secondary
					return 0
				END IF
				// if we got to here the message must not have been for us, let's wait
				// for another one
			loop
			/* Must have been a primary event */
			resetflag hcomm:event_flags,primary
			resetflag hcomm:event_flags,secondary
		else
			CALL  OFB:host_csdn_msg
			return 0
		END IF
	else
		CALL  OFB:host_moa_notconfig
		return 0
	END IF
	return
	END SUB

/*******/
