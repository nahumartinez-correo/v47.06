/****o* Pendientes de agrupación/OFB:hcomm:COMM_rcv
* NOMBRE
*   OFB:hcomm:COMM_rcv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "ONACOMMRCV.OFB.h"

SUB hcomm:COMM_rcv
// If the tran_status is not SEND_RESET, then the desired message has already 
// been received.
	if (hcomm:tran_status != SEND_RESET)
		return
	end if 
	let hcomm:tran_status = RCV_RESET
	do
		if (hcomm:tran_status != RCV_RESET)		// check if came in on loop check
			break
		end if
		move dsc:hcomm:host_reply to lib:stat_message

		let lib:stat_message.highlite = 0

		refresh lib:stat_message
		// this is the point we block waiting for msg,reset, or time out

/*		if (testflag (common:rt_flags,batch_mode))
			comm waitformsg 15 no_reset_allowed
		else
			comm waitformsg no_reset_allowed 30
		end if */
#ifdef GIROS
        comm waitformsg hcomm:timeout no_reset_allowed  
#else
		comm waitformsg no_reset_allowed 
#endif


		if (commretval == RESET_OUT || commretval == TIMED_OUT)
			move "SIN RESPUESTA DEL HOST"  to lib:stat_message
			refresh lib:stat_message
			break
		end if
	loop
END SUB

/*******/
