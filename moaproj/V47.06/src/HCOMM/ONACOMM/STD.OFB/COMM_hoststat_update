/****o* Pendientes de agrupación/OFB:hcomm:COMM_hoststat_update
* NOMBRE
*   OFB:hcomm:COMM_hoststat_update
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "ONACOMMSTD.OFB.h"

/* NAME: hcomm:COMM_hoststat_update                                       */
/*                                                                        */
/*   This routine determines which host requires the status update and    */
/*   adjusts the status line accordingly.                                 */
/*                                                                        */
SUB hcomm:COMM_hoststat_update
	SELECT (commhdr(CSH_SESSION_STATUS))
		case CS_UP
			move dsc:hcomm:host_up to hcomm:host_stat
			break
		case CS_SSCP
			move dsc:hcomm:host_sscp to hcomm:host_stat
			break
		case CS_DOWN
			move dsc:hcomm:host_down to hcomm:host_stat
			break
		CASE ELSE
			move dsc:hcomm:host_csdn to hcomm:host_stat
	END SELECT
	if (commhdr(CSH_DEST) == hcomm:host1)
		move hcomm:host_stat to lib:stat_host1
		resetflag hcomm:state_flags,on_line /* assume not online */
		if (lib:stat_host1 != dsc:hcomm:host_up) 

      /* if host is not up force host mode offline. */
			move dsc:hcomm:host_downmode to lib:stat_host_mode
			let lib:stat_host_mode.highlite = 1
			let lib:stat_reentry.highlite = 0
			/* MARTIN Y FEDERICO */
			if (lib:stat_host1 == dsc:hcomm:host_down)
				let lib:stat_host1.highlite = 1
			else
				let lib:stat_host1.highlite = 0
			endif
			/**/

		else /* host must be up */
			let lib:stat_host1.highlite = 0
			/* MARTIN Y FEDERICO */
			let lib:stat_host_mode.highlite = 0
			move dsc:hcomm:host_upmode to lib:stat_host_mode
			setflag hcomm:state_flags,on_line
			if (lib:stat_reentry == "REN")
				let lib:stat_reentry.highlite = 1
			endif
			/**/
/* MARTIN Y FEDERICO COMENTAN.... 
			if (lib:stat_host_mode.numchars == 0) 
				;is blank at system startup 

				move dsc:hcomm:host_upmode to lib:stat_host_mode
				let lib:stat_host_mode.highlite = 0
				setflag hcomm:state_flags,on_line
				if (lib:stat_reentry == "REN")
					let lib:stat_reentry.highlite = 1
				endif
			else
				if (lib:stat_host_mode == dsc:hcomm:host_upmode)
					setflag hcomm:state_flags,on_line
					if (lib:stat_reentry == "REN")
						let lib:stat_reentry.highlite = 1
					endif
				endif
			endif   FIN COMENTARIO MARTIN Y FEDERICO*/
					
		endif
		refresh lib:stat_host_mode
		refresh lib:stat_host1
		refresh lib:stat_reentry
		return
	END IF

	if (commhdr(CSH_DEST) == hcomm:host2)
		select (hcomm:host_stat)
			case dsc:hcomm:host_down
				move dsc:hcomm:host_unready to lib:stat_host2
				break
			case dsc:hcomm:host_up
				move dsc:hcomm:host_ready to lib:stat_host2
				break
			case else
				move hcomm:host_stat to lib:stat_host2
				break
		end select
		if (lib:stat_host2 == dsc:hcomm:host_down || lib:stat_host2 ==\
			dsc:hcomm:host_csdn || dsc:hcomm:host_unready == lib:stat_host2)
			let lib:stat_host2.highlite = 1
		else
			let lib:stat_host2.highlite = 0
		END IF
		refresh lib:stat_host2
		return
	END IF

//		Put more code in if you want to use more than 2 sessions
END SUB


/*******/
