#include "ctc-RCV.OFB.h"

//
// This is the event script that is driven by RT for all CTC host
// sessions.  The name can not be changed and comm setevent will give an error
// Parameters
//		Papplid	=  this is the environment name in CTCBridge (or CTCCfg) for 
//				   this session
//		Pmsgtype = #defines are in ctcofb.h
//		Pmsglen =  length of the data message
//		Pflags =   #defines are in ctcofb.h
//		Prsptime = this is the the endtoend response time (in millisecs) of 
//				   the last transaction
//		Pmsgbuf =  this value can be passed to 'C' code and be used as a
//				   (char *) to access the received msg
//		Pindex	=  this is an index that can be used instead of Papplid. 
//				   The index is defined by the order that the environments are 
//				   defined in CTCBridge (or CTCCfg).  Zero is first session.

SUB hcomm:ctc_event ( Papplid Pmsgtype Pmsglen Pflags Prsptime Pmsgbuf Pindex )

	if ( host_applid[Pindex].numchars == 0 )	// fill names into array
		host_applid[Pindex] = Papplid
	end if
	select ( Pmsgtype )
	case CTC_STATUS_UP					// connected to host
		host_status[Pindex] = Pmsgtype
		CALL  OFB:hcomm:COMM_hoststat_update (Pindex)
		break
	case CTC_STATUS_DOWN				// not connected to host
		host_status[Pindex] = Pmsgtype
		let hcomm:tran_status = HOST_RCV_DOWN
		CALL  OFB:hcomm:COMM_hoststat_update (Pindex)
		break
	case CTC_STATUS_CSDN				// unable to connect to CTCBridge
		host_status[Pindex] = Pmsgtype
		let hcomm:tran_status = HOST_COMMSRVR_DOWN
		CALL  OFB:hcomm:COMM_hoststat_update (Pindex)
		break
	case CTC_MESSAGE_TYPE_CRT_DATA		// You are in NOTIFY mode with emulator and something hit the screen
		CALL  FLD:hcomm:INDhost_rcvrt (Pindex)
		break
	case CTC_MESSAGE_TYPE_ENV_DATA		// normal data for unformatted sessions also PASSTHRU
		CALL  FLD:hcomm:INDhost_rcvrt (Pindex)
		commretval = Pmsglen	// return length to have crt process PASSTHRU data
		// commretval = 0		// return zero to eat PASSTHRU data
		break
	case else							// There are more msgtype's see ctcofb.h
		break
	end select
		 
END SUB


/* NAME: hcomm:COMM_rcv													*/
/*																		*/
/* This is the main hostcomm receive script which gets called from		*/
/* the COMM_host_tran routine.  Its purpose is to wait for a response	*/
/* if one hasn't been received yet.										*/
/*																		*/
