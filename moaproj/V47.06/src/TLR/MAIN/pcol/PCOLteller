/****o* Pendientes de agrupación/OFB:tlr:PCOLteller
* NOMBRE
*   OFB:tlr:PCOLteller
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "mainpcol.h"

	SUB tlr:PCOLteller
	SELECT (drv:screen_active)
		case TLR_OPEN_DAY
			protfield op:op_login_id
			protfield op:op_branch_id
			protfield op:op_operator_id
		break
		case TRAN_MENU
			let drv:button = TFB2
			call drv:but_status
			if ( drv:down != 1 )
				call drv:but_down_disable
			end if
		case SPEED_KEY1
		case SPEED_KEY2
			if (testflag(state_flags,linked_from_dde))
#if BASE_CFIG_NA == 1
				clearfield na:xx_account_number
				clearfield na:xx_opening_deposit
#endif
				resetflag state_flags,linked_from_dde
			end if
			let drv:next_screen = -1
			CALL  drv:PCOLmenu
		break
		case LINK_TO_TLR
			if ( link_list[0] != 0 )
				let drv:INDrun_funct = link_list[0]
				call  drv:do_mode
				call  MISCpop_link_list
			else
				// if the flag is still set and link_list[0]
				// is 0 then we will just return to new accts
				if ( testflag(state_flags,linked_from_na ))
					resetflag state_flags,linked_from_na
					setflag drv:mode_flags,ret_to_na
					setflag drv:mode_flags,exit_app
				else
					if (testflag(tlr:tran_flags,from_micr))
						resetflag tlr:tran_flags,from_micr
						setflag drv:mode_flags,exit_app
						call drv:prev_app
					end if
				end if
			endif
			ungetkey RT_ESC
		break		
	END SELECT
	CALL  tlr:main_tran_cleanup
	END SUB

/*******/
