/****o* Pendientes de agrupación/OFB:siaf:MISClst_mon_constot
* NOMBRE
*   OFB:siaf:MISClst_mon_constot
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafMISC.h"

SUB siaf:MISClst_mon_constot
    LOCAL ciclo      LIKE i    
    LOCAL mone       LIKE i
    LOCAL Tot_monto  LIKE siaf:aux_suma_monto
    LOCAL Tot_sinimp LIKE siaf:aux_suma_monto
        
    mone = 0
    lineas_cl = 0
    indica_calcu = 0
    i = 1
    
    let desc_moneda = desc_moneda_vec[mone]
    CALL MISCtotscons_encabez    

    
    DO
       if (mone > IDX_MONEDA) then
          
          if (siaf:pantalla_impreso ==  "I") then      	     
             While (siaf:i < 59) 
                   let common:csr_string = "    "
                   call MISCwrite_tot
             end While             
             fprint common:csr_string "                                                     Cantidad de Hojas : %s" siaf:indica_calcu
             call MISCwrite_tot
          End if
          
          break
       endif
       
       
       if (desc_moneda_vec[mone].numchars > 0) then        
          let desc_moneda = desc_moneda_vec[mone]
          let common:csr_string = "    "
          call MISCwrite_tot
          if (mone == 0) || (mone == 2) then
             FPRINT common:csr_string,"   EFECTIVO INICIAL:  %17.17e", \
             suma_monto_vec[9][mone]
          else
             FPRINT common:csr_string,"   TOTAL INICIAL:     %17.17e", \
             suma_monto_vec[9][mone]
          endif
          CALL MISCwrite_tot
          common:csr_string = "         "
          CALL MISCwrite_tot
          ciclo = 1
          DO
             IF (ciclo > 3) THEN
                BREAK
             END IF
             
             IF ((62 - i) < 5) THEN
                i = 92
                common:csr_string = "   "
                CALL MISCwrite_tot
             END IF
             
             CALL MISCsubenc_consol(ciclo)
             
             Tot_monto  = 0
             Tot_sinimp = 0
             
             cant = 0
             DO
                IF (cant > IDX_TOTAL) THEN
                   BREAK
                END IF
                IF (pantalla_impreso == "P") THEN
                   i = 0
                END IF
                IF ((((ciclo == 1) && (opera_vect[cant][mone] == "+"))  || \
                     ((ciclo == 2) && (opera_vect[cant][mone] == "-"))) || \
                     ((ciclo == 3) && (opera_vect[cant][mone] == "N"))) THEN
                     IF (suma_cant_vec[cant][mone] != 0) THEN
                         Select (impresion_vect[cant])
                                 case 1
                                      FPRINT common:csr_string, "%-15.15s %4.4s                      %17.17e %17.17e", \
                                      desc_vec[cant],suma_cant_vec[cant][mone],suma_monto_vec[cant][mone],suma_monto_vec[cant][mone]
                                      break
                                 case 2
                                      FPRINT common:csr_string, "%-15.15s %4.4s                      %17.17e %17.17e", \
                                      desc_vec[cant],suma_cant_vec[cant][mone],suma_monto_vec[cant][mone],suma_sinimp_vec[cant][mone]
                                      break
                                 case 3
                                      aux = suma_piezas_vec[cant][mone] - suma_pminor_vec[cant][mone]
                                      FPRINT common:csr_string, "%-15.15s %4.4s  %4.4e    %4.4e   %4.4e %17.17e %17.17e", \
                                      desc_vec[cant],suma_cant_vec[cant][mone],suma_pminor_vec[cant][mone],aux,suma_piezas_vec[cant][mone],suma_monto_vec[cant][mone],suma_sinimp_vec[cant][mone]
                                      break
                                 case 4
                                      aux = suma_cant_vec[cant][mone] - suma_pminor_vec[cant][mone]
                                      FPRINT common:csr_string, "%-15.15s %4.4s  %4.4e    %4.4e   %4.4e %17.17e %17.17e", \
                                      desc_vec[cant],suma_cant_vec[cant][mone],suma_pminor_vec[cant][mone],aux,suma_cant_vec[cant][mone],suma_monto_vec[cant][mone],suma_sinimp_vec[cant][mone]
                                      break
                           End select       
                           CALL MISCwrite_tot
                           Tot_monto  = Tot_monto  + suma_monto_vec[cant][mone]                           
                           if (impresion_vect[cant] == 1)
                              Tot_sinimp = Tot_sinimp + suma_monto_vec[cant][mone]
                           else
                              Tot_sinimp = Tot_sinimp + suma_sinimp_vec[cant][mone]
                           end if                           
                     END IF
                END IF
                cant = cant + 1
             LOOP
             
             
             common:csr_string = "         "
             CALL MISCwrite_tot
             FPRINT common:csr_string,"TOTAL                                     %17.17e %17.17e",Tot_monto,Tot_sinimp
             CALL MISCwrite_tot
             common:csr_string = "         "
             CALL MISCwrite_tot
             
             ciclo = ciclo + 1
          LOOP
          if (mone == 0) || (mone == 2) then
             FPRINT common:csr_string,"EFECTIVO EN CAJA:                             %13.13e", \
             suma_monto_vec[0][mone]
          else
             FPRINT common:csr_string,"TOTAL:                                        %13.13e", \
             suma_monto_vec[0][mone]
          endif
          CALL MISCwrite_tot
          common:csr_string = "         "
          CALL MISCwrite_tot
          FPRINT common:csr_string,"TOTAL CAJAS QUE NO OPERARON:                  %13.13e", \
          monto_no_oper[mone]
          CALL MISCwrite_tot
          common:csr_string = "         "
          CALL MISCwrite_tot
          common:csr_string = "         "          
          CALL MISCwrite_tot
          common:csr_string = "         "          
          CALL MISCwrite_tot
       endif

       mone = mone + 1
              
       /* salto de hoja */ 
       if (!(mone > IDX_MONEDA))
          if (desc_moneda_vec[mone].numchars > 0) then
             if (siaf:pantalla_impreso ==  "I") then
                While (i < 60)
                   let common:csr_string = "    "                   
                   call MISCwrite_tot
                Endwhile
             else
                let desc_moneda = desc_moneda_vec[mone]          
                CALL MISCtotscons_encabez                
             end if
          end if          
       end if
                     
    LOOP
END SUB

/*******/
