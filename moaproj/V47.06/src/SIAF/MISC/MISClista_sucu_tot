/****o* Pendientes de agrupación/OFB:siaf:MISClista_sucu_tot
* NOMBRE
*   OFB:siaf:MISClista_sucu_tot
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafMISC.h"

SUB siaf:MISClista_sucu_tot
    LOCAL total    LIKE tefectivo_pes
    LOCAL medpag   LIKE i
    LOCAL ciclo    LIKE i
    LOCAL subtotal LIKE aux_suma_monto
    LOCAL mone     LIKE i

    mone         = 0
    lineas_cl    = 0
    indica_calcu = 0
    
    let desc_moneda = desc_moneda_vec[mone]
    CALL MISCtots_encabez
    

       
    if (desc_moneda_vec[mone].numchars > 0) then
       let desc_moneda = desc_moneda_vec[mone]
       common:csr_string = "         "
       CALL MISCwrite_tot
       /*
       if (mone == 0) || (mone == 2) then
          FPRINT common:csr_string,"   EFECTIVO INICIAL:  %17.17e", \
          suma_monto_vec[9][mone]
       else
          FPRINT common:csr_string,"   TOTAL INICIAL:     %17.17e", \
          suma_monto_vec[9][mone]
       endif
       CALL MISCwrite_tot
       */
       common:csr_string = "         "
       CALL MISCwrite_tot
       ciclo = 1
       DO
          IF (ciclo > 3) THEN
             BREAK
          END IF
          IF ((62 - i) < 4) THEN
             i = 92
             common:csr_string = "   "
             CALL MISCwrite_tot
          END IF
          common:csr_string =  \
          "   ----------------------------------------------------------"
          CALL MISCwrite_tot
          SELECT (ciclo)
                 CASE 1
                      FPRINT common:csr_string, \
                      "   ENTRADAS                   CANT.   PIEZAS        IMPORTE"
                      BREAK
                 CASE 2
                      FPRINT common:csr_string, \
                      "   SALIDAS                    CANT.   PIEZAS        IMPORTE"
                      BREAK
                 CASE 3
                      FPRINT common:csr_string, \
                      "   NO AFECTA EFECTIVO         CANT.   PIEZAS        IMPORTE"
                      BREAK
          END SELECT
          CALL MISCwrite_tot
          common:csr_string =  \
          "   ----------------------------------------------------------"
          CALL MISCwrite_tot
          subtotal = 0
          cant = 0
          DO
             IF (cant > IDX_TOTAL) THEN
                BREAK
             END IF
             IF (pantalla_impreso == "P") THEN
                i = 0
             END IF
             IF ((((ciclo == 1) && (opera_vect[cant] == "+"))  || \
                  ((ciclo == 2) && (opera_vect[cant] == "-"))) || \
                  ((ciclo == 3) && (opera_vect[cant] == "N"))) THEN
                  IF (suma_cant_vec[cant] != 0) THEN
                      IF ((suma_monto_vec[cant].NUMCHARS == 0) || \
                          (suma_monto_vec[cant] == 0.0)) THEN
                          FPRINT common:csr_string, \
                          "   %-20.20s       %3s     %4s              0,00",desc_vec[cant], \
                          suma_cant_vec[cant],suma_piezas_vec[cant]
                      ELSE
                          FPRINT common:csr_string,"   %-20.20s       %3s     %4s %17.17e", \
                          desc_vec[cant],suma_cant_vec[cant],suma_piezas_vec[cant],suma_monto_vec[cant]
                          subtotal = subtotal + suma_monto_vec[cant]
                      END IF
                      CALL MISCwrite_tot
                  END IF
             END IF
             cant = cant + 1
          LOOP
          FPRINT common:csr_string, \
          "   TOTAL                                   %17.17e",subtotal
          CALL MISCwrite_tot
          common:csr_string = "         "
          CALL MISCwrite_tot
          ciclo = ciclo + 1
       LOOP
       /*
       if (mone == 0) || (mone == 2) then
          FPRINT common:csr_string,"   EFECTIVO EN CAJA:            %13.13e", \
          suma_monto_vec[0][mone]
       else          
          FPRINT common:csr_string,"   TOTAL:                       %13.13e", \
          suma_monto_vec[0]          
       endif
       */
       CALL MISCwrite_tot
       common:csr_string = "         "
       CALL MISCwrite_tot
       /*
       FPRINT common:csr_string,"   TOTAL CAJAS QUE NO OPERARON: %13.13e", \
       monto_no_oper[mone]
       CALL MISCwrite_tot
       */
       common:csr_string = "         "
       CALL MISCwrite_tot
       common:csr_string = "         "
       CALL MISCwrite_tot
    endif
    
    
    CALL siaf:MISCaper_mp_op(SUCURSAL)
     

    if (siaf:pantalla_impreso == "I") then
        while (siaf:i < 59) 
              let common:csr_string = "    "
              call MISCwrite_tot
        end while              
        fprint common:csr_string "                                                     Cantidad de Hojas : %s" siaf:indica_calcu
        call MISCwrite_tot
    else
       common:csr_string = "         "
       CALL MISCwrite_tot
       common:csr_string = "         "
       CALL MISCwrite_tot    
    End if                  
End Sub    

/*******/
