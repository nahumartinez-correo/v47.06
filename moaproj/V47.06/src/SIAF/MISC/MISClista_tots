/****o* Pendientes de agrupación/OFB:siaf:MISClista_tots
* NOMBRE
*   OFB:siaf:MISClista_tots
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafMISC.h"

SUB siaf:MISClista_tots(impresora)
    LOCAL ciclo         LIKE i
    LOCAL subtotal      LIKE aux_suma_monto
    LOCAL mone          LIKE cant        
    LOCAL loc_imp_total LIKE aux_suma_monto
    
    mone  = 0
    let i = 0
    /*
    do
       if (mone > IDX_MONEDA) then
          break
       endif
    */
       if (desc_moneda_vec[mone].numchars != 0) then
          let desc_moneda = desc_moneda_vec[mone]
          IF (impresora == "laser") THEN
             CALL MISCtots_encabez
          ELSE
             CALL MISCtots_encabe2
          END IF
          /*
          if (mone == 0) || (mone == 2) then
             FPRINT common:csr_string,"EFECTIVO INICIAL: %13.13e",suma_monto_vec[9][mone]
          else
             FPRINT common:csr_string,"TOTAL INICIAL:    %13.13e",suma_monto_vec[9][mone]
          endif
          call MISCwrite_tot
          */
          common:csr_string = "         "
          CALL MISCwrite_tot
          ciclo = 1
          DO
             IF (ciclo > 3) THEN
                BREAK
             END IF
             common:csr_string = "---------------------------------------------------"
             CALL MISCwrite_tot
             SELECT (ciclo)
                    CASE 1
          	            common:csr_string = "ENTRADAS           CANT.  PIEZAS      IMPORTE"
          		        BREAK
        	        CASE 2
          		        common:csr_string = "SALIDAS            CANT.  PIEZAS      IMPORTE"
          		        BREAK
        	        CASE 3
          		        common:csr_string = "NO AFECTA EFEC.    CANT.  PIEZAS      IMPORTE"
          		        BREAK
      	     END SELECT
      	     CALL MISCwrite_tot
      	     common:csr_string = "---------------------------------------------------"
      	     CALL MISCwrite_tot
      	     subtotal = 0
      	     cant = 0
      	     DO
        	    IF (cant > IDX_TOTAL) THEN
          	        BREAK
        	    END IF
        	    IF ((impresora == "ticketera") || (impresora == "")) THEN
          	        i = 0
        	    END IF
        	    IF ((((ciclo == 1) && (opera_vect[cant] == "+"))  || \
        	         ((ciclo == 2) && (opera_vect[cant] == "-"))) || \
        	         ((ciclo == 3) && (opera_vect[cant] == "N"))) THEN
          	        IF (suma_cant_vec[cant] != 0) THEN
            	        IF ((suma_monto_vec[cant].NUMCHARS == 0) || (suma_monto_vec[cant] == 0.0)) THEN
              		        FPRINT common:csr_string,"%-17.17s  %3s    %4s           0,00", \
			                desc_vec[cant],suma_cant_vec[cant],suma_piezas_vec[cant]
            	        ELSE
              		        FPRINT common:csr_string,"%-17.17s  %3s    %4s  %13.13e", \
			                desc_vec[cant],suma_cant_vec[cant],suma_piezas_vec[cant],suma_monto_vec[cant]
              		        subtotal = subtotal + suma_monto_vec[cant]
            	        END IF
            	        CALL MISCwrite_tot
          	        END IF
        	    END IF
        	    cant = cant + 1
      	     LOOP
      	     FPRINT common:csr_string,"TOTAL                           %13.13e",subtotal
      	     CALL MISCwrite_tot
      	     common:csr_string = "         "
      	     CALL MISCwrite_tot
      	     ciclo = ciclo + 1
    	  LOOP
          /* Aca debo asignar el efvo de cada moneda */
          /*
    	  if (mone == 0) || (mone == 2) then
             FPRINT common:csr_string,"EFECTIVO EN CAJA:               %13.13e",suma_monto_vec[0][mone]
    	  else    	  
            FPRINT common:csr_string,"TOTAL:                          %13.13e",suma_monto_vec[0]    	  
    	  endif
    	  */
    	  
    	      	         	     
    	  /*Obtener tipo de moneda*/
    	  CALL post:CDSobtener_mon_tipo(mone)
    	  /*Calcular el importe total de los pases pendientes con op origen*/    	  
	      if (post:adt_mon_tipo == "CHEQ")
             CALL tes:CDSpases_pend_cheq(op:op_branch_id, op:op_operator_id, mone, "N")
          else
             CALL tes:CDSpases_pend(op:op_branch_id, op:op_operator_id, mone, "N")
          end if
          loc_imp_total = suma_monto_vec[0]+siaf:importe
          /*
      	  CALL MISCwrite_tot
      	  common:csr_string = "         "             
          FPRINT common:csr_string,"TOTAL EN PASES:                 %13.13e",siaf:importe
      	  CALL MISCwrite_tot
      	  common:csr_string = "         "      	  
      	  FPRINT common:csr_string,"TOTAL FISICO:                   %13.13e",loc_imp_total
    	  */
    	  
    	  CALL MISCwrite_tot
    	  common:csr_string = "         "
    	  CALL MISCwrite_tot
    	  common:csr_string = "         "
    	  CALL MISCwrite_tot
       endif
     ;  mone = mone + 1
    /*loop*/
    CALL siaf:MISCaper_mp_op(OPERADOR_LIST)
    
END SUB

/*******/
