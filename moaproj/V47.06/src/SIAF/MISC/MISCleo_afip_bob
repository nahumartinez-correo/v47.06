/****o* Pendientes de agrupación/OFB:siaf:MISCleo_afip_bob
* NOMBRE
*   OFB:siaf:MISCleo_afip_bob
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafMISC.h"

Sub siaf:MISCleo_afip_bob
local LocalInterfaze like siaf:afip_interfaze
;local LocalInterfaze_tmp like siaf:afip_interfaze
local LPrimero like siaf:afip_interfaze
local LSegundo like siaf:afip_interfaze      
local LCaracterCR like common:csr_string
local LocalRetVal like lib:err_retval
local LocalIndice like post:itemcheck
local LHastaPrimero like post:itemcheck
local LHastaSegundo like post:itemcheck

   call post:MISCleo_datos_bob
   // Limpio los Datos antes de obtenerlos
   Call siaf:MISCclear_afip_bob
   // Tomo los Datos que me deja el BoB
   DLL MOSAIC_get_variable ("comprobante", siaf:afip_ticket, 2048)
   DLL MOSAIC_get_variable ("interfaz", siaf:afip_interfaze, 32000)
   DLL MOSAIC_get_variable ("nro_transaccion", common:csr_string, 15)
   DLL MOSAIC_get_variable ("valida_doc", post:sf1_comprobante, 2048)
   ;DLL MOSAIC_get_variable ("codigo_de_barras", post:sf1_codbarras, 60)
   ;DLL MOSAIC_get_variable ("importe", serv_importe, 15)
   ;DLL MOSAIC_get_variable ("fecha_vencimiento", post:sf1_fec_vto, 8)

   let siaf:serv_importe = post:sf1_importe
   
   call csr:trimfield common:csr_string
   let FLD:siaf:nro_comprobante = common:csr_string

   let LocalInterfaze = siaf:afip_interfaze
   let LocalRetVal = 0
   while (LocalRetVal == 0)
        call csr:str_search(LocalInterfaze,"\n",LocalIndice)
        let LocalRetVal = retval
        if (LocalRetVal == 0) then
            LHastaPrimero = LocalIndice
            LHastaSegundo = LocalInterfaze.numchars
            LocalIndice = LocalIndice + 1
            
            ;SMC parte de la cadena antes del <ENTER>
            LPrimero = substr(LocalInterfaze,0,LHastaPrimero)
            ;SMC parte de la cadena despues del <ENTER>
            LSegundo = substr(LocalInterfaze,LocalIndice ,LHastaSegundo)

            ;SMC junto las dos partes, reemplazando el <ENTER> por "\n"
            LCaracterCR = "\\n"
            ;fprint LocalInterfaze "%s\\n%s" LPrimero LSegundo

            call csr:StrConcat(LPrimero,LCaracterCR,LocalInterfaze)
            if (retval < 0) then
                return -1
            endif
            call csr:StrConcat(LocalInterfaze,LSegundo,LocalInterfaze)
            if (retval < 0) then
                return -1
            endif
        endif
   end while
   let siaf:afip_interfaze = LocalInterfaze

END SUB

/*******/
