/****o* Pendientes de agrupación/OFB:siaf:MISCcod_unico_rev_dv
* NOMBRE
*   OFB:siaf:MISCcod_unico_rev_dv
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafMISC.h"

SUB siaf:MISCcod_unico_rev_dv    
    LOCAL indice     LIKE siaf:i
    LOCAL posicion   LIKE siaf:idx
    LOCAL digito     LIKE siaf:idx
    LOCAL digito7    LIKE siaf:idx
    LOCAL digitoV    LIKE siaf:idx
    LOCAL producto   LIKE siaf:idx
    LOCAL suma       LIKE siaf:idx
    LOCAL entero     LIKE siaf:idx

    /* Validacion digito verificador del codigo unico de revista (F152 Afip).
    
       Procedimiento:
       1)La cadena de entrada es un serie numerica de 7 digitos. Si el numero tiene
         menos digitos,se completa con ceros a izquierda.
       2)A cada digito de la cadena,desde la primera a la sexta posicion,comenzando
         de izquierda a derecha,se lo va multiplicando con un numero de posicion (1 a 6).
         A cada producto se lo va sumarizando y a ese total se le calcula el modulo 10.
       3)Finalmente se comparara el digito obtenido del calculo contra el digito de la
         septima posicion.
    */     

    //completa ceros a izquierda.
    FPRINT siaf:afip_cod_unico_rev,"%07.7s",siaf:afip_cod_unico_rev

    //calcular total al que se le aplicara el modulo 10.
    posicion = 1    
    DO
      indice = posicion - 1
      digito = substr(siaf:afip_cod_unico_rev, indice, 1) //obtiene digito.
      IF (posicion == 7) THEN
      	  digito7 = digito //obtiene ultimo digito contra control.
      	  BREAK
      END IF
      producto = digito * posicion  //producto digito * la posicion.
      suma = suma + producto  //sumariza el producto.
      posicion = posicion + 1
    LOOP

    //obtiene Modulo 10 de la suma total.
    entero = suma / 10
    digitoV = suma - (entero * 10)

    //compara digito verificador contra el septimo digito.
    IF (digitoV != digito7) THEN
    	//error en digito verificador
    	RETURN (-2)
    END IF
END SUB

/*******/
