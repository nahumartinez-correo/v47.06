/****o* Pendientes de agrupación/OFB:siaf:SVALlimite_sup_ev
* NOMBRE
*   OFB:siaf:SVALlimite_sup_ev
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafSVAL.h"

SUB siaf:SVALlimite_sup_ev
    local total_pases like siaf:importe
    
    let total_pases = 0
    tes:importe_tot_ev = 0
    if ((drv:dt_app != 4) && !testflag(tlr:tran_flags,correction))then

         post:adt_limsupev_suc = op:op_branch_id
         post:adt_limsupev_op = op:op_operator_id
         post:adt_limsupev_especie = tes:espv_cod
         call post:CDSlimsupev_load
         if (retval < 0) then 
                return (0)
         end if
         /* Calculo el total en pases que tiene el operador como operador 
         origen del movimiento */
         call CDStotal_en_pases_ev("N",op:op_operator_id,tes:espv_cod,total_pases)
         SELECT (afecta_efectivo)
                 CASE "+"
                       CALL tes:MISCsumar_monto_ev
                       IF ((tes:importe_tot_ev + total_pases + siaf:importe) > post:adt_limsupev_impmax) THEN
   	                   call MISClim_espv_ovr_set // setea flags de supervision
                       END IF
                       break 
                 CASE "-"
                       CALL tes:MISCsumar_monto_ev
                       IF ((tes:importe_tot_ev + total_pases - siaf:importe) > post:adt_limsupev_impmax ) THEN
   	                   call MISClim_espv_ovr_set // setea flags de supervision
                       END IF
                       BREAK
         END SELECT
    END  IF
    RETURN (0)
END SUB

/*******/
