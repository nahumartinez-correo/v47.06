/****o* Pendientes de agrupación/OFB:siaf:CDSbusca_desc_list
* NOMBRE
*   OFB:siaf:CDSbusca_desc_list
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafCDS.h"

SUB siaf:CDSbusca_desc_list(cuales)
    local ret like lib:err_retval
    local cant_ch like siaf:cant
    local cant_ch2 like siaf:cant
    local cod like siaf:adt_mot_codigo
    local mod like adt_mot_submodulo
    local submod like adt_mot_submodulo
    local desc like adt_mot_desc
    local encontro like idx

    let encontro = 0
    if (cuales == "T") then
       CDS SELECT FROM DSC:adt_motiv_table BECOMES DSC:adt_motiv_context
    ELSE
      IF (cuales == "A")
    	CDS SELECT FROM DSC:adt_motiv_table BECOMES DSC:adt_motiv_context WHERE \
    	(adt_mot_modulo == FLD:adt_mot_modulo ) && \
   	(adt_mot_submodulo == FLD:adt_mot_submodulo)
      endif
    endif
    CDS FINDFIRST DSC:adt_motiv_context LOCK
    lib:err_retval = CDSRETVAL
    IF (lib:err_retval < 0) THEN
      RETURN (-2)
    END IF
    CALL CSR:f_sadroppl(DSC:motivos)
    CALL CSR:f_sanewpl(DSC:motivos ,PIC:Motivos)
    DO
      CDS EXTRACT DSC:adt_motiv_context siaf:adt_mot_codigo into cod \
      siaf:adt_mot_modulo into mod siaf:adt_mot_submodulo into submod \
      adt_mot_desc into desc
      let cant_ch = motivo_desc.numchars
      let cant_ch2 = desc.numchars
      call busca_chars(siaf:motivo_desc,desc,cant_ch,cant_ch2)
      if (retval == 0) then
        fprint common:csr_string, "%-5s %2s %5s %-30s",cod,mod,submod,desc
        CALL CSR:f_saaddpl(DSC:motivos,common:csr_string)
        let encontro = 1
      END IF
      CDS FINDNEXT DSC:adt_motiv_context NOLOCK
      IF (CDSRETVAL < 0) THEN
        BREAK
      END IF
    LOOP
    if (encontro == 0) then
	errmsg lst:common:errmsg_list, "Descripción no encontrada"
        return (-2)
    endif
    CALL CSR:f_sadopl(DSC:motivos,common:csr_string)
    ret = RETVAL
    CALL CSR:f_sadroppl(DSC:motivos)
    if (ret >= 0) then
	let adt_mot_codigo = substr(common:csr_string,0,5)
        call csr:trimfield(adt_mot_codigo)
        let adt_mot_modulo = substr(common:csr_string,6,2)
        let adt_mot_submodulo = substr(common:csr_string,9,5)
    endif
    RETURN (ret)
END SUB

/*******/
