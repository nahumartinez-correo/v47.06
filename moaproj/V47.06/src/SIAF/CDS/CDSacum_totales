/****o* Pendientes de agrupación/OFB:siaf:CDSacum_totales
* NOMBRE
*   OFB:siaf:CDSacum_totales
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafCDS.h"

SUB siaf:CDSacum_totales(Lidx)
	local indice like siaf:i
	
	indice = 0
	select (Lidx)
		Case EFECTIVO        // tefectivo_vec
			While (indice < MP_ARRAY)
			    monto_efec_vec[indice] = monto_efec_vec[indice] + auximp_vec[indice]
			    cant_efec_vec[indice] = cant_efec_vec[indice] + auxcant_vec[indice]
			    indice = indice + 1
			EndWhile
			Break
		Case EFECTIVO_INICIAL         // tefecinic_vec
			While (indice < MP_ARRAY)
			    monto_inic_vec[indice] = monto_inic_vec[indice] + auximp_vec[indice]
			    cant_inic_vec[indice] = cant_inic_vec[indice] + auxcant_vec[indice]
			    indice = indice + 1
			EndWhile				         
		Break
		Case SAL_CAJA          // tsalcaja_vec
			While (indice < MP_ARRAY)
			    aux1imp_vec[indice] = aux1imp_vec[indice] + auximp_vec[indice]
			    aux1cant_vec[indice] = aux1cant_vec[indice] + auxcant_vec[indice]
			    indice = indice + 1
			EndWhile				         
		Break
		Case ENTRADA_CAJA            //tentcaja_vec
			While (indice < MP_ARRAY)
			    aux2imp_vec[indice] = aux2imp_vec[indice] + auximp_vec[indice]
			    aux2cant_vec[indice] = aux2cant_vec[indice] + auxcant_vec[indice]
			    indice = indice + 1
			EndWhile				         				         
		Break
		Case EFVO_SAL           //tefvosal_vec
			While (indice < MP_ARRAY)
			    aux3imp_vec[indice] = aux3imp_vec[indice] + auximp_vec[indice]				                
			    indice = indice + 1
			EndWhile				         
		Break
		Case EFVO_ENT      //teefvoent_vec
			While (indice < MP_ARRAY)
			    aux4imp_vec[indice] = aux4imp_vec[indice] + auximp_vec[indice]				                
			    indice = indice + 1
			EndWhile				         				         
		Break
		Case ENT_BASE           //entbase
			While (indice < MP_ARRAY)
			    aux5imp_vec[indice] = aux5imp_vec[indice] + auximp_vec[indice]				                
			    indice = indice + 1
			EndWhile				         				         
		Break
		Case SAL_BASE          //salbase
			While (indice < MP_ARRAY)
			    aux6imp_vec[indice] = aux6imp_vec[indice] + auximp_vec[indice]				                
			    indice = indice + 1
			EndWhile				         				         
		Break				            				            
		Case TX_CORREO					    
			indice = 0
			While (indice < post:total_correo) 
			    suma_monto_vec[indice]  = suma_monto_vec[indice]  + monto_vec[indice]
			    suma_cant_vec[indice]   = suma_cant_vec[indice]   + cant_vec[indice]
			    suma_piezas_vec[indice] = suma_piezas_vec[indice] + cantpiezas_vec[indice]
			    suma_sinimp_vec[indice] = suma_sinimp_vec[indice] + sinimp_vec[indice]
			    suma_pminor_vec[indice] = suma_pminor_vec[indice] + pminor_vec[indice]					     
			    suma_pcm_vec[indice] = suma_pcm_vec[indice] + pcm_vec[indice]					     
			    suma_pcmCC_vec[indice] = suma_pcmCC_vec[indice] + pcmCC_vec[indice]					     
			    suma_pcmDf_vec[indice] = suma_pcmDf_vec[indice] + pcmDf_vec[indice]					     

			    indice = indice + 1
			EndWhile
		Break
		Case USO_INT
			indice = 0
			;singlestep on
			While (indice < IDX_USOINT)
			    suma_monto2_vec[indice]  = suma_monto2_vec[indice]  + monto_vec[indice]
			    suma_cant2_vec[indice]   = suma_cant2_vec[indice]   + cant_vec[indice]
			    suma_piezas2_vec[indice] = suma_piezas2_vec[indice] + cantpiezas_vec[indice]
			    suma_sinimp2_vec[indice] = suma_sinimp2_vec[indice] + sinimp_vec[indice]
			    suma_pminor2_vec[indice] = suma_pminor2_vec[indice] + pminor_vec[indice]					     
			    suma_pcm2_vec[indice] = suma_pcm2_vec[indice] + pcm_vec[indice]					     
			    suma_pcmCC2_vec[indice] = suma_pcmCC2_vec[indice] + pcmCC_vec[indice]					     
			    suma_pcmDf2_vec[indice] = suma_pcmDf2_vec[indice] + pcmDf_vec[indice]					     

			    indice = indice + 1
			EndWhile
		Break		
	End Select
END SUB

/*******/
