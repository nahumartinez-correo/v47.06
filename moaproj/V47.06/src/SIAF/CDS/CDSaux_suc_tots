/****o* Pendientes de agrupación/OFB:siaf:CDSaux_suc_tots
* NOMBRE
*   OFB:siaf:CDSaux_suc_tots
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafCDS.h"

SUB siaf:CDSaux_suc_tots  //siaf:CDSsuc_tots    
	local indice like siaf:i
/**************************************************************************
Para hacer este listado se lee de la tabla de rendicion, si los operadores
tienen fecha del dia se acumula los totales de cada transaccion por moneda.
Si el operador no tiene fecha del dia solo se acumula en monto_no_oper el
efectivo inicial mas el efectivo que le haya quedado. Luego en el listado se
imprimirá el total de la sucursal y el total de los cajero que no operaron.
***************************************************************************/
	
	CALL CSR:cleararray(suma_monto_vec)
	CALL CSR:cleararray(suma_cant_vec)
	CALL CSR:cleararray(suma_piezas_vec)
	CALL CSR:cleararray(suma_sinimp_vec)
	CALL CSR:cleararray(suma_pminor_vec)
	CALL CSR:cleararray(suma_pcm_vec)
	CALL CSR:cleararray(suma_pcmCC_vec)
	CALL CSR:cleararray(suma_pcmDf_vec)
	
	CALL CSR:cleararray(suma_monto2_vec)
	CALL CSR:cleararray(suma_cant2_vec)
	CALL CSR:cleararray(suma_piezas2_vec)
	CALL CSR:cleararray(suma_sinimp2_vec)
	CALL CSR:cleararray(suma_pminor2_vec)
	CALL CSR:cleararray(suma_pcm2_vec)
	CALL CSR:cleararray(suma_pcmCC2_vec)
	CALL CSR:cleararray(suma_pcmDf2_vec)

    call csr:cleararray(aux1imp_vec)
    call csr:cleararray(aux2imp_vec)
    call csr:cleararray(aux3imp_vec)
    call csr:cleararray(aux4imp_vec)
    call csr:cleararray(aux5imp_vec)
    call csr:cleararray(aux6imp_vec)
    call csr:cleararray(aux1cant_vec)
    call csr:cleararray(aux2cant_vec)
    call csr:cleararray(monto_no_oper_vec)
    call csr:cleararray(monto_efec_vec)
    call csr:cleararray(monto_inic_vec)
     	
    clearfield monto_no_oper

    // busco el registro de totales auxiliares
    CDS SELECT FROM DSC:tlr:TABtots_aux BECOMES DSC:tlr:CONtots_write_aux

    CDS FINDFIRST DSC:tlr:CONtots_write_aux LOCK
    lib:err_retval = cdsretval
    //call lib:MISCcds_find_err
    if (lib:err_retval == 0) then
		// Me fijo si tiene la fecha del dia, porque si no tiene la fecha
		// de rendicion del dia lo tengo que acumular en cajas que no
		// operaron
		DO
			if (lib:err_retval != 0) then
				break
			end if
			idx = 0
			DO
				CALL CSR:cleararray(auximp_vec)
				CALL CSR:cleararray(auxcant_vec)
				call CSR:cleararray(monto_vec)
				call CSR:cleararray(cant_vec)
				call CSR:cleararray(cantpiezas_vec) // Piezas
				call CSR:cleararray(sinimp_vec)  //importe sin iva
				call CSR:cleararray(pminor_vec) //piezas minoristas
				call CSR:cleararray(pcm_vec) //piezas cliente medio
				call CSR:cleararray(pcmCC_vec) //piezas cliente medio CC
				call CSR:cleararray(pcmDf_vec) //piezas cliente medio Dif

	        
				CALL CDSextract_aux_tots(idx)
				CALL lib:MISCcds_find_err
				IF (RETVAL != 0) THEN
				    //RETURN
				    break
				END IF
						
				call siaf:CDSacum_totales(idx)
			
				idx = idx + 1
				IF (idx > IDX_TOTAL) THEN
					BREAK
				END IF
			LOOP
			CDS FINDNEXT DSC:tlr:CONtots_write_aux LOCK
			lib:err_retval = cdsretval
		LOOP
		;end if // resultado del findfirst del registro de totales
    else
		return (-2)
    end if // resultado del findfirst del registro de totales

    FYIMSG CLEAR
    return (0)
END SUB

/*******/
