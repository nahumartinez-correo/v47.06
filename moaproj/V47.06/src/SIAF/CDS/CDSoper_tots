/****o* Pendientes de agrupación/OFB:siaf:CDSoper_tots
* NOMBRE
*   OFB:siaf:CDSoper_tots
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafCDS.h"

SUB siaf:CDSoper_tots
    local x         LIKE i
    local sumamefec LIKE textrdia_ca_vec
    local sumaminic LIKE textrdia_ca_vec
    local sumacefec LIKE cextrdia_ca_vec
    local sumacinic LIKE cextrdia_ca_vec
    
    local sumatsalcaja LIKE textrdia_ca_vec
    local sumacsalcaja LIKE cextrdia_ca_vec
    local sumatentcaja LIKE textrdia_ca_vec
    local sumacentcaja LIKE cextrdia_ca_vec

    local sumatefsal LIKE textrdia_ca_vec
    local sumatefent LIKE textrdia_ca_vec
    local sumatentb  LIKE textrdia_ca_vec
    local sumatsalb  LIKE textrdia_ca_vec
    local indice like siaf:i

        
    CALL CSR:cleararray(suma_monto_vec)
    CALL CSR:cleararray(suma_cant_vec)
    CALL CSR:cleararray(suma_piezas_vec)
    CALL CSR:cleararray(suma_sinimp_vec)
    CALL CSR:cleararray(suma_pminor_vec)

    CALL CSR:cleararray(monto_efec_vec)
    CALL CSR:cleararray(cant_efec_vec) 
    CALL CSR:cleararray(monto_inic_vec)    
    CALL CSR:cleararray(cant_inic_vec)
    
    CALL CSR:cleararray(aux1imp_vec)
    CALL CSR:cleararray(aux2imp_vec)
    CALL CSR:cleararray(aux3imp_vec)
    CALL CSR:cleararray(aux4imp_vec)
    CALL CSR:cleararray(aux5imp_vec)
    CALL CSR:cleararray(aux6imp_vec)
    CALL CSR:cleararray(aux1cant_vec)
    CALL CSR:cleararray(aux2cant_vec)
        
  /* No olvidar de hacer esto con pesos, dolares,   
	cantidades para ambos 
    suma_cant_pes[0] = tefectivo_pes + tefec_inic_pes */

    sumamefec = 0
    sumaminic = 0
    sumacefec = 0
    sumacinic = 0
        
    sumatsalcaja = 0
    sumacsalcaja = 0
    sumatentcaja = 0
    sumacentcaja = 0
        
    sumatefsal = 0
    sumatefent = 0
    sumatentb  = 0
    sumatsalb  = 0
    
    let x = 0		
	while (x <= IDX_MONEDA)	          
          let monto_efec_vec[x] = tefectivo_vec[x] //+ tefec_inic_vec[x]
          let cant_efec_vec[x]  = cefectivo_vec[x] //+ cefec_inic_vec[x]
          
          let monto_inic_vec[x] = tefec_inic_vec[x]          
          let cant_inic_vec[x]  = cefec_inic_vec[x]
          
          let aux1imp_vec[x]    = tsalcaja_vec[x]          
          let aux1cant_vec[x]   = csalcaja_vec[x]
          
          let aux2imp_vec[x]    = tentcaja_vec[x]
          let aux2cant_vec[x]   = centcaja_vec[x]
                    
          let aux3imp_vec[x]    = tefvosal_vec[x]
          
          let aux4imp_vec[x]    = tefvoent_vec[x]
                    
          let aux5imp_vec[x]    = tentbase_vec[x]
          
          let aux6imp_vec[x]    = tsalbase_vec[x]          
          
          sumamefec = sumamefec + monto_efec_vec[x]
          sumacefec = sumacefec + cant_efec_vec[x]
          sumaminic = sumaminic + monto_inic_vec[x]          
          sumacinic = sumacinic + cant_inic_vec[x]          
                    
          sumatsalcaja = sumatsalcaja + tsalcaja_vec[x]
          sumacsalcaja = sumacsalcaja + csalcaja_vec[x]
          sumatentcaja = sumatentcaja + tentcaja_vec[x]
          sumacentcaja = sumacentcaja + centcaja_vec[x]
          
          sumatefsal = sumatefsal + aux3imp_vec[x]
          sumatefent = sumatefent + aux4imp_vec[x]
          sumatentb  = sumatentb  + aux5imp_vec[x]
          sumatsalb  = sumatsalb  + aux6imp_vec[x]
          
          x = x + 1          
    endwhile
          /* VER !!!
    let suma_monto_vec[0]   = sumamefec
	let suma_monto_vec[9]   = sumaminic
	let suma_monto_vec[10]  = sumatsalcaja
	let suma_monto_vec[11]  = sumatentcaja
    
    let suma_monto_vec[154] = sumatefsal
    let suma_monto_vec[155] = sumatefent
    let suma_monto_vec[156] = sumatentb
    let suma_monto_vec[157] = sumatsalb
    
    let suma_cant_vec[0]   = sumacefec
	let suma_cant_vec[9]   = sumacinic
	let suma_cant_vec[10]  = sumacsalcaja
	let suma_cant_vec[11]  = sumacentcaja
 
 	*/
 	
 	/* Cargo el array genérico */
 	indice = 0
 	while (indice < post:total_correo) then
 		 suma_cant_vec[indice] = cant_tx_vec[indice]
    	 suma_piezas_vec[indice] = piezas_tx_vec[indice]
    	 suma_sinimp_vec[indice] = sinimp_tx_vec[indice]
    	 suma_pminor_vec[indice] = pminor_tx_vec[indice]
    	 suma_pcm_vec[indice] = pcm_tx_vec[indice]
    	 suma_pcmCC_vec[indice] = pcmCC_tx_vec[indice]
    	 suma_pcmDf_vec[indice] = pcmDf_tx_vec[indice]

    	 suma_monto_vec[indice] = total_tx_vec[indice]
    	 indice = indice + 1	
    EndWhile

 	/* Cargo el array interno */
 	indice = 0
 	while (indice < IDX_USOINT) then
 		 suma_cant2_vec[indice] = cant_usoint_vec[indice]
    	 suma_piezas2_vec[indice] = piezas_usoint_vec[indice]
    	 suma_sinimp2_vec[indice] = sinimp_usoint_vec[indice]
    	 suma_pminor2_vec[indice] = pminor_usoint_vec[indice]
    	 suma_pcm2_vec[indice] = pcm_usoint_vec[indice]
    	 suma_pcmCC2_vec[indice] = pcmCC_usoint_vec[indice]
    	 suma_pcmDf2_vec[indice] = pcmDf_usoint_vec[indice]
    	 
    	 suma_monto2_vec[indice] = total_usoint_vec[indice]
    	 indice = indice + 1	
    EndWhile
    
END SUB

/*******/
