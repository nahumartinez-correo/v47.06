/****o* Pendientes de agrupación/OFB:siaf:CDSrecup_caidas_suc
* NOMBRE
*   OFB:siaf:CDSrecup_caidas_suc
* DESCRIPCION
*	CDS, que busca transacciones caidas en Vuelo de a una por vez 	    
*   para toda la sucursal.							      			
*   Busca si hay operaciones en el jnl_caidas con jnl_status > 100,  
*   sin distincion de operador.				                        
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafCDS.h"

SUB siaf:CDSrecup_caidas_suc

	// Asigno Sucursal para que se efectue la busqueda.
	op:op_branch_id = common:sucursal_activa 

	// Asigno Fecha para que se efectue la busqueda.
	tlr:bus_date = common:system_date 

	call  csr:proc_list(F_CPTODUP, LST:tlr:JNLtran_header)

	KEYDEF PUSH
	KEYDEF CLEAR
	common:trap_reset = OFB:lib:KEYSreset_lockout

	// Buscar TRAN caidas en vuelo cuyo estado sea > a 100 y 
	// < a 111. 	
	cds select from dsc:giros:jnl_caidas becomes dsc:giros:jnl_caidas_ctx where \
		tlr:jnl_branch == op:op_branch_id && \
		tlr:jnl_status > HOST_REJECTED  && \
		tlr:jnl_status < RECH_REV_AUTO descending
	cds findfirst DSC:giros:jnl_caidas_ctx lock
	while (cdsretval == 0)
		
		cds extract dsc:giros:jnl_caidas_ctx all
		
		cds select from DSC:tlr:TABjnl becomes DSC:tlr:jnl_context where \
			tlr:jnl_branch == tlr:jnl_branch && \
			tlr:jnl_operator == tlr:jnl_operator && \
			tlr:jnl_date == tlr:jnl_date && \
			tlr:jnl_time == tlr:jnl_time && \
			tlr:jnl_bus_date == tlr:jnl_bus_date && \
			tlr:jnl_sequence == tlr:jnl_sequence && \
			tlr:jnl_status == tlr:jnl_status
		
		cds findfirst DSC:tlr:jnl_context nolock
		if (cdsretval == 0)
			/*  EXTRACT DE TRAN DIRECTA.
			EL flag tlr:jnl_tran_flags se extrae en un flag
			auxiliar, para saber si es una reversa manual
			o si es una transaccion normal.		     */
	
			cds extract dsc:tlr:jnl_context \
				tlr:jnl_operator_siaf \
				tlr:jnl_state_flags \
				tlr:jnl_tran_flags \
				tlr:jnl_sequence_corr \
				tlr:jnl_supervisor \
				tlr:jnl_tenk_status \
				tlr:jnl_tran_name into tlr:tran_mnemonic \
				tlr:jnl_dia_ult_act \
				tlr:jnl_hora_ult_act \
				common:tran_appl_no \
				common:tran_item_no \
				tlr:jnl_payget_start into tlr:cctl_payget_start \
				tlr:jnl_payget_end into tlr:cctl_payget_end \
				hcomm:INDhost_sndrt \
				hcomm:INDhost_rcvrt  \
				hcomm:host_tran_id  \
				hcomm:reason_code  \
				hcomm:trancode  \
				tlr:INDtran_name \
				tlr:INDdcol_scrn \
				tlr:INDjnl_append \
				tlr:INDtots_append \
				tlr:INDdocs_list \
				tlr:INDlink_test \
				tlr:INDlink_tran \
				siaf:mensaje \
				lib:calc_tape \
				post:PresNro \
				post:adt_Modo \
				tlr:jnl_op_login_id \
				common:VersionCorreo \
				post:adt_PreDNroTrn into post:PreDNroTrn
				
			cds extract dsc:tlr:jnl_context \
				tlr:tran_mnemonic \
				tlr:tdrv_pret_rtn

			cds extract dsc:tlr:jnl_context \
				tlr:jnl_account_1 \
				tlr:jnl_amount_1 into siaf:importe \
				siaf:moneda \
				post:medio_pago_desc \
				siaf:jnl_codigo_siaf \
				siaf:jnl_sucursal \
				siaf:jnl_journal_host \
				siaf:jnl_window_node into op:op_node_id\
				siaf:fecha \
				siaf:siaf_flags \
				siaf:modalidad \
				siaf:hora_reentry \
				siaf:codigo_bull \
				siaf:INDhost_snd_fv \
				siaf:nombre_transac \
				siaf:codigo_siaf \
				post:jnl_flia_tran \
				post:jnl_br_CUN \
				post:jnl_br_ctpTT \
				post:jnl_opTT \
				siaf:tiene_reverso \
				siaf:posible_off \
				siaf:restr_otra_casa \
				siaf:linea_validacion \
				siaf:exhibe_pantalla \
				siaf:imprime_comprobante \
				siaf:multiple \
				ovr:ovr_sup_login \
				drv:jnl_dt_app \
				siaf:jnl_tran_modpresu \
				post:jnl_cli_tipo \
				post:nro_autorizac \
				post:jnl_fliarep \
				post:jnl_unicod \
				post:jnl_unicod_desc
				
			cds extract dsc:tlr:jnl_context \
				giros:codigo_procesamiento \
				giros:flia_giro_fld \
				giros:usr_call_center \
				post:adt_codseq_nro \
				siaf:importe \
				giros:hora_viaje \
				giros:dia_viaje \
				giros:clave_hdr_prev \
				giros:Serie_fld \
				giros:NroGiro_fld \
				giros:digito_fld \
				giros:nuevo_num_giro_fld \
				giros:nuevo_dig_fld \
				giros:vieja_serie_fld \
				giros:viejo_num_giro_fld \
				giros:viejo_dig_fld

			if ( siaf:codigo_siaf == "72300")
				cds extract dsc:tlr:jnl_context \
				giros:clave_hdr_giros
			else
				cds extract dsc:tlr:jnl_context \
				giros:cons_nro_ctrol
				if (giros:flia_giro_fld == "I")
					cds extract dsc:tlr:jnl_context \
					giros:consulta
				endif
			end if
			
		     FYIMSG drv:fyimsg_list,\
		    "Proceso de Recuperacion de Transacciones Caidas en Vuelo..."
			
			CALL siaf:analiza_tran		
	
			if ( retval == TRAN_CAIDA_VUELO )
				siaf:tran_retval = retval
				cds endselect dsc:tlr:jnl_context
				break
			end if
	
		end if
		cds endselect dsc:tlr:jnl_context
		
		FPRINT tlr:jnl_status,"%.*d",hcomm:tran_status.LENGTH,hcomm:tran_status
		
		cds append DSC:giros:jnl_caidas_ctx	tlr:jnl_status 
		
		cds update DSC:giros:jnl_caidas_ctx	lock
	
		cds findnext DSC:giros:jnl_caidas_ctx lock
	end while
	cds endselect DSC:giros:jnl_caidas_ctx
	
	// Hay que limpiarlo para que no lo asigne en la apertura de sucursal 
	clearfield tlr:jnl_sequence_corr			
	
	call  csr:proc_list(F_CPFROMDUP, LST:tlr:JNLtran_header)
	
	FPRINT tlr:jnl_sequence,"%.*d",tlr:sequence.LENGTH,tlr:sequence //SECUENCIADOR DEL JOURNAL
	
	KEYDEF POP
				
	if ( siaf:tran_retval == TRAN_CAIDA_VUELO)
			// Para el caso de una transccion de firma invalida
			// donde se cayo la linea en la cancelacion.
		return TRAN_CAIDA_VUELO
	end if
	// Reseteo flag de TRAN  Caidas en Vuelo.
	resetflag tlr:controla_marca,mayor_cien
END SUB

/*******/
