/****o* Pendientes de agrupación/OFB:siaf:SENDmotivos_data
* NOMBRE
*   OFB:siaf:SENDmotivos_data
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   siaf:TRAN_motivos_data
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "siafSEND.h"

SUB siaf:SENDmotivos_data
    LOCAL l_tabla LIKE admin:tabla 
    LOCAL l_INDCamposTablas LIKE post:INDCamposTablas 

    //SMC Autorizo Modificaciones
    call post:MISCAutorizoModif("motivos")
    if (retval < 0) then
	   //cliente medio
	   call ABMmot_clear
	   call MISCdisable_chkMot
	   return (-2)
    endif

    drv:save_button = drv:last_button
    IF (TESTFLAG(admin:mode_flags,update)) THEN
      CALL CDSadt_motiv_save
      CALL drv:side_bar_disable
      RESETFLAG admin:mode_flags,update
      ;SMC journalizo Modificacion
      call post:MISCJournalTablas
    ELSE
   		IF (TESTFLAG(admin:mode_flags,delete)) THEN
        	RESETFLAG admin:mode_flags,delete
      		call MISCind_motivos
            ;SMC Modificacion para Testear por impactos antes de Borrar.
            ;    Si se detecta impacto, se pregunta si se desea imprimir el reporte
            call lib:MISCchk_impacto
            if (retval < 0) then
                return (retval)
            endif
        	CALL lib:adt_delete_verify
        	IF (RETVAL == 0) THEN
        	  	CALL drv:side_bar_disable
    	      	CALL CDSadt_motiv_del
	          	IF (RETVAL != 0) THEN
        	    	drv:button = drv:save_button
    	        	CALL drv:but_up_enable
	            	RETURN (-1)
          		ELSE
            		;SMC journalizo Modificacion
            		call post:MISCJournalTablas
            		CALL CSR:proc_list(170,LST:LISTmotivos_flds)
            		CALL CSR:proc_list(190,LST:LISTmotivos_flds)
            		CALL MISCdisable_combos
            		//cliente medio
            		CALL ABMmot_clear
            		CALL MISCdisable_chkMot
            		RETURN (-1)
          		END IF
        	END IF
		ELSE
        	IF (TESTFLAG(admin:mode_flags,imprimir)) THEN
          		RESETFLAG admin:mode_flags,imprimir
	          	/*
	          	adt_tabla_context = DSC:adt_motiv_context
	          	INDencab_lis = OFB:MISCencab_motivo
	          	INDselect_tabla = OFB:CDSadt_motiv_select
	          	INDpaso_str_tabla = OFB:MISCpaso_str_motivo
	          	; Imprime en dos lineas 
	          	INDpaso_str_tabla2 = ofb:MISCpaso_str_motivo2
	          	INDestado_clave = OFB:MISCestado_clave_mot
	          	INDadt_sval = 0
	          	CALL TRANimprimo_driver */
                
                //Inicio gpb:AUT-2415 
                /*CALL MISCdumptable 
                  CALL CDSdumptable*/  
						    //resguardo los valores originales
						    LET l_tabla = admin:tabla 
						    LET l_INDCamposTablas = post:INDCamposTablas                  
                CALL post:MISCdumptableNew 
								admin:tabla = "motivos"
								post:INDCamposTablas = LST:LISTmotivos_flds
                CALL post:CDSdumptableNew  
                //recupero los valores originales
								LET admin:tabla = l_tabla
								LET post:INDCamposTablas = l_INDCamposTablas
                //Fin gpb:AUT-2415 
                
	          	CALL CSR:proc_list(170,LST:LISTmotivos_flds)
	          	CALL CSR:proc_list(190,LST:LISTmotivos_flds)
	          	CALL MISCdisable_combos
	          	//cliente medio
	          	CALL ABMmot_clear
	          	CALL MISCdisable_chkMot
	          	RETURN (-1)
        	END IF
      	END IF
      	RETURN (-1)
    END IF
    CALL CSR:proc_list(170,LST:LISTmotivos_flds)
    CALL CSR:proc_list(190,LST:LISTmotivos_flds)
    CALL MISCdisable_combos
    CALL ABMmot_clear
    CALL MISCdisable_chkMot
    RETURN (-1)
END SUB

/*******/
