/****o* Pendientes de agrupación/OFB:op:FVALoperador_est_ing
* NOMBRE
*   OFB:op:FVALoperador_est_ing
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "opfval.h"

SUB op:FVALoperador_est_ing
    local LineaPick like common:csr_string
    local LLogin like op:adt_login_id
    
    let LLogin = op:adt_login_id    
    
    setflag drv:mode_flags,picklist_mode
    
   ;Si es auditor, no puede modificar datos del operador	
    if (op:op_audit_auth == "X") then
        errmsg lst:common:errmsg_list, "No posee permisos para modificar Operadores"
        return (-2)
    end if		

    if (op:adt_branch_id == common:sucursal_activa) then
        fprint common:csr_string "NO PUEDE ACTUALIZAR LA PROPIA SUCURSAL"
        msgbox common:csr_string OFB_OK "ERROR"
        return (-2)
    end if
    let Dest_Server = admin:adt_br_server

    fyimsg drv:fyimsg_list,"INICIANDO CONEXION REMOTA"
    call ofb:MISCconnect

    if (retval == -1) then
        call ofb:MISCre_connect
        errmsg lst:common:errmsg_list, "NO PUEDO ESTABLECER LA CONEXION"
        return (-2)
    end if

    ;Chekeo que la sucursal a la que me conecto, 
    ;sea la que me quiero conectar.
    ;Si la parametria esta mal cargada, puede pasar que elija
    ;una sucursal y termine conectandome a otra.
    call op:MISCCheckSucAct
    if (retval < 0) then
        call ofb:MISCre_connect
        return (-2)
    end if

    cds select from dsc:op:adt_op_table  becomes  dsc:op:adt_op_context \
         where op:op_branch_id == op:adt_branch_id && \
               op:op_node_id != "" ascending
           
    cds findfirst dsc:op:adt_op_context nolock
    let lib:err_retval = cdsretval
    if (cdsretval < 0) then
    	fprint common:csr_string "NO HAY OPERADORES IDENTIFICADOS"
        msgbox common:csr_string OFB_OK "Aviso"
        return (-2)
    end if
    
    call csr:f_sadroppl DSC:PickOperadores 
    call csr:f_sanewpl  DSC:PickOperadores PIC:PickOperadores 620 200
    
    while (lib:err_retval == 0)
           cds extract dsc:op:adt_op_context \
               op:op_login_id into op:adt_login_id \
               op:op_branch_id into op:adt_branch_id \
               op:op_operator_id into op:adt_operator_id \
               op:op_node_id into op:adt_node_id
                              
           fprint fld:LineaPick "%-14.14s %-5.5s %-5.5s IDENTIF %s" \
                  op:adt_login_id,\
                  op:adt_branch_id,\
                  op:adt_operator_id,\
                  op:adt_node_id
           
           call csr:f_saaddpl dsc:PickOperadores  fld:LineaPick 
           cds findnext dsc:op:adt_op_context nolock
           let lib:err_retval = cdsretval
    end while
    cds endselect dsc:op:adt_op_context
    call csr:f_sadopl dsc:PickOperadores fld:LineaPick            
    if (retval >= 0) then
    	let op:adt_login_id = substr(LineaPick,0,14)
        let op:adt_branch_id = substr(LineaPick,15,5)
        let op:adt_operator_id = substr(LineaPick,21,5)
        let op:adt_node_id = substr(LineaPick,35,40)
        refresh op:adt_login_id
        refresh op:adt_branch_id
        refresh op:adt_operator_id
        refresh op:adt_node_id
        call csr:trimfield(op:adt_login_id)
        call csr:trimfield(op:adt_branch_id)
        call csr:trimfield(op:adt_operator_id)
        call csr:trimfield(op:adt_node_id)
    	return (0)
    else
       ;restauro datos originales
        if (FLD:LLogin != "" && FLD:LLogin != op:op_login_id) then
            call op:CDSadt_op_load
        end if
        return (-2)
    end if
END SUB

/*******/
