/****o* Pendientes de agrupación/OFB:op:CDSexiste_operador
* NOMBRE
*   OFB:op:CDSexiste_operador
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "opcds.h"

SUB op:CDSexiste_operador
    ;SMC Busco Operador en sucursal destino
	/*Se agrega marca de borrado logico - Gabriel Falciola*/
	CDS SELECT FROM DSC:op:adt_op_table  BECOMES  DSC:op:adt_op_context \
	WHERE op:op_branch_id == FLD:op:adt_branch_id && \
	op:op_login_id == FLD:op:adt_login_id && \
	op:op_borrado_logico != "S" ASCENDING
	CDS FINDFIRST DSC:op:adt_op_context NOLOCK
	LET lib:err_retval = CDSRETVAL
/*
	IF (lib:err_retval != 0)
        if (op:old_branch_id.numchars > 0) then
    	    ;Si no esta en la destino, lo busco en la anterior sucursal ingresada
    	    ;por si es un movimiento de operadores entre sucursales.
        	CDS SELECT FROM DSC:op:adt_op_table  BECOMES  DSC:op:adt_op_context \
        		 WHERE op:op_branch_id == FLD:op:old_branch_id && \
    	    	       op:op_login_id == FLD:op:adt_login_id ASCENDING
        	CDS FINDFIRST DSC:op:adt_op_context NOLOCK
            ;SMC si lo en la sucursal anterior encuentro, devuelvo
        	IF (lib:err_retval == 0) then
                let lib:err_retval = -801
        	end if
        endif
	END IF
*/
	CDS ENDSELECT DSC:op:adt_op_context
	return (lib:err_retval)
END SUB

/*******/
