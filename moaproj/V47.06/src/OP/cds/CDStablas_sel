/****o* Pendientes de agrupación/OFB:op:CDStablas_sel
* NOMBRE
*   OFB:op:CDStablas_sel
* DESCRIPCION
*   Comportamiento del objeto (obligatorio)
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/
#include "opcds.h"

//SMC - adm. de tablas
//busca las tablas sobre las que NO tiene permiso un determinado operador
SUB op:CDStablas_sel

    local LIndice like common:csr_string
    local RetValTmp like common:csr_string
    local LineaPick like common:csr_string

    let LIndice = 0
    let RetValTmp = 0
	IF (adt_operador.NUMCHARS == 0) // si no hay operador seleccionado
        ERRMSG LST:common:errmsg_list, "DEBE SELECIONAR UN ADMINISTRADOR."
	    return (-2)
	END IF

    CALL  CSR:f_sanewpl "TablasDisp" PIC:TablasPerm 350 200

	/*Tablas del servicio main*/
	CDS SELECT FROM "main:tables" BECOMES adt_Tablas_ctx where common:Cds_owner == common:owner_table
	CDS FINDFIRST DSC:op:adt_Tablas_ctx NOLOCK
	WHILE (CDSRETVAL == 0)
		;CDS EXTRACT DSC:op:adt_Tablas_ctx adt_tablas_grupo adt_tablas_nombre
        CDS EXTRACT DSC:op:adt_Tablas_ctx \
            common:Cds_table_name into adt_tablas_nombre \
            common:Cds_table_comment into adt_tablas_desc

		CDS SELECT FROM DSC:adt_permisos_table BECOMES DSC:adt_permisos_ctx \
		WHERE adt_permisos_op == adt_operador && \
		adt_permisos_tabla == adt_tablas_nombre
		CDS FINDFIRST DSC:op:adt_permisos_ctx  NOLOCK
		IF (CDSRETVAL < 0 )
		   fprint LineaPick ,"%-30s %-20s", adt_tablas_desc, adt_tablas_nombre
           CALL  CSR:f_saaddpl "TablasDisp" LineaPick
           LIndice = LIndice + 1
		END IF
		CDS ENDSELECT DSC:adt_permisos_ctx

		CDS FINDNEXT adt_Tablas_ctx LOCK
	END WHILE
	CDS ENDSELECT adt_Tablas_ctx

	/*Tablas del servicio gene*/
	CDS SELECT FROM "gene:tables" BECOMES adt_Tablas_ctx where common:Cds_owner == common:owner_table
	CDS FINDFIRST DSC:op:adt_Tablas_ctx NOLOCK
	WHILE (CDSRETVAL == 0)
		;CDS EXTRACT DSC:op:adt_Tablas_ctx adt_tablas_grupo adt_tablas_nombre
        CDS EXTRACT DSC:op:adt_Tablas_ctx \
            common:Cds_table_name into adt_tablas_nombre \
            common:Cds_table_comment into adt_tablas_desc

		CDS SELECT FROM DSC:adt_permisos_table BECOMES DSC:adt_permisos_ctx \
		WHERE adt_permisos_op == adt_operador && \
		adt_permisos_tabla == adt_tablas_nombre
		CDS FINDFIRST DSC:op:adt_permisos_ctx  NOLOCK
		IF (CDSRETVAL < 0 )
		   fprint LineaPick ,"%-30s %-20s", adt_tablas_desc, adt_tablas_nombre
           CALL  CSR:f_saaddpl "TablasDisp" LineaPick
           LIndice = LIndice + 1
		END IF
		CDS ENDSELECT DSC:adt_permisos_ctx

		CDS FINDNEXT adt_Tablas_ctx LOCK
	END WHILE
	CDS ENDSELECT adt_Tablas_ctx

    clearfield LineaPick
    CALL CSR:f_sadopl ("TablasDisp",LineaPick)

    if (retval >= 0) then
        move substr(LineaPick,0,30) to common:Cds_table_comment
        call csr:trimfield(common:Cds_table_comment)
        move substr(LineaPick,31,20) to adt_dar_permisos
        call csr:trimfield(adt_dar_permisos)
    else
        clearfield adt_dar_permisos
        let RetValTmp = -2
    endif

    move adt_dar_permisos to adt_tablas_nombre
    refresh adt_dar_permisos
    call csr:PickOp 4 "TablasDisp" "0,10"
    CALL  csr:f_sadroppl "TablasDisp"

    ;SMC si esta en cero, significa que ya tiene permisos sobre todas las tablas
    if (LIndice == 0) then
       ERRMSG LST:common:errmsg_list, "ADMINISTRADOR YA POSEE PERMISOS SOBRE TODAS LAS TABLAS."
    endif
    return (RetValTmp)
END SUB

/*******/
