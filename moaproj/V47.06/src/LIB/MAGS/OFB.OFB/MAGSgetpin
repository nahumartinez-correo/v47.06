#include "magsOFB.OFB.h"

/****o* Pendientes de agrupación/OFB:lib:MAGSgetpin
* NOMBRE
*   OFB:lib:MAGSgetpin
* DESCRIPCION
*   Read P.I.N. from Pinpad.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   RETVAL =  n  if n characters in lib:mags_pinbuf (n > 0)	
*          =  0  if operator reset								
*          = -1  if error										
*   mags_pindata = digits entered (w/o "?" from ENTER key)		
*   mags_pinbuf  = data entered (digits + "?" from ENTER key)	
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/

	SUB lib:MAGSgetpin
	let mags_dev_retry = 3
	fyimsg common:fyimsg_list,DSC:mags_pinreq
	DO
		clearfield mags_pindata
		clearfield mags_pinbuf
// not suptd		wnread PN,pinpad,0,mags_pinbuf
/* check for good read */
		if (retval > 0) /* if successful,...*/
			let mags_mrdlen = retval - 1 /* offset to last char */
			if (substr(mags_pinbuf,mags_mrdlen,1) != "?")
				let mags_mrdlen = mags_mrdlen + 1 /* include last */
			END IF
			move substr(mags_pinbuf,0,mags_mrdlen) to\
				mags_pindata /* move digits to mags_pindata */
			fyimsg clear
			break /* return length to caller */
		END IF
/* check for keyboard reset */
		if (retval == 0) /* if reset,exit */
			fyimsg common:fyimsg_list,DSC:mags_pinfyi_0
			break
		END IF
/* check for errors */
		SELECT (retval)
			case -2 /* if timeout,retry */
				fyimsg common:fyimsg_list,DSC:mags_pinfyi_2
				break
			case -3 /* if device not configured,exit */
				fyimsg common:fyimsg_list,DSC:mags_pinfyi_3
				let mags_dev_retry = 1 /* force final retry */
				break
			case -4 /* if device busy,retry */
				fyimsg common:fyimsg_list,DSC:mags_pinfyi_4
				CONTINUE /* don't decrement counter */
				CASE ELSE /* if other read error retry */
				fyimsg common:fyimsg_list,DSC:mags_pinfyi_5
				break
		END SELECT
/* decrement retry counter - check for retries used up */
		let mags_dev_retry = mags_dev_retry - 1
		if (mags_dev_retry > 0) /* if retries left,...*/
			CONTINUE /* try again */
		else /* else retries used up,...*/
			let retval = -1 /* so return error */
			break
		END IF
	LOOP
	return (retval)
	END SUB

/*******/
