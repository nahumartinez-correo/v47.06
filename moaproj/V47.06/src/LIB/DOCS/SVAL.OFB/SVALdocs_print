/****o* Pendientes de agrupación/OFB:lib:SVALdocs_print
* NOMBRE
*   OFB:lib:SVALdocs_print
* DESCRIPCION
* 	Document Print Routine										
* 	This routine will print the specified number of copies for	
* 	each of up to 12 sets of documents.							
* 	The printing is done as a post collect routine so that the	
* 	data collect screen will remain visible during printing and	
* 	so that a reset out of printing will return to data collect.
* ENTRADAS
*   Parámetros de entrada de la rutina, sean argumentos o campos que tiene en cuenta
* SALIDAS
*   Campos modificados como resultado o returns cuyos valores sean no triviales
* IMPACTOS
*   Otros objetos que deberán ser analizados al modificar el objeto actual
* REFERENCIADO POR
*   Objetos que llaman al objeto documentado (obligatorio)
* DOCUMENTACION
*   Documentación relevante que deberá ser actualizada por la modificación de la rutina
* SOURCE
*/

#include "docsSVAL.OFB.h"

* Upon Entry:													
*   docs_toprintn (n=1,12)  = count to print for set n			
*   docs_printedn (n=1,12)  = count printed for set n			
*   INDdocs_listn (n=1,12)  = document list for set n			
* Upon Exit:													
*   RETVAL =  0 - if printing completed successfully			
*          = -2 - if reset out of printing						

	SUB lib:SVALdocs_print
/* check for deferred printing */
	if (docs_print_now == "N")
		return
	END IF
	resetflag common:rt_flags,printreset
	move "Y"  to docs_print_now
/* print document set 1 */
	DO
		if (docs_toprint1 > 0)
			let lib:INDdocs_run = INDdocs_list1
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint1 = docs_toprint1 - 1
				let docs_printed1 = (docs_printed1 + 1)
				refresh docs_toprint1
				refresh docs_printed1
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 2 */
	DO
		if (docs_toprint2 > 0)
			let lib:INDdocs_run = INDdocs_list2
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint2 = docs_toprint2 - 1
				let docs_printed2 = (docs_printed2 + 1)
				refresh docs_toprint2
				refresh docs_printed2
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 3 */
	DO
		if (docs_toprint3 > 0)
			let lib:INDdocs_run = INDdocs_list3
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint3 = docs_toprint3 - 1
				let docs_printed3 = (docs_printed3 + 1)
				refresh docs_toprint3
				refresh docs_printed3
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 4 */
	DO
		if (docs_toprint4 > 0)
			let lib:INDdocs_run = INDdocs_list4
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint4 = docs_toprint4 - 1
				let docs_printed4 = (docs_printed4 + 1)
				refresh docs_toprint4
				refresh docs_printed4
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 5 */
	DO
		if (docs_toprint5 > 0)
			let lib:INDdocs_run = INDdocs_list5
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint5 = docs_toprint5 - 1
				let docs_printed5 = (docs_printed5 + 1)
				refresh docs_toprint5
				refresh docs_printed5
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 6 */
	DO
		if (docs_toprint6 > 0)
			let lib:INDdocs_run = INDdocs_list6
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint6 = docs_toprint6 - 1
				let docs_printed6 = (docs_printed6 + 1)
				refresh docs_toprint6
				refresh docs_printed6
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 7 */
	DO
		if (docs_toprint7 > 0)
			let lib:INDdocs_run = INDdocs_list7
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint7 = docs_toprint7 - 1
				let docs_printed7 = (docs_printed7 + 1)
				refresh docs_toprint7
				refresh docs_printed7
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 8 */
	DO
		if (docs_toprint8 > 0)
			let lib:INDdocs_run = INDdocs_list8
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint8 = docs_toprint8 - 1
				let docs_printed8 = (docs_printed8 + 1)
				refresh docs_toprint8
				refresh docs_printed8
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 9 */
	DO
		if (docs_toprint9 > 0)
			let lib:INDdocs_run = INDdocs_list9
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint9 = docs_toprint9 - 1
				let docs_printed9 = (docs_printed9 + 1)
				refresh docs_toprint9
				refresh docs_printed9
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 10 */
	DO
		if (docs_toprint10 > 0)
			let lib:INDdocs_run = INDdocs_list10
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint10 = docs_toprint10 - 1
				let docs_printed10 = (docs_printed10 + 1)
				refresh docs_toprint10
				refresh docs_printed10
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 11 */
	DO
		if (docs_toprint11 > 0)
			let lib:INDdocs_run = INDdocs_list11
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint11 = docs_toprint11 - 1
				let docs_printed11 = (docs_printed11 + 1)
				refresh docs_toprint11
				refresh docs_printed11
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
/* print document set 12 */
	DO
		if (docs_toprint12 > 0)
			let lib:INDdocs_run = INDdocs_list12
			CALL  lib:MISCdo_doc
			if (!testflag(common:rt_flags,printreset))
				let docs_toprint12 = docs_toprint12 - 1
				let docs_printed12 = (docs_printed12 + 1)
				refresh docs_toprint12
				refresh docs_printed12
			else
				return (-2) /* cval error */
			END IF
		else
			break
		END IF
	LOOP
        CALL lib:CLEARdocs_list
	END SUB

/*******/
