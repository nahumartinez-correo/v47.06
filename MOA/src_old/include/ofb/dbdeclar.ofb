#ifndef _DBDECLAR_OFB
#define _DBDECLAR_OFB

DECLARE "DBfreeEnv" LIB "odb.dll" (BYVAL /*env_handle*/)
/*******************************************************************************
// Functions on db connection objects
//*****************************************************************************/
DECLARE "DBdisconnect" LIB "odb.dll" (BYVAL /*dbc_handle*/)
DECLARE "DBsetConnectOption" LIB "odb.dll" (BYVAL, /*dbc_handle */  BYVAL, /* optionID */ BYVAL /*option value*/ )
DECLARE "DBsetTrace" LIB "odb.dll" (BYVAL, /*dbc_handle */  BYVAL /* 0 = off, else _on_ */)
DECLARE "DBsetDebug" LIB "odb.dll" (BYVAL /*mask_flags*/)  /* set debug logging mask */ 
DECLARE "DBlastmsg" LIB "odb.dll" (BYOBJ, BYVAL)  /* put last message for connect in field */
                              /* (fld, dbc) */
DECLARE "DBsqlState" LIB "odb.dll" (BYOBJ, BYVAL)  /* put last SQLState for connect in field */
                              /* (fld, dbc) */
DECLARE "DBgetInfo" LIB "odb.dll" (BYVAL, /*dbc_handle */  BYVAL, /* info type ID */ BYOBJ /*info value return field*/ )
DECLARE "DBexistsTable" LIB "odb.dll" (DATAREF, BYVAL)  /* return 0 if table named exists */
                              /* (table_name, dbc_handle) */

DECLARE "DBdropTable" LIB "odb.dll" (DATAREF, BYVAL)  /* return 0 if table successfully dropped */
                              /* (table_name, dbc_handle) */

DECLARE "DBcreateTable" LIB "odb.dll" (BYVAL, BYVAL, DATAREF, BYOBJ, ...)	/* list of fields */
DECLARE "DBcreateTableNullOk" LIB "odb.dll" (BYVAL, BYVAL, DATAREF, BYOBJ, ...)	/* list of fields */

DECLARE "DBbegin" LIB "odb.dll" (BYVAL /*dbc_handle*/)
DECLARE "DBcommit" LIB "odb.dll" (BYVAL /*dbc_handle*/)
DECLARE "DBrollback" LIB "odb.dll" (BYVAL /*dbc_handle*/)
DECLARE "DBinLUW" LIB "odb.dll" (BYVAL)
DECLARE "DBsqlExecute" LIB "odb.dll" (BYVAL,/*dbc_handle*/ DATAREF /*sql_text*/)
DECLARE "DBdoQuery" LIB "odb.dll" (BYVAL, /*dbc_handle*/  BYVAL /*rows*/, DATAREF /*sql_text*/, BYOBJ, ...)
//DBproc(dbconnect *dbc, const char *sql_text, ...)
DECLARE "DBproc" LIB "odb.dll" (BYVAL, /*dbc_handle*/  DATAREF /*sql_text*/, BYOBJ, ...)

/********************************************************************************
// query_def functions
//*******************************************************************************/
DECLARE "DBdefineQuery" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, BYVAL, DATAREF, BYOBJ, ...)
/* (query_def_handle_field, dbc_handle, name, rows, sql, in_field_1, ..., in_field_n, 0, 
		out_field1, out_field2, ..., out_field_n, 0) */
DECLARE "DBdefine_query" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, BYVAL, DATAREF, BYOBJ, ...)
			 // duplicate definition with obsolete name, please use DBdefineQuery()

DECLARE "DBmultiDisplay" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, BYVAL, BYOBJ, DATAREF /*tables*/, DATAREF /*where*/, BYOBJ, ...)
// (rtobj *qfieldobj, void *dbc, const char *query_name, int flags, rtobj *list, LPSTR tables, LPSTR where_clause, rtobj *inparms, ...);

DECLARE "DBcreateQueryLst" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, DATAREF, BYVAL, BYVAL, BYOBJ, BYVAL, BYVAL, DATAREF, BYOBJ, ...)
//DBcreateQueryLst(rtobj *fldobj,dbconnect *dbc, const char *tables, const char *name, unsigned rows, 
//	bool use_bookmarks, rtobj *projection_list, int element_index, bool do_ofb, const char *where_clause, rtobj *inparms,  ...)
DECLARE "DBsetTimeoutDefaults" LIB "odb.dll" (BYVAL, BYVAL, BYVAL)
//(dbconnect *dbc, int a_time_out_seconds, int r_time_out_seconds)

	/**************************************************************************************/
	//  ALL FIELD LISTS are NULL TERMINATED! ***********************************************
	/**************************************************************************************/


DECLARE "DBqExecute" LIB "odb.dll" (BYVAL /*query_def_handle*/)
DECLARE "DBqclose" LIB "odb.dll" (BYVAL /*query_def_handle*/)
DECLARE "DBfetch" LIB "odb.dll" (BYVAL /*query_def_handle*/)	 /* fetch next row(s) buffer */

DECLARE "DBexFetch" LIB "odb.dll" (BYVAL /*query_def_handle*/ BYVAL /*fetch_type*/ BYVAL /* irow */)	 /* extended fetch */
DECLARE "DBxFetch" LIB "odb.dll" (BYVAL /*query_def_handle*/ BYVAL /*fetch_type*/)	 /* extended fetch */
DECLARE "DBextractRow" LIB "odb.dll" (BYVAL /*query_def_handle*/ BYVAL /* row_index */)	 
DECLARE "DBqBufferRows" LIB "odb.dll" (BYVAL /*query_def_handle*/); // returns max # of buffer rows or -1
DECLARE "DBqRowsFound" LIB "odb.dll" (BYVAL /*query_def_handle*/); // returns # of rows currently in buffer or -1
DECLARE "DBsetCurrentRowSubscript" LIB "odb.dll" (BYVAL /*query_def_handle*/, BYVAL /*new row number*/);
DECLARE "DBCurrentRowSubscript"  LIB "odb.dll" (BYVAL /*query_def_handle*/);
DECLARE "DBrowsAffected" LIB "odb.dll" (BYVAL /*query_def_handle*/)
DECLARE "DBsetQTimeout" LIB "odb.dll" (BYVAL, BYVAL)
//				(query_def *q, int time_out_seconds)

DECLARE "DBbookmarkable" LIB "odb.dll" (BYVAL /*record_set_handle*/)
		 /* return 1 if record set is bookmarkable */

DECLARE "DBretrieve" LIB "odb.dll" (BYVAL, BYVAL, BYOBJ, BYREF, BYREF, BYOBJ, ...)
/*DBretreive(handle dbc, int element_index, rtobj *projection_list, char *from_tables, char *where_clause, rtobj *inparms);*/
/********************************************************************************
//  Functions on Dynaset objects
//  dynasets are a sub class of query_def
//******************************************************************************/
DECLARE "DBcreateDynaset" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, BYVAL, BYVAL, DATAREF, BYOBJ, ...)
	/* (dynaset_handle_field, dbc_handle, name, rows, use_bookmarks, sql_text, infield1, ..., in_field_n, 0, \
		output_field1, ..., output_field_n, 0)  all field lists are null terminated! */
DECLARE "DBcreateDynasetLst" LIB "odb.dll" (BYOBJ, BYVAL, DATAREF, DATAREF, BYVAL, BYVAL, BYOBJ, BYVAL, BYVAL, DATAREF, BYOBJ, ...)
	/* (dynaset_handle_field, dbc_handle, tables, setname, rows, use_bookmarks, list, list_index, do_ofb, where_clause, infield1, ..., in_field_n, 0)
	**  all field parameter lists are null terminated! */
DECLARE "DBupdate" LIB "odb.dll" (BYVAL /*dynaset*/)  /* Update current record of dynaset */
					/* passing to server any fields that changed since fetch and have dataentered flag on */
DECLARE "DB_update" LIB "odb.dll" (BYVAL /*dynaset*/)  /* Update current record of dynaset */
					/* passing to server _any_ fields that changed from column values since fetch */
DECLARE "DBupdateFlds" LIB "odb.dll" (BYVAL /*dynaset*/, DATAREF /*column_names*/, BYOBJ, ...)
					/* Update currrent record of dynaset, passing field list */

DECLARE "DBdelete" LIB "odb.dll" (BYVAL /*dynaset*/) /* current record of dynaset */

DECLARE "DBgetColumnValue" LIB "odb.dll" (BYVAL /*record_set*/, DATAREF /*column_name*/ , BYOBJ /*receiving field*/)

DECLARE "DBupdatable" LIB "odb.dll" (BYVAL /*dynaset*/) /* return 1 if dynaset is updatable, else 0 */


/********************************************************************************
// Functions on table objects
//******************************************************************************/
	   /* Insert into named table, using optionally named columns and coresponding fields */
DECLARE "DBinsert" LIB "odb.dll" (BYVAL, DATAREF, DATAREF, BYOBJ, ...)
//int DBinsert(dbenv *env, const char *table_name,const char *column_names,field *fld1, field *fld2, ...);
//                       column_names may be NULL pointer
DECLARE "DBinsert1" LIB "odb.dll" (BYVAL, DATAREF, BYVAL, BYVAL)
	   /* Insert into named table, using server's column definitions and coresponding fields */
//int DBinsert1(dbenv *env, const char *table_name,byte applno, byte alternate_applno);
//        uses all column/field names defined for table at server. 

DECLARE "DBinsertLst" LIB "odb.dll" (BYVAL, DATAREF, BYVAL, BYOBJ)
//int DBinsertLst(int envHandle, const char *table_name, int element_index, rtobj *lst);

// Functions for Q/A testing
DECLARE "setFld" LIB "odb.dll" (BYOBJ, DATAREF)  /* let fld value = dataref */
                              /* (fld, string) */

#endif
