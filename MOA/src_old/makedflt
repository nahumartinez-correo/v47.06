# =====================================================================
# SRC\MAKEDFLT - Common mosaic OA NMAKE Definitions
#
# ---------------------------------------------------------------------
# This file should be included at the top of all MAKEFILEs as follows:
#  !include ..\makedflt
# ---------------------------------------------------------------------
# mosaic OA NMAKE Options:
#
# Use the table below to determine the additional options for NMAKE
# to generate various applications for field, debugging, profiling
# and performance tuning information.  The default is to make FAT 
# applications with debugging information. 
#
# Application Information Type            Invoke NMAKE
# ----------------------------            ------------
# Make FAT Version                        nmake (or make all)
# Make SLIM Version                       nmake slim
# Make UNICODE Version                    nmake unicode
# Make CLEAN FAT Version                  nmake clean
# Make CLEAN SLIM Version                 nmake slimclean
# Make CLEAN UNICODE Version              nmake unicodeclean
# Check RCS Files                         nmake check (or nmake check CHKOPT="-d -A")
# Assign Symbolic Names to RCS Files      nmake name RCSNAME="R2C3"
# Create the \CKPT directory              nmake ckpt
# For Working Set Tuner Info              nmake tune=1 (note1)
# For Call Attribute Profiling Info       nmake profile=1 (note2)
#
# Note1: Working Set Tuner and Call Attribute Profiling is available 
#        only for the Intel x86 and Pentium systems
#
# Note2: The "No Debugging", "Working Set Tuning" and "Call Attribute
#        Profiling" are mutually exclusive (you may use only one 
#        option to compile/link the application.
#
# Note3: The "Field" option and "Working Set Tuning" or "Call Attribute
#        Profiling" are mutually exclusive (you may use the field option
#        to compile/line the either "Debug" or "No Debug" applications.
#
# =====================================================================

# ----------------------------------------------------------------
# Get CPU Type from environment - default to 'i386' if not defined
# ----------------------------------------------------------------
!IFNDEF CPU
CPU	= i386
!ENDIF

# --------------------------------------------------
# Default NMAKE definitions for NT Win32 environment
# --------------------------------------------------
!include <ntwin32.mak>
!cmdswitches +S

# ----------------------------------------------
# Fix debug options to prevent MSVC.PDB problems
# ----------------------------------------------
!IF "$(cdebug)"=="-Zi -Od"
cdebug = -Z7 -Od
!ENDIF

# ----------------------
# Target dependent macros
# ----------------------

# ---------------------------------
# Debug and target dependent macros
# ---------------------------------
!IFDEF NODEBUG
odebug	=  -DNDEBUG
objs	= WinRel
libs	= ..\lib_slim
exe		= ..\..\bin_slim
!ELSE
#odebug	= -DDEBUGCODEWANTED -DMDEBUG
odebug	= -DDEBUGCODEWANTED
objs	= WinDebug
libs	= ..\lib
exe		= ..\..\bin
!ENDIF

# ----------------------------------------
# PROGRAM OPTIONS
# ----------------------------------------
!ifndef CHKOPTS
CHKOPTS   = -d -A
!endif
!ifndef RCSNAME
RCSNAME   = 
!endif

# ----------------------------------------
# TOOL macros (suppress Microsoft banners)
# ----------------------------------------
cc		= cl /nologo
implib	= lib /nologo
link	= link /nologo

# ----------------------------------------------------
# 'cause CL doesn't automatically include this anymore
# ----------------------------------------------------
moalibs	= $(conlibsdll)

# --------------------------------
# mosaic OA default compiler flags
# --------------------------------
cf	= -MD -I..\include -I..\..\lib -I. -DNT -DWIN32 -DLITTLE_ENDIAN $(odebug)

# ----------------------------------------------------------------
# Inference rules which compare a .C file in the current directory
# with the corresponding .OBJ file in another directory:
# ----------------------------------------------------------------
.c{$(objs)}.obj:
	$(cc) $(cflags) $(cvars) $(cdebug) $(cf) /Fo$(objs)\ $<

.c{$(libs)}.obj:
	$(cc) $(cflags) $(cvars) $(cdebug) $(cf) /Fo$(libs)\ $<
